/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var flickr = __webpack_require__(1);
	var fStems = __webpack_require__(3);
	var _ = __webpack_require__(2);
	const defString = "I'm surprised! I didn't know you could make it.";
	let convertStemToImage = _.compose(_.map(flickr), fStems);
	convertStemToImage(defString);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(2);
	const map = _.map,
	  curry = _.curry,
	  compose = _.compose,
	  prop = _.prop,
	  filter = _.filter;

	var Impure = {
	  setData: curry(function(sel, data) {
	    $(sel).html(data);
	  }),
	  get: curry(function(callback, url) {
	    $.getJSON(url, callback);
	  })
	};

	var img = function(url) {
	  return `<img src="${url}" />`;
	}

	var trace = curry(function(tag, x) {
	  console.log(tag, x);
	  return x;
	});

	var url = function(t) {
	  return `http://api.flickr.com/services/feeds/photos_public.gne?tags=${t}&format=json&jsoncallback=?`;
	};

	var mediaUrl = compose(prop('m'), prop('media'));

	var mediaToImage = compose(img, mediaUrl);

	var images = compose(map(mediaToImage), prop('items'));

	var processImageData = compose(Impure.setData('.app'), images);

	module.exports = compose(Impure.get(processImageData), url);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	//  Ramda v0.22.1
	//  https://github.com/ramda/ramda
	//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers
	//  Ramda may be freely distributed under the MIT license.

	;(function() {

	  'use strict';

	  /**
	     * A special placeholder value used to specify "gaps" within curried functions,
	     * allowing partial application of any combination of arguments, regardless of
	     * their positions.
	     *
	     * If `g` is a curried ternary function and `_` is `R.__`, the following are
	     * equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2, _)(1, 3)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @constant
	     * @memberOf R
	     * @since v0.6.0
	     * @category Function
	     * @example
	     *
	     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
	     *      greet('Alice'); //=> 'Hello, Alice!'
	     */
	    var __ = { '@@functional/placeholder': true };

	    /* eslint-disable no-unused-vars */
	    var _arity = function _arity(n, fn) {
	        /* eslint-disable no-unused-vars */
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.apply(this, arguments);
	            };
	        case 1:
	            return function (a0) {
	                return fn.apply(this, arguments);
	            };
	        case 2:
	            return function (a0, a1) {
	                return fn.apply(this, arguments);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                return fn.apply(this, arguments);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                return fn.apply(this, arguments);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                return fn.apply(this, arguments);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                return fn.apply(this, arguments);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                return fn.apply(this, arguments);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                return fn.apply(this, arguments);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                return fn.apply(this, arguments);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return fn.apply(this, arguments);
	            };
	        default:
	            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	        }
	    };

	    var _arrayFromIterator = function _arrayFromIterator(iter) {
	        var list = [];
	        var next;
	        while (!(next = iter.next()).done) {
	            list.push(next.value);
	        }
	        return list;
	    };

	    var _arrayOf = function _arrayOf() {
	        return Array.prototype.slice.call(arguments);
	    };

	    var _cloneRegExp = function _cloneRegExp(pattern) {
	        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
	    };

	    var _complement = function _complement(f) {
	        return function () {
	            return !f.apply(this, arguments);
	        };
	    };

	    /**
	     * Private `concat` function to merge two array-like objects.
	     *
	     * @private
	     * @param {Array|Arguments} [set1=[]] An array-like object.
	     * @param {Array|Arguments} [set2=[]] An array-like object.
	     * @return {Array} A new, merged array.
	     * @example
	     *
	     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     */
	    var _concat = function _concat(set1, set2) {
	        set1 = set1 || [];
	        set2 = set2 || [];
	        var idx;
	        var len1 = set1.length;
	        var len2 = set2.length;
	        var result = [];
	        idx = 0;
	        while (idx < len1) {
	            result[result.length] = set1[idx];
	            idx += 1;
	        }
	        idx = 0;
	        while (idx < len2) {
	            result[result.length] = set2[idx];
	            idx += 1;
	        }
	        return result;
	    };

	    var _containsWith = function _containsWith(pred, x, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (pred(x, list[idx])) {
	                return true;
	            }
	            idx += 1;
	        }
	        return false;
	    };

	    var _filter = function _filter(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        while (idx < len) {
	            if (fn(list[idx])) {
	                result[result.length] = list[idx];
	            }
	            idx += 1;
	        }
	        return result;
	    };

	    var _forceReduced = function _forceReduced(x) {
	        return {
	            '@@transducer/value': x,
	            '@@transducer/reduced': true
	        };
	    };

	    // String(x => x) evaluates to "x => x", so the pattern may not match.
	    var _functionName = function _functionName(f) {
	        // String(x => x) evaluates to "x => x", so the pattern may not match.
	        var match = String(f).match(/^function (\w*)/);
	        return match == null ? '' : match[1];
	    };

	    var _has = function _has(prop, obj) {
	        return Object.prototype.hasOwnProperty.call(obj, prop);
	    };

	    var _identity = function _identity(x) {
	        return x;
	    };

	    var _isArguments = function () {
	        var toString = Object.prototype.toString;
	        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
	            return toString.call(x) === '[object Arguments]';
	        } : function _isArguments(x) {
	            return _has('callee', x);
	        };
	    }();

	    /**
	     * Tests whether or not an object is an array.
	     *
	     * @private
	     * @param {*} val The object to test.
	     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	     * @example
	     *
	     *      _isArray([]); //=> true
	     *      _isArray(null); //=> false
	     *      _isArray({}); //=> false
	     */
	    var _isArray = Array.isArray || function _isArray(val) {
	        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	    };

	    var _isFunction = function _isFunction(x) {
	        return Object.prototype.toString.call(x) === '[object Function]';
	    };

	    /**
	     * Determine if the passed argument is an integer.
	     *
	     * @private
	     * @param {*} n
	     * @category Type
	     * @return {Boolean}
	     */
	    var _isInteger = Number.isInteger || function _isInteger(n) {
	        return n << 0 === n;
	    };

	    var _isNumber = function _isNumber(x) {
	        return Object.prototype.toString.call(x) === '[object Number]';
	    };

	    var _isObject = function _isObject(x) {
	        return Object.prototype.toString.call(x) === '[object Object]';
	    };

	    var _isPlaceholder = function _isPlaceholder(a) {
	        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
	    };

	    var _isRegExp = function _isRegExp(x) {
	        return Object.prototype.toString.call(x) === '[object RegExp]';
	    };

	    var _isString = function _isString(x) {
	        return Object.prototype.toString.call(x) === '[object String]';
	    };

	    var _isTransformer = function _isTransformer(obj) {
	        return typeof obj['@@transducer/step'] === 'function';
	    };

	    var _map = function _map(fn, functor) {
	        var idx = 0;
	        var len = functor.length;
	        var result = Array(len);
	        while (idx < len) {
	            result[idx] = fn(functor[idx]);
	            idx += 1;
	        }
	        return result;
	    };

	    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	    var _objectAssign = function _objectAssign(target) {
	        if (target == null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }
	        var output = Object(target);
	        var idx = 1;
	        var length = arguments.length;
	        while (idx < length) {
	            var source = arguments[idx];
	            if (source != null) {
	                for (var nextKey in source) {
	                    if (_has(nextKey, source)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	            idx += 1;
	        }
	        return output;
	    };

	    var _of = function _of(x) {
	        return [x];
	    };

	    var _pipe = function _pipe(f, g) {
	        return function () {
	            return g.call(this, f.apply(this, arguments));
	        };
	    };

	    var _pipeP = function _pipeP(f, g) {
	        return function () {
	            var ctx = this;
	            return f.apply(ctx, arguments).then(function (x) {
	                return g.call(ctx, x);
	            });
	        };
	    };

	    // \b matches word boundary; [\b] matches backspace
	    var _quote = function _quote(s) {
	        var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b')    // \b matches word boundary; [\b] matches backspace
	    .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
	        return '"' + escaped.replace(/"/g, '\\"') + '"';
	    };

	    var _reduced = function _reduced(x) {
	        return x && x['@@transducer/reduced'] ? x : {
	            '@@transducer/value': x,
	            '@@transducer/reduced': true
	        };
	    };

	    /**
	     * An optimized, private array `slice` implementation.
	     *
	     * @private
	     * @param {Arguments|Array} args The array or arguments object to consider.
	     * @param {Number} [from=0] The array index to slice from, inclusive.
	     * @param {Number} [to=args.length] The array index to slice to, exclusive.
	     * @return {Array} A new, sliced array.
	     * @example
	     *
	     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]
	     *
	     *      var firstThreeArgs = function(a, b, c, d) {
	     *        return _slice(arguments, 0, 3);
	     *      };
	     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]
	     */
	    var _slice = function _slice(args, from, to) {
	        switch (arguments.length) {
	        case 1:
	            return _slice(args, 0, args.length);
	        case 2:
	            return _slice(args, from, args.length);
	        default:
	            var list = [];
	            var idx = 0;
	            var len = Math.max(0, Math.min(args.length, to) - from);
	            while (idx < len) {
	                list[idx] = args[from + idx];
	                idx += 1;
	            }
	            return list;
	        }
	    };

	    /**
	     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
	     */
	    var _toISOString = function () {
	        var pad = function pad(n) {
	            return (n < 10 ? '0' : '') + n;
	        };
	        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
	            return d.toISOString();
	        } : function _toISOString(d) {
	            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
	        };
	    }();

	    var _xfBase = {
	        init: function () {
	            return this.xf['@@transducer/init']();
	        },
	        result: function (result) {
	            return this.xf['@@transducer/result'](result);
	        }
	    };

	    var _xwrap = function () {
	        function XWrap(fn) {
	            this.f = fn;
	        }
	        XWrap.prototype['@@transducer/init'] = function () {
	            throw new Error('init not implemented on XWrap');
	        };
	        XWrap.prototype['@@transducer/result'] = function (acc) {
	            return acc;
	        };
	        XWrap.prototype['@@transducer/step'] = function (acc, x) {
	            return this.f(acc, x);
	        };
	        return function _xwrap(fn) {
	            return new XWrap(fn);
	        };
	    }();

	    var _aperture = function _aperture(n, list) {
	        var idx = 0;
	        var limit = list.length - (n - 1);
	        var acc = new Array(limit >= 0 ? limit : 0);
	        while (idx < limit) {
	            acc[idx] = _slice(list, idx, idx + n);
	            idx += 1;
	        }
	        return acc;
	    };

	    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;

	    /**
	     * Similar to hasMethod, this checks whether a function has a [methodname]
	     * function. If it isn't an array it will execute that function otherwise it
	     * will default to the ramda implementation.
	     *
	     * @private
	     * @param {Function} fn ramda implemtation
	     * @param {String} methodname property to check for a custom implementation
	     * @return {Object} Whatever the return value of the method is.
	     */
	    var _checkForMethod = function _checkForMethod(methodname, fn) {
	        return function () {
	            var length = arguments.length;
	            if (length === 0) {
	                return fn();
	            }
	            var obj = arguments[length - 1];
	            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));
	        };
	    };

	    /**
	     * Optimized internal one-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry1 = function _curry1(fn) {
	        return function f1(a) {
	            if (arguments.length === 0 || _isPlaceholder(a)) {
	                return f1;
	            } else {
	                return fn.apply(this, arguments);
	            }
	        };
	    };

	    /**
	     * Optimized internal two-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry2 = function _curry2(fn) {
	        return function f2(a, b) {
	            switch (arguments.length) {
	            case 0:
	                return f2;
	            case 1:
	                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
	                    return fn(a, _b);
	                });
	            default:
	                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
	                    return fn(_a, b);
	                }) : _isPlaceholder(b) ? _curry1(function (_b) {
	                    return fn(a, _b);
	                }) : fn(a, b);
	            }
	        };
	    };

	    /**
	     * Optimized internal three-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry3 = function _curry3(fn) {
	        return function f3(a, b, c) {
	            switch (arguments.length) {
	            case 0:
	                return f3;
	            case 1:
	                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                });
	            case 2:
	                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
	                    return fn(_a, b, _c);
	                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                }) : _curry1(function (_c) {
	                    return fn(a, b, _c);
	                });
	            default:
	                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
	                    return fn(_a, _b, c);
	                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
	                    return fn(_a, b, _c);
	                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                }) : _isPlaceholder(a) ? _curry1(function (_a) {
	                    return fn(_a, b, c);
	                }) : _isPlaceholder(b) ? _curry1(function (_b) {
	                    return fn(a, _b, c);
	                }) : _isPlaceholder(c) ? _curry1(function (_c) {
	                    return fn(a, b, _c);
	                }) : fn(a, b, c);
	            }
	        };
	    };

	    /**
	     * Internal curryN function.
	     *
	     * @private
	     * @category Function
	     * @param {Number} length The arity of the curried function.
	     * @param {Array} received An array of arguments received thus far.
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curryN = function _curryN(length, received, fn) {
	        return function () {
	            var combined = [];
	            var argsIdx = 0;
	            var left = length;
	            var combinedIdx = 0;
	            while (combinedIdx < received.length || argsIdx < arguments.length) {
	                var result;
	                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
	                    result = received[combinedIdx];
	                } else {
	                    result = arguments[argsIdx];
	                    argsIdx += 1;
	                }
	                combined[combinedIdx] = result;
	                if (!_isPlaceholder(result)) {
	                    left -= 1;
	                }
	                combinedIdx += 1;
	            }
	            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
	        };
	    };

	    /**
	     * Returns a function that dispatches with different strategies based on the
	     * object in list position (last argument). If it is an array, executes [fn].
	     * Otherwise, if it has a function with [methodname], it will execute that
	     * function (functor case). Otherwise, if it is a transformer, uses transducer
	     * [xf] to return a new transformer (transducer case). Otherwise, it will
	     * default to executing [fn].
	     *
	     * @private
	     * @param {String} methodname property to check for a custom implementation
	     * @param {Function} xf transducer to initialize if object is transformer
	     * @param {Function} fn default ramda implementation
	     * @return {Function} A function that dispatches on object in list position
	     */
	    var _dispatchable = function _dispatchable(methodname, xf, fn) {
	        return function () {
	            var length = arguments.length;
	            if (length === 0) {
	                return fn();
	            }
	            var obj = arguments[length - 1];
	            if (!_isArray(obj)) {
	                var args = _slice(arguments, 0, length - 1);
	                if (typeof obj[methodname] === 'function') {
	                    return obj[methodname].apply(obj, args);
	                }
	                if (_isTransformer(obj)) {
	                    var transducer = xf.apply(null, args);
	                    return transducer(obj);
	                }
	            }
	            return fn.apply(this, arguments);
	        };
	    };

	    var _dropLastWhile = function dropLastWhile(pred, list) {
	        var idx = list.length - 1;
	        while (idx >= 0 && pred(list[idx])) {
	            idx -= 1;
	        }
	        return _slice(list, 0, idx + 1);
	    };

	    var _xall = function () {
	        function XAll(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.all = true;
	        }
	        XAll.prototype['@@transducer/init'] = _xfBase.init;
	        XAll.prototype['@@transducer/result'] = function (result) {
	            if (this.all) {
	                result = this.xf['@@transducer/step'](result, true);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XAll.prototype['@@transducer/step'] = function (result, input) {
	            if (!this.f(input)) {
	                this.all = false;
	                result = _reduced(this.xf['@@transducer/step'](result, false));
	            }
	            return result;
	        };
	        return _curry2(function _xall(f, xf) {
	            return new XAll(f, xf);
	        });
	    }();

	    var _xany = function () {
	        function XAny(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.any = false;
	        }
	        XAny.prototype['@@transducer/init'] = _xfBase.init;
	        XAny.prototype['@@transducer/result'] = function (result) {
	            if (!this.any) {
	                result = this.xf['@@transducer/step'](result, false);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XAny.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.any = true;
	                result = _reduced(this.xf['@@transducer/step'](result, true));
	            }
	            return result;
	        };
	        return _curry2(function _xany(f, xf) {
	            return new XAny(f, xf);
	        });
	    }();

	    var _xaperture = function () {
	        function XAperture(n, xf) {
	            this.xf = xf;
	            this.pos = 0;
	            this.full = false;
	            this.acc = new Array(n);
	        }
	        XAperture.prototype['@@transducer/init'] = _xfBase.init;
	        XAperture.prototype['@@transducer/result'] = function (result) {
	            this.acc = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XAperture.prototype['@@transducer/step'] = function (result, input) {
	            this.store(input);
	            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
	        };
	        XAperture.prototype.store = function (input) {
	            this.acc[this.pos] = input;
	            this.pos += 1;
	            if (this.pos === this.acc.length) {
	                this.pos = 0;
	                this.full = true;
	            }
	        };
	        XAperture.prototype.getCopy = function () {
	            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));
	        };
	        return _curry2(function _xaperture(n, xf) {
	            return new XAperture(n, xf);
	        });
	    }();

	    var _xdrop = function () {
	        function XDrop(n, xf) {
	            this.xf = xf;
	            this.n = n;
	        }
	        XDrop.prototype['@@transducer/init'] = _xfBase.init;
	        XDrop.prototype['@@transducer/result'] = _xfBase.result;
	        XDrop.prototype['@@transducer/step'] = function (result, input) {
	            if (this.n > 0) {
	                this.n -= 1;
	                return result;
	            }
	            return this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdrop(n, xf) {
	            return new XDrop(n, xf);
	        });
	    }();

	    var _xdropLast = function () {
	        function XDropLast(n, xf) {
	            this.xf = xf;
	            this.pos = 0;
	            this.full = false;
	            this.acc = new Array(n);
	        }
	        XDropLast.prototype['@@transducer/init'] = _xfBase.init;
	        XDropLast.prototype['@@transducer/result'] = function (result) {
	            this.acc = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropLast.prototype['@@transducer/step'] = function (result, input) {
	            if (this.full) {
	                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
	            }
	            this.store(input);
	            return result;
	        };
	        XDropLast.prototype.store = function (input) {
	            this.acc[this.pos] = input;
	            this.pos += 1;
	            if (this.pos === this.acc.length) {
	                this.pos = 0;
	                this.full = true;
	            }
	        };
	        return _curry2(function _xdropLast(n, xf) {
	            return new XDropLast(n, xf);
	        });
	    }();

	    var _xdropRepeatsWith = function () {
	        function XDropRepeatsWith(pred, xf) {
	            this.xf = xf;
	            this.pred = pred;
	            this.lastValue = undefined;
	            this.seenFirstValue = false;
	        }
	        XDropRepeatsWith.prototype['@@transducer/init'] = function () {
	            return this.xf['@@transducer/init']();
	        };
	        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
	            var sameAsLast = false;
	            if (!this.seenFirstValue) {
	                this.seenFirstValue = true;
	            } else if (this.pred(this.lastValue, input)) {
	                sameAsLast = true;
	            }
	            this.lastValue = input;
	            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdropRepeatsWith(pred, xf) {
	            return new XDropRepeatsWith(pred, xf);
	        });
	    }();

	    var _xdropWhile = function () {
	        function XDropWhile(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;
	        XDropWhile.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f) {
	                if (this.f(input)) {
	                    return result;
	                }
	                this.f = null;
	            }
	            return this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdropWhile(f, xf) {
	            return new XDropWhile(f, xf);
	        });
	    }();

	    var _xfilter = function () {
	        function XFilter(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XFilter.prototype['@@transducer/init'] = _xfBase.init;
	        XFilter.prototype['@@transducer/result'] = _xfBase.result;
	        XFilter.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
	        };
	        return _curry2(function _xfilter(f, xf) {
	            return new XFilter(f, xf);
	        });
	    }();

	    var _xfind = function () {
	        function XFind(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.found = false;
	        }
	        XFind.prototype['@@transducer/init'] = _xfBase.init;
	        XFind.prototype['@@transducer/result'] = function (result) {
	            if (!this.found) {
	                result = this.xf['@@transducer/step'](result, void 0);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XFind.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.found = true;
	                result = _reduced(this.xf['@@transducer/step'](result, input));
	            }
	            return result;
	        };
	        return _curry2(function _xfind(f, xf) {
	            return new XFind(f, xf);
	        });
	    }();

	    var _xfindIndex = function () {
	        function XFindIndex(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.idx = -1;
	            this.found = false;
	        }
	        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
	        XFindIndex.prototype['@@transducer/result'] = function (result) {
	            if (!this.found) {
	                result = this.xf['@@transducer/step'](result, -1);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XFindIndex.prototype['@@transducer/step'] = function (result, input) {
	            this.idx += 1;
	            if (this.f(input)) {
	                this.found = true;
	                result = _reduced(this.xf['@@transducer/step'](result, this.idx));
	            }
	            return result;
	        };
	        return _curry2(function _xfindIndex(f, xf) {
	            return new XFindIndex(f, xf);
	        });
	    }();

	    var _xfindLast = function () {
	        function XFindLast(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XFindLast.prototype['@@transducer/init'] = _xfBase.init;
	        XFindLast.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
	        };
	        XFindLast.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.last = input;
	            }
	            return result;
	        };
	        return _curry2(function _xfindLast(f, xf) {
	            return new XFindLast(f, xf);
	        });
	    }();

	    var _xfindLastIndex = function () {
	        function XFindLastIndex(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.idx = -1;
	            this.lastIdx = -1;
	        }
	        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;
	        XFindLastIndex.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
	        };
	        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
	            this.idx += 1;
	            if (this.f(input)) {
	                this.lastIdx = this.idx;
	            }
	            return result;
	        };
	        return _curry2(function _xfindLastIndex(f, xf) {
	            return new XFindLastIndex(f, xf);
	        });
	    }();

	    var _xmap = function () {
	        function XMap(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XMap.prototype['@@transducer/init'] = _xfBase.init;
	        XMap.prototype['@@transducer/result'] = _xfBase.result;
	        XMap.prototype['@@transducer/step'] = function (result, input) {
	            return this.xf['@@transducer/step'](result, this.f(input));
	        };
	        return _curry2(function _xmap(f, xf) {
	            return new XMap(f, xf);
	        });
	    }();

	    var _xreduceBy = function () {
	        function XReduceBy(valueFn, valueAcc, keyFn, xf) {
	            this.valueFn = valueFn;
	            this.valueAcc = valueAcc;
	            this.keyFn = keyFn;
	            this.xf = xf;
	            this.inputs = {};
	        }
	        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
	        XReduceBy.prototype['@@transducer/result'] = function (result) {
	            var key;
	            for (key in this.inputs) {
	                if (_has(key, this.inputs)) {
	                    result = this.xf['@@transducer/step'](result, this.inputs[key]);
	                    if (result['@@transducer/reduced']) {
	                        result = result['@@transducer/value'];
	                        break;
	                    }
	                }
	            }
	            this.inputs = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XReduceBy.prototype['@@transducer/step'] = function (result, input) {
	            var key = this.keyFn(input);
	            this.inputs[key] = this.inputs[key] || [
	                key,
	                this.valueAcc
	            ];
	            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
	            return result;
	        };
	        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
	            return new XReduceBy(valueFn, valueAcc, keyFn, xf);
	        });
	    }();

	    var _xtake = function () {
	        function XTake(n, xf) {
	            this.xf = xf;
	            this.n = n;
	            this.i = 0;
	        }
	        XTake.prototype['@@transducer/init'] = _xfBase.init;
	        XTake.prototype['@@transducer/result'] = _xfBase.result;
	        XTake.prototype['@@transducer/step'] = function (result, input) {
	            this.i += 1;
	            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
	            return this.i >= this.n ? _reduced(ret) : ret;
	        };
	        return _curry2(function _xtake(n, xf) {
	            return new XTake(n, xf);
	        });
	    }();

	    var _xtakeWhile = function () {
	        function XTakeWhile(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;
	        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
	        };
	        return _curry2(function _xtakeWhile(f, xf) {
	            return new XTakeWhile(f, xf);
	        });
	    }();

	    /**
	     * Adds two values.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Number}
	     * @see R.subtract
	     * @example
	     *
	     *      R.add(2, 3);       //=>  5
	     *      R.add(7)(10);      //=> 17
	     */
	    var add = _curry2(function add(a, b) {
	        return Number(a) + Number(b);
	    });

	    /**
	     * Applies a function to the value at the given index of an array, returning a
	     * new copy of the array with the element at the given index replaced with the
	     * result of the function application.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig (a -> a) -> Number -> [a] -> [a]
	     * @param {Function} fn The function to apply.
	     * @param {Number} idx The index.
	     * @param {Array|Arguments} list An array-like object whose value
	     *        at the supplied index will be replaced.
	     * @return {Array} A copy of the supplied array-like object with
	     *         the element at index `idx` replaced with the value
	     *         returned by applying `fn` to the existing element.
	     * @see R.update
	     * @example
	     *
	     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]
	     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]
	     */
	    var adjust = _curry3(function adjust(fn, idx, list) {
	        if (idx >= list.length || idx < -list.length) {
	            return list;
	        }
	        var start = idx < 0 ? list.length : 0;
	        var _idx = start + idx;
	        var _list = _concat(list);
	        _list[_idx] = fn(list[_idx]);
	        return _list;
	    });

	    /**
	     * Returns `true` if all elements of the list match the predicate, `false` if
	     * there are any that don't.
	     *
	     * Dispatches to the `all` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
	     *         otherwise.
	     * @see R.any, R.none, R.transduce
	     * @example
	     *
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      var lessThan3 = R.flip(R.lt)(3);
	     *      R.all(lessThan2)([1, 2]); //=> false
	     *      R.all(lessThan3)([1, 2]); //=> true
	     */
	    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {
	        var idx = 0;
	        while (idx < list.length) {
	            if (!fn(list[idx])) {
	                return false;
	            }
	            idx += 1;
	        }
	        return true;
	    }));

	    /**
	     * Returns a function that always returns the given value. Note that for
	     * non-primitives the value returned is a reference to the original value.
	     *
	     * This function is known as `const`, `constant`, or `K` (for K combinator) in
	     * other languages and libraries.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig a -> (* -> a)
	     * @param {*} val The value to wrap in a function
	     * @return {Function} A Function :: * -> val.
	     * @example
	     *
	     *      var t = R.always('Tee');
	     *      t(); //=> 'Tee'
	     */
	    var always = _curry1(function always(val) {
	        return function () {
	            return val;
	        };
	    });

	    /**
	     * Returns `true` if both arguments are `true`; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> * -> *
	     * @param {Boolean} a A boolean value
	     * @param {Boolean} b A boolean value
	     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise
	     * @see R.both
	     * @example
	     *
	     *      R.and(true, true); //=> true
	     *      R.and(true, false); //=> false
	     *      R.and(false, true); //=> false
	     *      R.and(false, false); //=> false
	     */
	    var and = _curry2(function and(a, b) {
	        return a && b;
	    });

	    /**
	     * Returns `true` if at least one of elements of the list match the predicate,
	     * `false` otherwise.
	     *
	     * Dispatches to the `any` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
	     *         otherwise.
	     * @see R.all, R.none, R.transduce
	     * @example
	     *
	     *      var lessThan0 = R.flip(R.lt)(0);
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      R.any(lessThan0)([1, 2]); //=> false
	     *      R.any(lessThan2)([1, 2]); //=> true
	     */
	    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {
	        var idx = 0;
	        while (idx < list.length) {
	            if (fn(list[idx])) {
	                return true;
	            }
	            idx += 1;
	        }
	        return false;
	    }));

	    /**
	     * Returns a new list, composed of n-tuples of consecutive elements If `n` is
	     * greater than the length of the list, an empty list is returned.
	     *
	     * Dispatches to the `aperture` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig Number -> [a] -> [[a]]
	     * @param {Number} n The size of the tuples to create
	     * @param {Array} list The list to split into `n`-tuples
	     * @return {Array} The new list.
	     * @see R.transduce
	     * @example
	     *
	     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
	     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
	     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
	     */
	    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));

	    /**
	     * Returns a new list containing the contents of the given list, followed by
	     * the given element.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The element to add to the end of the new list.
	     * @param {Array} list The list whose contents will be added to the beginning of the output
	     *        list.
	     * @return {Array} A new list containing the contents of the old list followed by `el`.
	     * @see R.prepend
	     * @example
	     *
	     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
	     *      R.append('tests', []); //=> ['tests']
	     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
	     */
	    var append = _curry2(function append(el, list) {
	        return _concat(list, [el]);
	    });

	    /**
	     * Applies function `fn` to the argument list `args`. This is useful for
	     * creating a fixed-arity function from a variadic function. `fn` should be a
	     * bound function if context is significant.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig (*... -> a) -> [*] -> a
	     * @param {Function} fn
	     * @param {Array} args
	     * @return {*}
	     * @see R.call, R.unapply
	     * @example
	     *
	     *      var nums = [1, 2, 3, -99, 42, 6, 7];
	     *      R.apply(Math.max, nums); //=> 42
	     */
	    var apply = _curry2(function apply(fn, args) {
	        return fn.apply(this, args);
	    });

	    /**
	     * Makes a shallow clone of an object, setting or overriding the specified
	     * property with the given value. Note that this copies and flattens prototype
	     * properties onto the new object as well. All non-primitive properties are
	     * copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig String -> a -> {k: v} -> {k: v}
	     * @param {String} prop the property name to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except for the specified property.
	     * @see R.dissoc
	     * @example
	     *
	     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
	     */
	    var assoc = _curry3(function assoc(prop, val, obj) {
	        var result = {};
	        for (var p in obj) {
	            result[p] = obj[p];
	        }
	        result[prop] = val;
	        return result;
	    });

	    /**
	     * Makes a shallow clone of an object, setting or overriding the nodes required
	     * to create the given path, and placing the specific value at the tail end of
	     * that path. Note that this copies and flattens prototype properties onto the
	     * new object as well. All non-primitive properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig [String] -> a -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except along the specified path.
	     * @see R.dissocPath
	     * @example
	     *
	     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
	     */
	    var assocPath = _curry3(function assocPath(path, val, obj) {
	        switch (path.length) {
	        case 0:
	            return val;
	        case 1:
	            return assoc(path[0], val, obj);
	        default:
	            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);
	        }
	    });

	    /**
	     * Creates a function that is bound to a context.
	     * Note: `R.bind` does not provide the additional argument-binding capabilities of
	     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Function
	     * @category Object
	     * @sig (* -> *) -> {*} -> (* -> *)
	     * @param {Function} fn The function to bind to context
	     * @param {Object} thisObj The context to bind `fn` to
	     * @return {Function} A function that will execute in the context of `thisObj`.
	     * @see R.partial
	     * @example
	     *
	     *      var log = R.bind(console.log, console);
	     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	     *      // logs {a: 2}
	     */
	    var bind = _curry2(function bind(fn, thisObj) {
	        return _arity(fn.length, function () {
	            return fn.apply(thisObj, arguments);
	        });
	    });

	    /**
	     * Restricts a number to be within a range.
	     *
	     * Also works for other ordered types such as Strings and Dates.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a -> a
	     * @param {Number} minimum number
	     * @param {Number} maximum number
	     * @param {Number} value to be clamped
	     * @return {Number} Returns the clamped value
	     * @example
	     *
	     *      R.clamp(1, 10, -1) // => 1
	     *      R.clamp(1, 10, 11) // => 10
	     *      R.clamp(1, 10, 4)  // => 4
	     */
	    var clamp = _curry3(function clamp(min, max, value) {
	        if (min > max) {
	            throw new Error('min must not be greater than max in clamp(min, max, value)');
	        }
	        return value < min ? min : value > max ? max : value;
	    });

	    /**
	     * Makes a comparator function out of a function that reports whether the first
	     * element is less than the second.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a, b -> Boolean) -> (a, b -> Number)
	     * @param {Function} pred A predicate function of arity two.
	     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.
	     * @example
	     *
	     *      var cmp = R.comparator((a, b) => a.age < b.age);
	     *      var people = [
	     *        // ...
	     *      ];
	     *      R.sort(cmp, people);
	     */
	    var comparator = _curry1(function comparator(pred) {
	        return function (a, b) {
	            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
	        };
	    });

	    /**
	     * Returns a curried equivalent of the provided function, with the specified
	     * arity. The curried function has two unusual capabilities. First, its
	     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	     * following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	     * following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @since v0.5.0
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} length The arity for the returned function.
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curry
	     * @example
	     *
	     *      var sumArgs = (...args) => R.sum(args);
	     *
	     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curryN = _curry2(function curryN(length, fn) {
	        if (length === 1) {
	            return _curry1(fn);
	        }
	        return _arity(length, _curryN(length, [], fn));
	    });

	    /**
	     * Decrements its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @see R.inc
	     * @example
	     *
	     *      R.dec(42); //=> 41
	     */
	    var dec = add(-1);

	    /**
	     * Returns the second argument if it is not `null`, `undefined` or `NaN`
	     * otherwise the first argument is returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Logic
	     * @sig a -> b -> a | b
	     * @param {a} val The default value.
	     * @param {b} val The value to return if it is not null or undefined
	     * @return {*} The the second value or the default value
	     * @example
	     *
	     *      var defaultTo42 = R.defaultTo(42);
	     *
	     *      defaultTo42(null);  //=> 42
	     *      defaultTo42(undefined);  //=> 42
	     *      defaultTo42('Ramda');  //=> 'Ramda'
	     *      defaultTo42(parseInt('string')); //=> 42
	     */
	    var defaultTo = _curry2(function defaultTo(d, v) {
	        return v == null || v !== v ? d : v;
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not
	     * contained in the second list. Duplication is determined according to the
	     * value returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
	     * @example
	     *
	     *      var cmp = (x, y) => x.a === y.a;
	     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
	     *      var l2 = [{a: 3}, {a: 4}];
	     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
	     */
	    var differenceWith = _curry3(function differenceWith(pred, first, second) {
	        var out = [];
	        var idx = 0;
	        var firstLen = first.length;
	        while (idx < firstLen) {
	            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {
	                out.push(first[idx]);
	            }
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new object that does not contain a `prop` property.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Object
	     * @sig String -> {k: v} -> {k: v}
	     * @param {String} prop the name of the property to dissociate
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original but without the specified property
	     * @see R.assoc
	     * @example
	     *
	     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
	     */
	    var dissoc = _curry2(function dissoc(prop, obj) {
	        var result = {};
	        for (var p in obj) {
	            if (p !== prop) {
	                result[p] = obj[p];
	            }
	        }
	        return result;
	    });

	    /**
	     * Makes a shallow clone of an object, omitting the property at the given path.
	     * Note that this copies and flattens prototype properties onto the new object
	     * as well. All non-primitive properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.11.0
	     * @category Object
	     * @sig [String] -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object without the property at path
	     * @see R.assocPath
	     * @example
	     *
	     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
	     */
	    var dissocPath = _curry2(function dissocPath(path, obj) {
	        switch (path.length) {
	        case 0:
	            return obj;
	        case 1:
	            return dissoc(path[0], obj);
	        default:
	            var head = path[0];
	            var tail = _slice(path, 1);
	            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);
	        }
	    });

	    /**
	     * Divides two numbers. Equivalent to `a / b`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a / b`.
	     * @see R.multiply
	     * @example
	     *
	     *      R.divide(71, 100); //=> 0.71
	     *
	     *      var half = R.divide(R.__, 2);
	     *      half(42); //=> 21
	     *
	     *      var reciprocal = R.divide(1);
	     *      reciprocal(4);   //=> 0.25
	     */
	    var divide = _curry2(function divide(a, b) {
	        return a / b;
	    });

	    /**
	     * Returns a new list excluding the leading elements of a given list which
	     * satisfy the supplied predicate function. It passes each value to the supplied
	     * predicate function, skipping elements while the predicate function returns
	     * `true`. The predicate function is applied to one argument: *(value)*.
	     *
	     * Dispatches to the `dropWhile` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.takeWhile, R.transduce, R.addIndex
	     * @example
	     *
	     *      var lteTwo = x => x <= 2;
	     *
	     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
	     */
	    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len && pred(list[idx])) {
	            idx += 1;
	        }
	        return _slice(list, idx);
	    }));

	    /**
	     * Returns the empty value of its argument's type. Ramda defines the empty
	     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
	     * types are supported if they define `<Type>.empty` and/or
	     * `<Type>.prototype.empty`.
	     *
	     * Dispatches to the `empty` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig a -> a
	     * @param {*} x
	     * @return {*}
	     * @example
	     *
	     *      R.empty(Just(42));      //=> Nothing()
	     *      R.empty([1, 2, 3]);     //=> []
	     *      R.empty('unicorns');    //=> ''
	     *      R.empty({x: 1, y: 2});  //=> {}
	     */
	    // else
	    var empty = _curry1(function empty(x) {
	        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
	            return arguments;
	        }() : // else
	        void 0;
	    });

	    /**
	     * Creates a new object by recursively evolving a shallow copy of `object`,
	     * according to the `transformation` functions. All non-primitive properties
	     * are copied by reference.
	     *
	     * A `transformation` function will not be invoked if its corresponding key
	     * does not exist in the evolved object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {k: (v -> v)} -> {k: v} -> {k: v}
	     * @param {Object} transformations The object specifying transformation functions to apply
	     *        to the object.
	     * @param {Object} object The object to be transformed.
	     * @return {Object} The transformed object.
	     * @example
	     *
	     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
	     *      var transformations = {
	     *        firstName: R.trim,
	     *        lastName: R.trim, // Will not get invoked.
	     *        data: {elapsed: R.add(1), remaining: R.add(-1)}
	     *      };
	     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
	     */
	    var evolve = _curry2(function evolve(transformations, object) {
	        var result = {};
	        var transformation, key, type;
	        for (key in object) {
	            transformation = transformations[key];
	            type = typeof transformation;
	            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];
	        }
	        return result;
	    });

	    /**
	     * Returns the first element of the list which matches the predicate, or
	     * `undefined` if no element matches.
	     *
	     * Dispatches to the `find` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     *        desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
	     *      R.find(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	            idx += 1;
	        }
	    }));

	    /**
	     * Returns the index of the first element of the list which matches the
	     * predicate, or `-1` if no element matches.
	     *
	     * Dispatches to the `findIndex` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
	     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	            idx += 1;
	        }
	        return -1;
	    }));

	    /**
	     * Returns the last element of the list which matches the predicate, or
	     * `undefined` if no element matches.
	     *
	     * Dispatches to the `findLast` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
	     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	            idx -= 1;
	        }
	    }));

	    /**
	     * Returns the index of the last element of the list which matches the
	     * predicate, or `-1` if no element matches.
	     *
	     * Dispatches to the `findLastIndex` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
	     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	            idx -= 1;
	        }
	        return -1;
	    }));

	    /**
	     * Iterate over an input `list`, calling a provided function `fn` for each
	     * element in the list.
	     *
	     * `fn` receives one argument: *(value)*.
	     *
	     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.forEach` method. For more
	     * details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
	     *
	     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
	     * the original array. In some libraries this function is named `each`.
	     *
	     * Dispatches to the `forEach` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> *) -> [a] -> [a]
	     * @param {Function} fn The function to invoke. Receives one argument, `value`.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} The original list.
	     * @see R.addIndex
	     * @example
	     *
	     *      var printXPlusFive = x => console.log(x + 5);
	     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
	     *      // logs 6
	     *      // logs 7
	     *      // logs 8
	     */
	    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {
	        var len = list.length;
	        var idx = 0;
	        while (idx < len) {
	            fn(list[idx]);
	            idx += 1;
	        }
	        return list;
	    }));

	    /**
	     * Creates a new object from a list key-value pairs. If a key appears in
	     * multiple pairs, the rightmost pair is included in the object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [[k,v]] -> {k: v}
	     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
	     * @return {Object} The object made by pairing up `keys` and `values`.
	     * @see R.toPairs, R.pair
	     * @example
	     *
	     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
	     */
	    var fromPairs = _curry1(function fromPairs(pairs) {
	        var result = {};
	        var idx = 0;
	        while (idx < pairs.length) {
	            result[pairs[idx][0]] = pairs[idx][1];
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Takes a list and returns a list of lists where each sublist's elements are
	     * all "equal" according to the provided equality function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.21.0
	     * @category List
	     * @sig ((a, a) → Boolean) → [a] → [[a]]
	     * @param {Function} fn Function for determining whether two given (adjacent)
	     *        elements should be in the same group
	     * @param {Array} list The array to group. Also accepts a string, which will be
	     *        treated as a list of characters.
	     * @return {List} A list that contains sublists of equal elements,
	     *         whose concatenations are equal to the original list.
	     * @example
	     *
	     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
	     *
	     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
	     *
	     * R.groupWith(R.eqBy(isVowel), 'aestiou')
	     * //=> ['ae', 'st', 'iou']
	     */
	    var groupWith = _curry2(function (fn, list) {
	        var res = [];
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            var nextidx = idx + 1;
	            while (nextidx < len && fn(list[idx], list[nextidx])) {
	                nextidx += 1;
	            }
	            res.push(list.slice(idx, nextidx));
	            idx = nextidx;
	        }
	        return res;
	    });

	    /**
	     * Returns `true` if the first argument is greater than the second; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @see R.lt
	     * @example
	     *
	     *      R.gt(2, 1); //=> true
	     *      R.gt(2, 2); //=> false
	     *      R.gt(2, 3); //=> false
	     *      R.gt('a', 'z'); //=> false
	     *      R.gt('z', 'a'); //=> true
	     */
	    var gt = _curry2(function gt(a, b) {
	        return a > b;
	    });

	    /**
	     * Returns `true` if the first argument is greater than or equal to the second;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean}
	     * @see R.lte
	     * @example
	     *
	     *      R.gte(2, 1); //=> true
	     *      R.gte(2, 2); //=> true
	     *      R.gte(2, 3); //=> false
	     *      R.gte('a', 'z'); //=> false
	     *      R.gte('z', 'a'); //=> true
	     */
	    var gte = _curry2(function gte(a, b) {
	        return a >= b;
	    });

	    /**
	     * Returns whether or not an object has an own property with the specified name
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      var hasName = R.has('name');
	     *      hasName({name: 'alice'});   //=> true
	     *      hasName({name: 'bob'});     //=> true
	     *      hasName({});                //=> false
	     *
	     *      var point = {x: 0, y: 0};
	     *      var pointHas = R.has(R.__, point);
	     *      pointHas('x');  //=> true
	     *      pointHas('y');  //=> true
	     *      pointHas('z');  //=> false
	     */
	    var has = _curry2(_has);

	    /**
	     * Returns whether or not an object or its prototype chain has a property with
	     * the specified name
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      function Rectangle(width, height) {
	     *        this.width = width;
	     *        this.height = height;
	     *      }
	     *      Rectangle.prototype.area = function() {
	     *        return this.width * this.height;
	     *      };
	     *
	     *      var square = new Rectangle(2, 2);
	     *      R.hasIn('width', square);  //=> true
	     *      R.hasIn('area', square);  //=> true
	     */
	    var hasIn = _curry2(function hasIn(prop, obj) {
	        return prop in obj;
	    });

	    /**
	     * Returns true if its arguments are identical, false otherwise. Values are
	     * identical if they reference the same memory. `NaN` is identical to `NaN`;
	     * `0` and `-0` are not identical.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Relation
	     * @sig a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      var o = {};
	     *      R.identical(o, o); //=> true
	     *      R.identical(1, 1); //=> true
	     *      R.identical(1, '1'); //=> false
	     *      R.identical([], []); //=> false
	     *      R.identical(0, -0); //=> false
	     *      R.identical(NaN, NaN); //=> true
	     */
	    // SameValue algorithm
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Step 6.a: NaN == NaN
	    var identical = _curry2(function identical(a, b) {
	        // SameValue algorithm
	        if (a === b) {
	            // Steps 1-5, 7-10
	            // Steps 6.b-6.e: +0 != -0
	            return a !== 0 || 1 / a === 1 / b;
	        } else {
	            // Step 6.a: NaN == NaN
	            return a !== a && b !== b;
	        }
	    });

	    /**
	     * A function that does nothing but return the parameter supplied to it. Good
	     * as a default or placeholder function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig a -> a
	     * @param {*} x The value to return.
	     * @return {*} The input value, `x`.
	     * @example
	     *
	     *      R.identity(1); //=> 1
	     *
	     *      var obj = {};
	     *      R.identity(obj) === obj; //=> true
	     */
	    var identity = _curry1(_identity);

	    /**
	     * Creates a function that will process either the `onTrue` or the `onFalse`
	     * function depending upon the result of the `condition` predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
	     * @param {Function} condition A predicate function
	     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
	     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
	     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
	     *                    function depending upon the result of the `condition` predicate.
	     * @see R.unless, R.when
	     * @example
	     *
	     *      var incCount = R.ifElse(
	     *        R.has('count'),
	     *        R.over(R.lensProp('count'), R.inc),
	     *        R.assoc('count', 1)
	     *      );
	     *      incCount({});           //=> { count: 1 }
	     *      incCount({ count: 1 }); //=> { count: 2 }
	     */
	    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {
	        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
	            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
	        });
	    });

	    /**
	     * Increments its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @see R.dec
	     * @example
	     *
	     *      R.inc(42); //=> 43
	     */
	    var inc = add(1);

	    /**
	     * Inserts the supplied element into the list, at index `index`. _Note that
	     * this is not destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.2
	     * @category List
	     * @sig Number -> a -> [a] -> [a]
	     * @param {Number} index The position to insert the element
	     * @param {*} elt The element to insert into the Array
	     * @param {Array} list The list to insert into
	     * @return {Array} A new Array with `elt` inserted at `index`.
	     * @example
	     *
	     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
	     */
	    var insert = _curry3(function insert(idx, elt, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        var result = _slice(list);
	        result.splice(idx, 0, elt);
	        return result;
	    });

	    /**
	     * Inserts the sub-list into the list, at index `index`. _Note that this is not
	     * destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig Number -> [a] -> [a] -> [a]
	     * @param {Number} index The position to insert the sub-list
	     * @param {Array} elts The sub-list to insert into the Array
	     * @param {Array} list The list to insert the sub-list into
	     * @return {Array} A new Array with `elts` inserted starting at `index`.
	     * @example
	     *
	     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
	     */
	    var insertAll = _curry3(function insertAll(idx, elts, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));
	    });

	    /**
	     * Creates a new list with the separator interposed between elements.
	     *
	     * Dispatches to the `intersperse` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} separator The element to add to the list.
	     * @param {Array} list The list to be interposed.
	     * @return {Array} The new list.
	     * @example
	     *
	     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
	     */
	    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {
	        var out = [];
	        var idx = 0;
	        var length = list.length;
	        while (idx < length) {
	            if (idx === length - 1) {
	                out.push(list[idx]);
	            } else {
	                out.push(list[idx], separator);
	            }
	            idx += 1;
	        }
	        return out;
	    }));

	    /**
	     * See if an object (`val`) is an instance of the supplied constructor. This
	     * function will check up the inheritance chain, if any.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Type
	     * @sig (* -> {*}) -> a -> Boolean
	     * @param {Object} ctor A constructor
	     * @param {*} val The value to test
	     * @return {Boolean}
	     * @example
	     *
	     *      R.is(Object, {}); //=> true
	     *      R.is(Number, 1); //=> true
	     *      R.is(Object, 1); //=> false
	     *      R.is(String, 's'); //=> true
	     *      R.is(String, new String('')); //=> true
	     *      R.is(Object, new String('')); //=> true
	     *      R.is(Object, 's'); //=> false
	     *      R.is(Number, {}); //=> false
	     */
	    var is = _curry2(function is(Ctor, val) {
	        return val != null && val.constructor === Ctor || val instanceof Ctor;
	    });

	    /**
	     * Tests whether or not an object is similar to an array.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.5.0
	     * @category Type
	     * @category List
	     * @sig * -> Boolean
	     * @param {*} x The object to test.
	     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	     * @example
	     *
	     *      R.isArrayLike([]); //=> true
	     *      R.isArrayLike(true); //=> false
	     *      R.isArrayLike({}); //=> false
	     *      R.isArrayLike({length: 10}); //=> false
	     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	     */
	    var isArrayLike = _curry1(function isArrayLike(x) {
	        if (_isArray(x)) {
	            return true;
	        }
	        if (!x) {
	            return false;
	        }
	        if (typeof x !== 'object') {
	            return false;
	        }
	        if (_isString(x)) {
	            return false;
	        }
	        if (x.nodeType === 1) {
	            return !!x.length;
	        }
	        if (x.length === 0) {
	            return true;
	        }
	        if (x.length > 0) {
	            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	        }
	        return false;
	    });

	    /**
	     * Checks if the input value is `null` or `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Type
	     * @sig * -> Boolean
	     * @param {*} x The value to test.
	     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
	     * @example
	     *
	     *      R.isNil(null); //=> true
	     *      R.isNil(undefined); //=> true
	     *      R.isNil(0); //=> false
	     *      R.isNil([]); //=> false
	     */
	    var isNil = _curry1(function isNil(x) {
	        return x == null;
	    });

	    /**
	     * Returns a list containing the names of all the enumerable own properties of
	     * the supplied object.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own properties.
	     * @example
	     *
	     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	     */
	    // cover IE < 9 keys issues
	    // Safari bug
	    var keys = function () {
	        // cover IE < 9 keys issues
	        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
	        var nonEnumerableProps = [
	            'constructor',
	            'valueOf',
	            'isPrototypeOf',
	            'toString',
	            'propertyIsEnumerable',
	            'hasOwnProperty',
	            'toLocaleString'
	        ];
	        // Safari bug
	        var hasArgsEnumBug = function () {
	            'use strict';
	            return arguments.propertyIsEnumerable('length');
	        }();
	        var contains = function contains(list, item) {
	            var idx = 0;
	            while (idx < list.length) {
	                if (list[idx] === item) {
	                    return true;
	                }
	                idx += 1;
	            }
	            return false;
	        };
	        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {
	            return Object(obj) !== obj ? [] : Object.keys(obj);
	        }) : _curry1(function keys(obj) {
	            if (Object(obj) !== obj) {
	                return [];
	            }
	            var prop, nIdx;
	            var ks = [];
	            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
	            for (prop in obj) {
	                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	                    ks[ks.length] = prop;
	                }
	            }
	            if (hasEnumBug) {
	                nIdx = nonEnumerableProps.length - 1;
	                while (nIdx >= 0) {
	                    prop = nonEnumerableProps[nIdx];
	                    if (_has(prop, obj) && !contains(ks, prop)) {
	                        ks[ks.length] = prop;
	                    }
	                    nIdx -= 1;
	                }
	            }
	            return ks;
	        });
	    }();

	    /**
	     * Returns a list containing the names of all the properties of the supplied
	     * object, including prototype properties.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.keysIn(f); //=> ['x', 'y']
	     */
	    var keysIn = _curry1(function keysIn(obj) {
	        var prop;
	        var ks = [];
	        for (prop in obj) {
	            ks[ks.length] = prop;
	        }
	        return ks;
	    });

	    /**
	     * Returns the number of elements in the array by returning `list.length`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [a] -> Number
	     * @param {Array} list The array to inspect.
	     * @return {Number} The length of the array.
	     * @example
	     *
	     *      R.length([]); //=> 0
	     *      R.length([1, 2, 3]); //=> 3
	     */
	    var length = _curry1(function length(list) {
	        return list != null && _isNumber(list.length) ? list.length : NaN;
	    });

	    /**
	     * Returns `true` if the first argument is less than the second; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @see R.gt
	     * @example
	     *
	     *      R.lt(2, 1); //=> false
	     *      R.lt(2, 2); //=> false
	     *      R.lt(2, 3); //=> true
	     *      R.lt('a', 'z'); //=> true
	     *      R.lt('z', 'a'); //=> false
	     */
	    var lt = _curry2(function lt(a, b) {
	        return a < b;
	    });

	    /**
	     * Returns `true` if the first argument is less than or equal to the second;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean}
	     * @see R.gte
	     * @example
	     *
	     *      R.lte(2, 1); //=> false
	     *      R.lte(2, 2); //=> true
	     *      R.lte(2, 3); //=> true
	     *      R.lte('a', 'z'); //=> true
	     *      R.lte('z', 'a'); //=> false
	     */
	    var lte = _curry2(function lte(a, b) {
	        return a <= b;
	    });

	    /**
	     * The mapAccum function behaves like a combination of map and reduce; it
	     * applies a function to each element of a list, passing an accumulating
	     * parameter from left to right, and returning a final value of this
	     * accumulator together with the new list.
	     *
	     * The iterator function receives two arguments, *acc* and *value*, and should
	     * return a tuple *[acc, value]*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var appender = (a, b) => [a + b, a + b];
	     *
	     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
	     */
	    var mapAccum = _curry3(function mapAccum(fn, acc, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        var tuple = [acc];
	        while (idx < len) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	            idx += 1;
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * The mapAccumRight function behaves like a combination of map and reduce; it
	     * applies a function to each element of a list, passing an accumulating
	     * parameter from right to left, and returning a final value of this
	     * accumulator together with the new list.
	     *
	     * Similar to `mapAccum`, except moves through the input list from the right to
	     * the left.
	     *
	     * The iterator function receives two arguments, *acc* and *value*, and should
	     * return a tuple *[acc, value]*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var append = (a, b) => [a + b, a + b];
	     *
	     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]
	     */
	    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {
	        var idx = list.length - 1;
	        var result = [];
	        var tuple = [acc];
	        while (idx >= 0) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	            idx -= 1;
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * Tests a regular expression against a String. Note that this function will
	     * return an empty array when there are no matches. This differs from
	     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
	     * which returns `null` when there are no matches.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category String
	     * @sig RegExp -> String -> [String | Undefined]
	     * @param {RegExp} rx A regular expression.
	     * @param {String} str The string to match against
	     * @return {Array} The list of matches or empty array.
	     * @see R.test
	     * @example
	     *
	     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
	     *      R.match(/a/, 'b'); //=> []
	     *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
	     */
	    var match = _curry2(function match(rx, str) {
	        return str.match(rx) || [];
	    });

	    /**
	     * mathMod behaves like the modulo operator should mathematically, unlike the
	     * `%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,
	     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
	     * when the modulus is zero or negative.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} m The dividend.
	     * @param {Number} p the modulus.
	     * @return {Number} The result of `b mod a`.
	     * @example
	     *
	     *      R.mathMod(-17, 5);  //=> 3
	     *      R.mathMod(17, 5);   //=> 2
	     *      R.mathMod(17, -5);  //=> NaN
	     *      R.mathMod(17, 0);   //=> NaN
	     *      R.mathMod(17.2, 5); //=> NaN
	     *      R.mathMod(17, 5.3); //=> NaN
	     *
	     *      var clock = R.mathMod(R.__, 12);
	     *      clock(15); //=> 3
	     *      clock(24); //=> 0
	     *
	     *      var seventeenMod = R.mathMod(17);
	     *      seventeenMod(3);  //=> 2
	     *      seventeenMod(4);  //=> 1
	     *      seventeenMod(10); //=> 7
	     */
	    var mathMod = _curry2(function mathMod(m, p) {
	        if (!_isInteger(m)) {
	            return NaN;
	        }
	        if (!_isInteger(p) || p < 1) {
	            return NaN;
	        }
	        return (m % p + p) % p;
	    });

	    /**
	     * Returns the larger of its two arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.maxBy, R.min
	     * @example
	     *
	     *      R.max(789, 123); //=> 789
	     *      R.max('a', 'b'); //=> 'b'
	     */
	    var max = _curry2(function max(a, b) {
	        return b > a ? b : a;
	    });

	    /**
	     * Takes a function and two values, and returns whichever value produces the
	     * larger result when passed to the provided function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> a -> a -> a
	     * @param {Function} f
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.max, R.minBy
	     * @example
	     *
	     *      //  square :: Number -> Number
	     *      var square = n => n * n;
	     *
	     *      R.maxBy(square, -3, 2); //=> -3
	     *
	     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
	     *      R.reduce(R.maxBy(square), 0, []); //=> 0
	     */
	    var maxBy = _curry3(function maxBy(f, a, b) {
	        return f(b) > f(a) ? b : a;
	    });

	    /**
	     * Create a new object with the own properties of the first object merged with
	     * the own properties of the second object. If a key exists in both objects,
	     * the value from the second object will be used.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> {k: v} -> {k: v}
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.mergeWith, R.mergeWithKey
	     * @example
	     *
	     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	     *      //=> { 'name': 'fred', 'age': 40 }
	     *
	     *      var resetToDefault = R.merge(R.__, {x: 0});
	     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
	     */
	    var merge = _curry2(function merge(l, r) {
	        return _assign({}, l, r);
	    });

	    /**
	     * Merges a list of objects together into one object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig [{k: v}] -> {k: v}
	     * @param {Array} list An array of objects
	     * @return {Object} A merged object.
	     * @see R.reduce
	     * @example
	     *
	     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
	     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
	     */
	    var mergeAll = _curry1(function mergeAll(list) {
	        return _assign.apply(null, [{}].concat(list));
	    });

	    /**
	     * Creates a new object with the own properties of the two provided objects. If
	     * a key exists in both objects, the provided function is applied to the key
	     * and the values associated with the key in each object, with the result being
	     * used as the value associated with the key in the returned object. The key
	     * will be excluded from the returned object if the resulting value is
	     * `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}
	     * @param {Function} fn
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.merge, R.mergeWith
	     * @example
	     *
	     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	     *      R.mergeWithKey(concatValues,
	     *                     { a: true, thing: 'foo', values: [10, 20] },
	     *                     { b: true, thing: 'bar', values: [15, 35] });
	     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
	     */
	    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {
	        var result = {};
	        var k;
	        for (k in l) {
	            if (_has(k, l)) {
	                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
	            }
	        }
	        for (k in r) {
	            if (_has(k, r) && !_has(k, result)) {
	                result[k] = r[k];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns the smaller of its two arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.minBy, R.max
	     * @example
	     *
	     *      R.min(789, 123); //=> 123
	     *      R.min('a', 'b'); //=> 'a'
	     */
	    var min = _curry2(function min(a, b) {
	        return b < a ? b : a;
	    });

	    /**
	     * Takes a function and two values, and returns whichever value produces the
	     * smaller result when passed to the provided function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> a -> a -> a
	     * @param {Function} f
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.min, R.maxBy
	     * @example
	     *
	     *      //  square :: Number -> Number
	     *      var square = n => n * n;
	     *
	     *      R.minBy(square, -3, 2); //=> 2
	     *
	     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
	     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
	     */
	    var minBy = _curry3(function minBy(f, a, b) {
	        return f(b) < f(a) ? b : a;
	    });

	    /**
	     * Divides the first parameter by the second and returns the remainder. Note
	     * that this function preserves the JavaScript-style behavior for modulo. For
	     * mathematical modulo see `mathMod`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The value to the divide.
	     * @param {Number} b The pseudo-modulus
	     * @return {Number} The result of `b % a`.
	     * @see R.mathMod
	     * @example
	     *
	     *      R.modulo(17, 3); //=> 2
	     *      // JS behavior:
	     *      R.modulo(-17, 3); //=> -2
	     *      R.modulo(17, -3); //=> 2
	     *
	     *      var isOdd = R.modulo(R.__, 2);
	     *      isOdd(42); //=> 0
	     *      isOdd(21); //=> 1
	     */
	    var modulo = _curry2(function modulo(a, b) {
	        return a % b;
	    });

	    /**
	     * Multiplies two numbers. Equivalent to `a * b` but curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a * b`.
	     * @see R.divide
	     * @example
	     *
	     *      var double = R.multiply(2);
	     *      var triple = R.multiply(3);
	     *      double(3);       //=>  6
	     *      triple(4);       //=> 12
	     *      R.multiply(2, 5);  //=> 10
	     */
	    var multiply = _curry2(function multiply(a, b) {
	        return a * b;
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly `n` parameters. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} n The desired arity of the new function.
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity `n`.
	     * @example
	     *
	     *      var takesTwoArgs = (a, b) => [a, b];
	     *
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.nAry(1, takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only `n` arguments are passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var nAry = _curry2(function nAry(n, fn) {
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.call(this);
	            };
	        case 1:
	            return function (a0) {
	                return fn.call(this, a0);
	            };
	        case 2:
	            return function (a0, a1) {
	                return fn.call(this, a0, a1);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                return fn.call(this, a0, a1, a2);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                return fn.call(this, a0, a1, a2, a3);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                return fn.call(this, a0, a1, a2, a3, a4);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
	            };
	        default:
	            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
	        }
	    });

	    /**
	     * Negates its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @example
	     *
	     *      R.negate(42); //=> -42
	     */
	    var negate = _curry1(function negate(n) {
	        return -n;
	    });

	    /**
	     * Returns `true` if no elements of the list match the predicate, `false`
	     * otherwise.
	     *
	     * Dispatches to the `any` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
	     * @see R.all, R.any
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *
	     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
	     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false
	     */
	    var none = _curry2(_complement(_dispatchable('any', _xany, any)));

	    /**
	     * A function that returns the `!` of its argument. It will return `true` when
	     * passed false-y value, and `false` when passed a truth-y one.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> Boolean
	     * @param {*} a any value
	     * @return {Boolean} the logical inverse of passed argument.
	     * @see R.complement
	     * @example
	     *
	     *      R.not(true); //=> false
	     *      R.not(false); //=> true
	     *      R.not(0); //=> true
	     *      R.not(1); //=> false
	     */
	    var not = _curry1(function not(a) {
	        return !a;
	    });

	    /**
	     * Returns the nth element of the given list or string. If n is negative the
	     * element at index length + n is returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> a | Undefined
	     * @sig Number -> String -> String
	     * @param {Number} offset
	     * @param {*} list
	     * @return {*}
	     * @example
	     *
	     *      var list = ['foo', 'bar', 'baz', 'quux'];
	     *      R.nth(1, list); //=> 'bar'
	     *      R.nth(-1, list); //=> 'quux'
	     *      R.nth(-99, list); //=> undefined
	     *
	     *      R.nth(2, 'abc'); //=> 'c'
	     *      R.nth(3, 'abc'); //=> ''
	     */
	    var nth = _curry2(function nth(offset, list) {
	        var idx = offset < 0 ? list.length + offset : offset;
	        return _isString(list) ? list.charAt(idx) : list[idx];
	    });

	    /**
	     * Returns a function which returns its nth argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig Number -> *... -> *
	     * @param {Number} n
	     * @return {Function}
	     * @example
	     *
	     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
	     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
	     */
	    var nthArg = _curry1(function nthArg(n) {
	        var arity = n < 0 ? 1 : n + 1;
	        return curryN(arity, function () {
	            return nth(n, arguments);
	        });
	    });

	    /**
	     * Creates an object containing a single key:value pair.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Object
	     * @sig String -> a -> {String:a}
	     * @param {String} key
	     * @param {*} val
	     * @return {Object}
	     * @see R.pair
	     * @example
	     *
	     *      var matchPhrases = R.compose(
	     *        R.objOf('must'),
	     *        R.map(R.objOf('match_phrase'))
	     *      );
	     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
	     */
	    var objOf = _curry2(function objOf(key, val) {
	        var obj = {};
	        obj[key] = val;
	        return obj;
	    });

	    /**
	     * Returns a singleton array containing the value provided.
	     *
	     * Note this `of` is different from the ES6 `of`; See
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig a -> [a]
	     * @param {*} x any value
	     * @return {Array} An array wrapping `x`.
	     * @example
	     *
	     *      R.of(null); //=> [null]
	     *      R.of([42]); //=> [[42]]
	     */
	    var of = _curry1(_of);

	    /**
	     * Accepts a function `fn` and returns a function that guards invocation of
	     * `fn` such that `fn` can only ever be called once, no matter how many times
	     * the returned function is invoked. The first value calculated is returned in
	     * subsequent invocations.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a... -> b) -> (a... -> b)
	     * @param {Function} fn The function to wrap in a call-only-once wrapper.
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      var addOneOnce = R.once(x => x + 1);
	     *      addOneOnce(10); //=> 11
	     *      addOneOnce(addOneOnce(50)); //=> 11
	     */
	    var once = _curry1(function once(fn) {
	        var called = false;
	        var result;
	        return _arity(fn.length, function () {
	            if (called) {
	                return result;
	            }
	            called = true;
	            result = fn.apply(this, arguments);
	            return result;
	        });
	    });

	    /**
	     * Returns `true` if one or both of its arguments are `true`. Returns `false`
	     * if both arguments are `false`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> * -> *
	     * @param {Boolean} a A boolean value
	     * @param {Boolean} b A boolean value
	     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise
	     * @see R.either
	     * @example
	     *
	     *      R.or(true, true); //=> true
	     *      R.or(true, false); //=> true
	     *      R.or(false, true); //=> true
	     *      R.or(false, false); //=> false
	     */
	    var or = _curry2(function or(a, b) {
	        return a || b;
	    });

	    /**
	     * Returns the result of "setting" the portion of the given data structure
	     * focused by the given lens to the result of applying the given function to
	     * the focused value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> (a -> a) -> s -> s
	     * @param {Lens} lens
	     * @param {*} v
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var headLens = R.lensIndex(0);
	     *
	     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
	     */
	    // `Identity` is a functor that holds a single value, where `map` simply
	    // transforms the held value with the provided function.
	    // The value returned by the getter function is first transformed with `f`,
	    // then set as the value of an `Identity`. This is then mapped over with the
	    // setter function of the lens.
	    var over = function () {
	        // `Identity` is a functor that holds a single value, where `map` simply
	        // transforms the held value with the provided function.
	        var Identity = function (x) {
	            return {
	                value: x,
	                map: function (f) {
	                    return Identity(f(x));
	                }
	            };
	        };
	        return _curry3(function over(lens, f, x) {
	            // The value returned by the getter function is first transformed with `f`,
	            // then set as the value of an `Identity`. This is then mapped over with the
	            // setter function of the lens.
	            return lens(function (y) {
	                return Identity(f(y));
	            })(x).value;
	        });
	    }();

	    /**
	     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category List
	     * @sig a -> b -> (a,b)
	     * @param {*} fst
	     * @param {*} snd
	     * @return {Array}
	     * @see R.objOf, R.of
	     * @example
	     *
	     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
	     */
	    var pair = _curry2(function pair(fst, snd) {
	        return [
	            fst,
	            snd
	        ];
	    });

	    /**
	     * Retrieve the value at a given path.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig [String] -> {k: v} -> v | Undefined
	     * @param {Array} path The path to use.
	     * @param {Object} obj The object to retrieve the nested property from.
	     * @return {*} The data at `path`.
	     * @see R.prop
	     * @example
	     *
	     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
	     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
	     */
	    var path = _curry2(function path(paths, obj) {
	        var val = obj;
	        var idx = 0;
	        while (idx < paths.length) {
	            if (val == null) {
	                return;
	            }
	            val = val[paths[idx]];
	            idx += 1;
	        }
	        return val;
	    });

	    /**
	     * If the given, non-null object has a value at the given path, returns the
	     * value at that path. Otherwise returns the provided default value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Object
	     * @sig a -> [String] -> Object -> a
	     * @param {*} d The default value.
	     * @param {Array} p The path to use.
	     * @param {Object} obj The object to retrieve the nested property from.
	     * @return {*} The data at `path` of the supplied object or the default value.
	     * @example
	     *
	     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
	     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
	     */
	    var pathOr = _curry3(function pathOr(d, p, obj) {
	        return defaultTo(d, path(p, obj));
	    });

	    /**
	     * Returns `true` if the specified object property at given path satisfies the
	     * given predicate; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Logic
	     * @sig (a -> Boolean) -> [String] -> Object -> Boolean
	     * @param {Function} pred
	     * @param {Array} propPath
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.propSatisfies, R.path
	     * @example
	     *
	     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
	     */
	    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {
	        return propPath.length > 0 && pred(path(propPath, obj));
	    });

	    /**
	     * Returns a partial copy of an object containing only the keys specified. If
	     * the key does not exist, the property is ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> {k: v}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @see R.omit, R.props
	     * @example
	     *
	     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
	     */
	    var pick = _curry2(function pick(names, obj) {
	        var result = {};
	        var idx = 0;
	        while (idx < names.length) {
	            if (names[idx] in obj) {
	                result[names[idx]] = obj[names[idx]];
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Similar to `pick` except that this one includes a `key: undefined` pair for
	     * properties that don't exist.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> {k: v}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @see R.pick
	     * @example
	     *
	     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
	     */
	    var pickAll = _curry2(function pickAll(names, obj) {
	        var result = {};
	        var idx = 0;
	        var len = names.length;
	        while (idx < len) {
	            var name = names[idx];
	            result[name] = obj[name];
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a partial copy of an object containing only the keys that satisfy
	     * the supplied predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
	     * @param {Function} pred A predicate to determine whether or not a key
	     *        should be included on the output object.
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties that satisfy `pred`
	     *         on it.
	     * @see R.pick, R.filter
	     * @example
	     *
	     *      var isUpperCase = (val, key) => key.toUpperCase() === key;
	     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
	     */
	    var pickBy = _curry2(function pickBy(test, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (test(obj[prop], prop, obj)) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns a new list with the given element at the front, followed by the
	     * contents of the list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The item to add to the head of the output list.
	     * @param {Array} list The array to add to the tail of the output list.
	     * @return {Array} A new array.
	     * @see R.append
	     * @example
	     *
	     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
	     */
	    var prepend = _curry2(function prepend(el, list) {
	        return _concat([el], list);
	    });

	    /**
	     * Returns a function that when supplied an object returns the indicated
	     * property of that object, if it exists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig s -> {s: a} -> a | Undefined
	     * @param {String} p The property name
	     * @param {Object} obj The object to query
	     * @return {*} The value at `obj.p`.
	     * @see R.path
	     * @example
	     *
	     *      R.prop('x', {x: 100}); //=> 100
	     *      R.prop('x', {}); //=> undefined
	     */
	    var prop = _curry2(function prop(p, obj) {
	        return obj[p];
	    });

	    /**
	     * Returns `true` if the specified object property is of the given type;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Type
	     * @sig Type -> String -> Object -> Boolean
	     * @param {Function} type
	     * @param {String} name
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.is, R.propSatisfies
	     * @example
	     *
	     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
	     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
	     *      R.propIs(Number, 'x', {});            //=> false
	     */
	    var propIs = _curry3(function propIs(type, name, obj) {
	        return is(type, obj[name]);
	    });

	    /**
	     * If the given, non-null object has an own property with the specified name,
	     * returns the value of that property. Otherwise returns the provided default
	     * value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Object
	     * @sig a -> String -> Object -> a
	     * @param {*} val The default value.
	     * @param {String} p The name of the property to return.
	     * @param {Object} obj The object to query.
	     * @return {*} The value of given property of the supplied object or the default value.
	     * @example
	     *
	     *      var alice = {
	     *        name: 'ALICE',
	     *        age: 101
	     *      };
	     *      var favorite = R.prop('favoriteLibrary');
	     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
	     *
	     *      favorite(alice);  //=> undefined
	     *      favoriteWithDefault(alice);  //=> 'Ramda'
	     */
	    var propOr = _curry3(function propOr(val, p, obj) {
	        return obj != null && _has(p, obj) ? obj[p] : val;
	    });

	    /**
	     * Returns `true` if the specified object property satisfies the given
	     * predicate; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Logic
	     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
	     * @param {Function} pred
	     * @param {String} name
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.propEq, R.propIs
	     * @example
	     *
	     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
	     */
	    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {
	        return pred(obj[name]);
	    });

	    /**
	     * Acts as multiple `prop`: array of keys in, array of values out. Preserves
	     * order.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> [v]
	     * @param {Array} ps The property names to fetch
	     * @param {Object} obj The object to query
	     * @return {Array} The corresponding values or partially applied function.
	     * @example
	     *
	     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
	     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
	     *
	     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
	     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
	     */
	    var props = _curry2(function props(ps, obj) {
	        var len = ps.length;
	        var out = [];
	        var idx = 0;
	        while (idx < len) {
	            out[idx] = obj[ps[idx]];
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> Number -> [Number]
	     * @param {Number} from The first number in the list.
	     * @param {Number} to One more than the last number in the list.
	     * @return {Array} The list of numbers in tthe set `[a, b)`.
	     * @example
	     *
	     *      R.range(1, 5);    //=> [1, 2, 3, 4]
	     *      R.range(50, 53);  //=> [50, 51, 52]
	     */
	    var range = _curry2(function range(from, to) {
	        if (!(_isNumber(from) && _isNumber(to))) {
	            throw new TypeError('Both arguments to range must be numbers');
	        }
	        var result = [];
	        var n = from;
	        while (n < to) {
	            result.push(n);
	            n += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling
	     * the iterator function and passing it an accumulator value and the current
	     * value from the array, and then passing the result to the next call.
	     *
	     * Similar to `reduce`, except moves through the input list from the right to
	     * the left.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.reduce` method. For more details
	     * on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];
	     *      var flattenPairs = (acc, pair) => acc.concat(pair);
	     *
	     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]
	     */
	    var reduceRight = _curry3(function reduceRight(fn, acc, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            acc = fn(acc, list[idx]);
	            idx -= 1;
	        }
	        return acc;
	    });

	    /**
	     * Returns a value wrapped to indicate that it is the final value of the reduce
	     * and transduce functions. The returned value should be considered a black
	     * box: the internal structure is not guaranteed to be stable.
	     *
	     * Note: this optimization is unavailable to functions not explicitly listed
	     * above. For instance, it is not currently supported by reduceRight.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category List
	     * @sig a -> *
	     * @param {*} x The final value of the reduce.
	     * @return {*} The wrapped value.
	     * @see R.reduce, R.transduce
	     * @example
	     *
	     *      R.reduce(
	     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),
	     *        0,
	     *        [1, 2, 3, 4, 5]) // 10
	     */
	    var reduced = _curry1(_reduced);

	    /**
	     * Removes the sub-list of `list` starting at index `start` and containing
	     * `count` elements. _Note that this is not destructive_: it returns a copy of
	     * the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.2
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @param {Number} start The position to start removing elements
	     * @param {Number} count The number of elements to remove
	     * @param {Array} list The list to remove from
	     * @return {Array} A new Array with `count` elements from `start` removed.
	     * @example
	     *
	     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
	     */
	    var remove = _curry3(function remove(start, count, list) {
	        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));
	    });

	    /**
	     * Replace a substring or regex match in a string with a replacement.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category String
	     * @sig RegExp|String -> String -> String -> String
	     * @param {RegExp|String} pattern A regular expression or a substring to match.
	     * @param {String} replacement The string to replace the matches with.
	     * @param {String} str The String to do the search and replacement in.
	     * @return {String} The result.
	     * @example
	     *
	     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *
	     *      // Use the "g" (global) flag to replace all occurrences:
	     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
	     */
	    var replace = _curry3(function replace(regex, replacement, str) {
	        return str.replace(regex, replacement);
	    });

	    /**
	     * Returns a new list or string with the elements or characters in reverse
	     * order.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {Array|String} list
	     * @return {Array|String}
	     * @example
	     *
	     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
	     *      R.reverse([1, 2]);     //=> [2, 1]
	     *      R.reverse([1]);        //=> [1]
	     *      R.reverse([]);         //=> []
	     *
	     *      R.reverse('abc');      //=> 'cba'
	     *      R.reverse('ab');       //=> 'ba'
	     *      R.reverse('a');        //=> 'a'
	     *      R.reverse('');         //=> ''
	     */
	    var reverse = _curry1(function reverse(list) {
	        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();
	    });

	    /**
	     * Scan is similar to reduce, but returns a list of successively reduced values
	     * from the left
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> [a]
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} A list of all intermediately reduced values.
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
	     */
	    var scan = _curry3(function scan(fn, acc, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [acc];
	        while (idx < len) {
	            acc = fn(acc, list[idx]);
	            result[idx + 1] = acc;
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns the result of "setting" the portion of the given data structure
	     * focused by the given lens to the given value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> a -> s -> s
	     * @param {Lens} lens
	     * @param {*} v
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
	     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
	     */
	    var set = _curry3(function set(lens, v, x) {
	        return over(lens, always(v), x);
	    });

	    /**
	     * Returns the elements of the given list or string (or object with a `slice`
	     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
	     *
	     * Dispatches to the `slice` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @sig Number -> Number -> String -> String
	     * @param {Number} fromIndex The start index (inclusive).
	     * @param {Number} toIndex The end index (exclusive).
	     * @param {*} list
	     * @return {*}
	     * @example
	     *
	     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
	     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
	     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
	     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
	     *      R.slice(0, 3, 'ramda');                     //=> 'ram'
	     */
	    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
	        return Array.prototype.slice.call(list, fromIndex, toIndex);
	    }));

	    /**
	     * Returns a copy of the list, sorted according to the comparator function,
	     * which should accept two values at a time and return a negative number if the
	     * first value is smaller, a positive number if it's larger, and zero if they
	     * are equal. Please note that this is a **copy** of the list. It does not
	     * modify the original.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,a -> Number) -> [a] -> [a]
	     * @param {Function} comparator A sorting function :: a -> b -> Int
	     * @param {Array} list The list to sort
	     * @return {Array} a new array with its elements sorted by the comparator function.
	     * @example
	     *
	     *      var diff = function(a, b) { return a - b; };
	     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
	     */
	    var sort = _curry2(function sort(comparator, list) {
	        return _slice(list).sort(comparator);
	    });

	    /**
	     * Sorts the list according to the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> [a] -> [a]
	     * @param {Function} fn
	     * @param {Array} list The list to sort.
	     * @return {Array} A new list sorted by the keys generated by `fn`.
	     * @example
	     *
	     *      var sortByFirstItem = R.sortBy(R.prop(0));
	     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
	     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
	     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
	     *      var alice = {
	     *        name: 'ALICE',
	     *        age: 101
	     *      };
	     *      var bob = {
	     *        name: 'Bob',
	     *        age: -10
	     *      };
	     *      var clara = {
	     *        name: 'clara',
	     *        age: 314.159
	     *      };
	     *      var people = [clara, bob, alice];
	     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
	     */
	    var sortBy = _curry2(function sortBy(fn, list) {
	        return _slice(list).sort(function (a, b) {
	            var aa = fn(a);
	            var bb = fn(b);
	            return aa < bb ? -1 : aa > bb ? 1 : 0;
	        });
	    });

	    /**
	     * Splits a given list or string at a given index.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig Number -> [a] -> [[a], [a]]
	     * @sig Number -> String -> [String, String]
	     * @param {Number} index The index where the array/string is split.
	     * @param {Array|String} array The array/string to be split.
	     * @return {Array}
	     * @example
	     *
	     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
	     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
	     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
	     */
	    var splitAt = _curry2(function splitAt(index, array) {
	        return [
	            slice(0, index, array),
	            slice(index, length(array), array)
	        ];
	    });

	    /**
	     * Splits a collection into slices of the specified length.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [[a]]
	     * @sig Number -> String -> [String]
	     * @param {Number} n
	     * @param {Array} list
	     * @return {Array}
	     * @example
	     *
	     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
	     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
	     */
	    var splitEvery = _curry2(function splitEvery(n, list) {
	        if (n <= 0) {
	            throw new Error('First argument to splitEvery must be a positive integer');
	        }
	        var result = [];
	        var idx = 0;
	        while (idx < list.length) {
	            result.push(slice(idx, idx += n, list));
	        }
	        return result;
	    });

	    /**
	     * Takes a list and a predicate and returns a pair of lists with the following properties:
	     *
	     *  - the result of concatenating the two output lists is equivalent to the input list;
	     *  - none of the elements of the first output list satisfies the predicate; and
	     *  - if the second output list is non-empty, its first element satisfies the predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [[a], [a]]
	     * @param {Function} pred The predicate that determines where the array is split.
	     * @param {Array} list The array to be split.
	     * @return {Array}
	     * @example
	     *
	     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
	     */
	    var splitWhen = _curry2(function splitWhen(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        var prefix = [];
	        while (idx < len && !pred(list[idx])) {
	            prefix.push(list[idx]);
	            idx += 1;
	        }
	        return [
	            prefix,
	            _slice(list, idx)
	        ];
	    });

	    /**
	     * Subtracts its second argument from its first argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a - b`.
	     * @see R.add
	     * @example
	     *
	     *      R.subtract(10, 8); //=> 2
	     *
	     *      var minus5 = R.subtract(R.__, 5);
	     *      minus5(17); //=> 12
	     *
	     *      var complementaryAngle = R.subtract(90);
	     *      complementaryAngle(30); //=> 60
	     *      complementaryAngle(72); //=> 18
	     */
	    var subtract = _curry2(function subtract(a, b) {
	        return Number(a) - Number(b);
	    });

	    /**
	     * Returns all but the first element of the given list or string (or object
	     * with a `tail` method).
	     *
	     * Dispatches to the `slice` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.head, R.init, R.last
	     * @example
	     *
	     *      R.tail([1, 2, 3]);  //=> [2, 3]
	     *      R.tail([1, 2]);     //=> [2]
	     *      R.tail([1]);        //=> []
	     *      R.tail([]);         //=> []
	     *
	     *      R.tail('abc');  //=> 'bc'
	     *      R.tail('ab');   //=> 'b'
	     *      R.tail('a');    //=> ''
	     *      R.tail('');     //=> ''
	     */
	    var tail = _checkForMethod('tail', slice(1, Infinity));

	    /**
	     * Returns the first `n` elements of the given list, string, or
	     * transducer/transformer (or object with a `take` method).
	     *
	     * Dispatches to the `take` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n
	     * @param {*} list
	     * @return {*}
	     * @see R.drop
	     * @example
	     *
	     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
	     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.take(3, 'ramda');               //=> 'ram'
	     *
	     *      var personnel = [
	     *        'Dave Brubeck',
	     *        'Paul Desmond',
	     *        'Eugene Wright',
	     *        'Joe Morello',
	     *        'Gerry Mulligan',
	     *        'Bob Bates',
	     *        'Joe Dodge',
	     *        'Ron Crotty'
	     *      ];
	     *
	     *      var takeFive = R.take(5);
	     *      takeFive(personnel);
	     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
	     */
	    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {
	        return slice(0, n < 0 ? Infinity : n, xs);
	    }));

	    /**
	     * Returns a new list containing the last `n` elements of a given list, passing
	     * each value to the supplied predicate function, and terminating when the
	     * predicate function returns `false`. Excludes the element that caused the
	     * predicate function to fail. The predicate function is passed one argument:
	     * *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.dropLastWhile, R.addIndex
	     * @example
	     *
	     *      var isNotOne = x => x !== 1;
	     *
	     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
	     */
	    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0 && fn(list[idx])) {
	            idx -= 1;
	        }
	        return _slice(list, idx + 1, Infinity);
	    });

	    /**
	     * Returns a new list containing the first `n` elements of a given list,
	     * passing each value to the supplied predicate function, and terminating when
	     * the predicate function returns `false`. Excludes the element that caused the
	     * predicate function to fail. The predicate function is passed one argument:
	     * *(value)*.
	     *
	     * Dispatches to the `takeWhile` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.dropWhile, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isNotFour = x => x !== 4;
	     *
	     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
	     */
	    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len && fn(list[idx])) {
	            idx += 1;
	        }
	        return _slice(list, 0, idx);
	    }));

	    /**
	     * Runs the given function with the supplied object, then returns the object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a -> *) -> a -> a
	     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
	     * @param {*} x
	     * @return {*} `x`.
	     * @example
	     *
	     *      var sayX = x => console.log('x is ' + x);
	     *      R.tap(sayX, 100); //=> 100
	     *      // logs 'x is 100'
	     */
	    var tap = _curry2(function tap(fn, x) {
	        fn(x);
	        return x;
	    });

	    /**
	     * Calls an input function `n` times, returning an array containing the results
	     * of those function calls.
	     *
	     * `fn` is passed one argument: The current value of `n`, which begins at `0`
	     * and is gradually incremented to `n - 1`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.3
	     * @category List
	     * @sig (Number -> a) -> Number -> [a]
	     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
	     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
	     * @return {Array} An array containing the return values of all calls to `fn`.
	     * @example
	     *
	     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
	     */
	    var times = _curry2(function times(fn, n) {
	        var len = Number(n);
	        var idx = 0;
	        var list;
	        if (len < 0 || isNaN(len)) {
	            throw new RangeError('n must be a non-negative number');
	        }
	        list = new Array(len);
	        while (idx < len) {
	            list[idx] = fn(idx);
	            idx += 1;
	        }
	        return list;
	    });

	    /**
	     * Converts an object into an array of key, value arrays. Only the object's
	     * own properties are used.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Object
	     * @sig {String: *} -> [[String,*]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own properties.
	     * @see R.fromPairs
	     * @example
	     *
	     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	     */
	    var toPairs = _curry1(function toPairs(obj) {
	        var pairs = [];
	        for (var prop in obj) {
	            if (_has(prop, obj)) {
	                pairs[pairs.length] = [
	                    prop,
	                    obj[prop]
	                ];
	            }
	        }
	        return pairs;
	    });

	    /**
	     * Converts an object into an array of key, value arrays. The object's own
	     * properties and prototype properties are used. Note that the order of the
	     * output array is not guaranteed to be consistent across different JS
	     * platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Object
	     * @sig {String: *} -> [[String,*]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own
	     *         and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
	     */
	    var toPairsIn = _curry1(function toPairsIn(obj) {
	        var pairs = [];
	        for (var prop in obj) {
	            pairs[pairs.length] = [
	                prop,
	                obj[prop]
	            ];
	        }
	        return pairs;
	    });

	    /**
	     * Transposes the rows and columns of a 2D list.
	     * When passed a list of `n` lists of length `x`,
	     * returns a list of `x` lists of length `n`.
	     *
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig [[a]] -> [[a]]
	     * @param {Array} list A 2D list
	     * @return {Array} A 2D list
	     * @example
	     *
	     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
	     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	     *
	     * If some of the rows are shorter than the following rows, their elements are skipped:
	     *
	     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
	     */
	    var transpose = _curry1(function transpose(outerlist) {
	        var i = 0;
	        var result = [];
	        while (i < outerlist.length) {
	            var innerlist = outerlist[i];
	            var j = 0;
	            while (j < innerlist.length) {
	                if (typeof result[j] === 'undefined') {
	                    result[j] = [];
	                }
	                result[j].push(innerlist[j]);
	                j += 1;
	            }
	            i += 1;
	        }
	        return result;
	    });

	    /**
	     * Removes (strips) whitespace from both ends of the string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to trim.
	     * @return {String} Trimmed version of `str`.
	     * @example
	     *
	     *      R.trim('   xyz  '); //=> 'xyz'
	     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
	     */
	    var trim = function () {
	        var ws = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
	        var zeroWidth = '\u200B';
	        var hasProtoTrim = typeof String.prototype.trim === 'function';
	        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
	            return _curry1(function trim(str) {
	                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
	                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
	                return str.replace(beginRx, '').replace(endRx, '');
	            });
	        } else {
	            return _curry1(function trim(str) {
	                return str.trim();
	            });
	        }
	    }();

	    /**
	     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
	     * function evaluates the `tryer`; if it does not throw, it simply returns the
	     * result. If the `tryer` *does* throw, the returned function evaluates the
	     * `catcher` function and returns its result. Note that for effective
	     * composition with this function, both the `tryer` and `catcher` functions
	     * must return the same type of results.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Function
	     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
	     * @param {Function} tryer The function that may throw.
	     * @param {Function} catcher The function that will be evaluated if `tryer` throws.
	     * @return {Function} A new function that will catch exceptions and send then to the catcher.
	     * @example
	     *
	     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
	     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
	     */
	    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {
	        return _arity(tryer.length, function () {
	            try {
	                return tryer.apply(this, arguments);
	            } catch (e) {
	                return catcher.apply(this, _concat([e], arguments));
	            }
	        });
	    });

	    /**
	     * Gives a single-word string description of the (native) type of a value,
	     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	     * attempt to distinguish user Object types any further, reporting them all as
	     * 'Object'.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Type
	     * @sig (* -> {*}) -> String
	     * @param {*} val The value to test
	     * @return {String}
	     * @example
	     *
	     *      R.type({}); //=> "Object"
	     *      R.type(1); //=> "Number"
	     *      R.type(false); //=> "Boolean"
	     *      R.type('s'); //=> "String"
	     *      R.type(null); //=> "Null"
	     *      R.type([]); //=> "Array"
	     *      R.type(/[A-z]/); //=> "RegExp"
	     */
	    var type = _curry1(function type(val) {
	        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
	    });

	    /**
	     * Takes a function `fn`, which takes a single array argument, and returns a
	     * function which:
	     *
	     *   - takes any number of positional arguments;
	     *   - passes these arguments to `fn` as an array; and
	     *   - returns the result.
	     *
	     * In other words, R.unapply derives a variadic function from a function which
	     * takes an array. R.unapply is the inverse of R.apply.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Function
	     * @sig ([*...] -> a) -> (*... -> a)
	     * @param {Function} fn
	     * @return {Function}
	     * @see R.apply
	     * @example
	     *
	     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
	     */
	    var unapply = _curry1(function unapply(fn) {
	        return function () {
	            return fn(_slice(arguments));
	        };
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly 1 parameter. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Function
	     * @sig (* -> b) -> (a -> b)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 1.
	     * @example
	     *
	     *      var takesTwoArgs = function(a, b) {
	     *        return [a, b];
	     *      };
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.unary(takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only 1 argument is passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var unary = _curry1(function unary(fn) {
	        return nAry(1, fn);
	    });

	    /**
	     * Returns a function of arity `n` from a (manually) curried function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Function
	     * @sig Number -> (a -> b) -> (a -> c)
	     * @param {Number} length The arity for the returned function.
	     * @param {Function} fn The function to uncurry.
	     * @return {Function} A new function.
	     * @see R.curry
	     * @example
	     *
	     *      var addFour = a => b => c => d => a + b + c + d;
	     *
	     *      var uncurriedAddFour = R.uncurryN(4, addFour);
	     *      uncurriedAddFour(1, 2, 3, 4); //=> 10
	     */
	    var uncurryN = _curry2(function uncurryN(depth, fn) {
	        return curryN(depth, function () {
	            var currentDepth = 1;
	            var value = fn;
	            var idx = 0;
	            var endIdx;
	            while (currentDepth <= depth && typeof value === 'function') {
	                endIdx = currentDepth === depth ? arguments.length : idx + value.length;
	                value = value.apply(this, _slice(arguments, idx, endIdx));
	                currentDepth += 1;
	                idx = endIdx;
	            }
	            return value;
	        });
	    });

	    /**
	     * Builds a list from a seed value. Accepts an iterator function, which returns
	     * either false to stop iteration or an array of length 2 containing the value
	     * to add to the resulting list and the seed to be used in the next call to the
	     * iterator function.
	     *
	     * The iterator function receives one argument: *(seed)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (a -> [b]) -> * -> [b]
	     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
	     *        either false to quit iteration or an array of length two to proceed. The element
	     *        at index 0 of this array will be added to the resulting array, and the element
	     *        at index 1 will be passed to the next call to `fn`.
	     * @param {*} seed The seed value.
	     * @return {Array} The final list.
	     * @example
	     *
	     *      var f = n => n > 50 ? false : [-n, n + 10];
	     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
	     */
	    var unfold = _curry2(function unfold(fn, seed) {
	        var pair = fn(seed);
	        var result = [];
	        while (pair && pair.length) {
	            result[result.length] = pair[0];
	            pair = fn(pair[1]);
	        }
	        return result;
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list, based upon the value returned by applying the supplied predicate to
	     * two list elements. Prefers the first item if two items compare equal based
	     * on the predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category List
	     * @sig (a, a -> Boolean) -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      var strEq = R.eqBy(String);
	     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
	     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
	     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
	     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
	     */
	    var uniqWith = _curry2(function uniqWith(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        var item;
	        while (idx < len) {
	            item = list[idx];
	            if (!_containsWith(pred, item, result)) {
	                result[result.length] = item;
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Tests the final argument by passing it to the given predicate function. If
	     * the predicate is not satisfied, the function will return the result of
	     * calling the `whenFalseFn` function with the same argument. If the predicate
	     * is satisfied, the argument is returned as is.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred        A predicate function
	     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
	     *                               to a falsy value.
	     * @param {*}        x           An object to test with the `pred` function and
	     *                               pass to `whenFalseFn` if necessary.
	     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
	     * @see R.ifElse, R.when
	     * @example
	     *
	     *      // coerceArray :: (a|[a]) -> [a]
	     *      var coerceArray = R.unless(R.isArrayLike, R.of);
	     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]
	     *      coerceArray(1);         //=> [1]
	     */
	    var unless = _curry3(function unless(pred, whenFalseFn, x) {
	        return pred(x) ? x : whenFalseFn(x);
	    });

	    /**
	     * Takes a predicate, a transformation function, and an initial value,
	     * and returns a value of the same type as the initial value.
	     * It does so by applying the transformation until the predicate is satisfied,
	     * at which point it returns the satisfactory value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred A predicate function
	     * @param {Function} fn The iterator function
	     * @param {*} init Initial value
	     * @return {*} Final value that satisfies predicate
	     * @example
	     *
	     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
	     */
	    var until = _curry3(function until(pred, fn, init) {
	        var val = init;
	        while (!pred(val)) {
	            val = fn(val);
	        }
	        return val;
	    });

	    /**
	     * Returns a new copy of the array with the element at the provided index
	     * replaced with the given value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig Number -> a -> [a] -> [a]
	     * @param {Number} idx The index to update.
	     * @param {*} x The value to exist at the given index of the returned array.
	     * @param {Array|Arguments} list The source array-like object to be updated.
	     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
	     * @see R.adjust
	     * @example
	     *
	     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
	     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
	     */
	    var update = _curry3(function update(idx, x, list) {
	        return adjust(always(x), idx, list);
	    });

	    /**
	     * Accepts a function `fn` and a list of transformer functions and returns a
	     * new curried function. When the new function is invoked, it calls the
	     * function `fn` with parameters consisting of the result of calling each
	     * supplied handler on successive arguments to the new function.
	     *
	     * If more arguments are passed to the returned function than transformer
	     * functions, those arguments are passed directly to `fn` as additional
	     * parameters. If you expect additional arguments that don't need to be
	     * transformed, although you can ignore them, it's best to pass an identity
	     * function so that the new function reports the correct arity.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
	     * @param {Function} fn The function to wrap.
	     * @param {Array} transformers A list of transformer functions
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
	     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
	     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
	     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
	     */
	    var useWith = _curry2(function useWith(fn, transformers) {
	        return curryN(transformers.length, function () {
	            var args = [];
	            var idx = 0;
	            while (idx < transformers.length) {
	                args.push(transformers[idx].call(this, arguments[idx]));
	                idx += 1;
	            }
	            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));
	        });
	    });

	    /**
	     * Returns a list of all the enumerable own properties of the supplied object.
	     * Note that the order of the output array is not guaranteed across different
	     * JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own properties.
	     * @example
	     *
	     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
	     */
	    var values = _curry1(function values(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var vals = [];
	        var idx = 0;
	        while (idx < len) {
	            vals[idx] = obj[props[idx]];
	            idx += 1;
	        }
	        return vals;
	    });

	    /**
	     * Returns a list of all the properties, including prototype properties, of the
	     * supplied object.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.valuesIn(f); //=> ['X', 'Y']
	     */
	    var valuesIn = _curry1(function valuesIn(obj) {
	        var prop;
	        var vs = [];
	        for (prop in obj) {
	            vs[vs.length] = obj[prop];
	        }
	        return vs;
	    });

	    /**
	     * Returns a "view" of the given data structure, determined by the given lens.
	     * The lens's focus determines which portion of the data structure is visible.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> s -> a
	     * @param {Lens} lens
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.view(xLens, {x: 1, y: 2});  //=> 1
	     *      R.view(xLens, {x: 4, y: 2});  //=> 4
	     */
	    // `Const` is a functor that effectively ignores the function given to `map`.
	    // Using `Const` effectively ignores the setter function of the `lens`,
	    // leaving the value returned by the getter function unmodified.
	    var view = function () {
	        // `Const` is a functor that effectively ignores the function given to `map`.
	        var Const = function (x) {
	            return {
	                value: x,
	                map: function () {
	                    return this;
	                }
	            };
	        };
	        return _curry2(function view(lens, x) {
	            // Using `Const` effectively ignores the setter function of the `lens`,
	            // leaving the value returned by the getter function unmodified.
	            return lens(Const)(x).value;
	        });
	    }();

	    /**
	     * Tests the final argument by passing it to the given predicate function. If
	     * the predicate is satisfied, the function will return the result of calling
	     * the `whenTrueFn` function with the same argument. If the predicate is not
	     * satisfied, the argument is returned as is.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred       A predicate function
	     * @param {Function} whenTrueFn A function to invoke when the `condition`
	     *                              evaluates to a truthy value.
	     * @param {*}        x          An object to test with the `pred` function and
	     *                              pass to `whenTrueFn` if necessary.
	     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
	     * @see R.ifElse, R.unless
	     * @example
	     *
	     *      // truncate :: String -> String
	     *      var truncate = R.when(
	     *        R.propSatisfies(R.gt(R.__, 10), 'length'),
	     *        R.pipe(R.take(10), R.append('…'), R.join(''))
	     *      );
	     *      truncate('12345');         //=> '12345'
	     *      truncate('0123456789ABC'); //=> '0123456789…'
	     */
	    var when = _curry3(function when(pred, whenTrueFn, x) {
	        return pred(x) ? whenTrueFn(x) : x;
	    });

	    /**
	     * Takes a spec object and a test object; returns true if the test satisfies
	     * the spec. Each of the spec's own properties must be a predicate function.
	     * Each predicate is applied to the value of the corresponding property of the
	     * test object. `where` returns true if all the predicates return true, false
	     * otherwise.
	     *
	     * `where` is well suited to declaratively expressing constraints for other
	     * functions such as `filter` and `find`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category Object
	     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
	     * @param {Object} spec
	     * @param {Object} testObj
	     * @return {Boolean}
	     * @example
	     *
	     *      // pred :: Object -> Boolean
	     *      var pred = where({
	     *        a: equals('foo'),
	     *        b: complement(equals('bar')),
	     *        x: gt(__, 10),
	     *        y: lt(__, 20)
	     *      });
	     *
	     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
	     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
	     */
	    var where = _curry2(function where(spec, testObj) {
	        for (var prop in spec) {
	            if (_has(prop, spec) && !spec[prop](testObj[prop])) {
	                return false;
	            }
	        }
	        return true;
	    });

	    /**
	     * Wrap a function inside another to allow you to make adjustments to the
	     * parameters, or do other processing either before the internal function is
	     * called or with its results.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
	     * @param {Function} fn The function to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @return {Function} The wrapped function.
	     * @deprecated since v0.22.0
	     * @example
	     *
	     *      var greet = name => 'Hello ' + name;
	     *
	     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());
	     *
	     *      shoutedGreet("Kathy"); //=> "HELLO KATHY"
	     *
	     *      var shortenedGreet = R.wrap(greet, function(gr, name) {
	     *        return gr(name.substring(0, 3));
	     *      });
	     *      shortenedGreet("Robert"); //=> "Hello Rob"
	     */
	    var wrap = _curry2(function wrap(fn, wrapper) {
	        return curryN(fn.length, function () {
	            return wrapper.apply(this, _concat([fn], arguments));
	        });
	    });

	    /**
	     * Creates a new list out of the two supplied by creating each possible pair
	     * from the lists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The list made by combining each possible pair from
	     *         `as` and `bs` into pairs (`[a, b]`).
	     * @example
	     *
	     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
	     */
	    // = xprodWith(prepend); (takes about 3 times as long...)
	    var xprod = _curry2(function xprod(a, b) {
	        // = xprodWith(prepend); (takes about 3 times as long...)
	        var idx = 0;
	        var ilen = a.length;
	        var j;
	        var jlen = b.length;
	        var result = [];
	        while (idx < ilen) {
	            j = 0;
	            while (j < jlen) {
	                result[result.length] = [
	                    a[idx],
	                    b[j]
	                ];
	                j += 1;
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Creates a new list out of the two supplied by pairing up equally-positioned
	     * items from both lists. The returned list is truncated to the length of the
	     * shorter of the two input lists.
	     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
	     * @example
	     *
	     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	     */
	    var zip = _curry2(function zip(a, b) {
	        var rv = [];
	        var idx = 0;
	        var len = Math.min(a.length, b.length);
	        while (idx < len) {
	            rv[idx] = [
	                a[idx],
	                b[idx]
	            ];
	            idx += 1;
	        }
	        return rv;
	    });

	    /**
	     * Creates a new object out of a list of keys and a list of values.
	     * Key/value pairing is truncated to the length of the shorter of the two lists.
	     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [String] -> [*] -> {String: *}
	     * @param {Array} keys The array that will be properties on the output object.
	     * @param {Array} values The list of values on the output object.
	     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
	     * @example
	     *
	     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
	     */
	    var zipObj = _curry2(function zipObj(keys, values) {
	        var idx = 0;
	        var len = Math.min(keys.length, values.length);
	        var out = {};
	        while (idx < len) {
	            out[keys[idx]] = values[idx];
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Creates a new list out of the two supplied by applying the function to each
	     * equally-positioned pair in the lists. The returned list is truncated to the
	     * length of the shorter of the two input lists.
	     *
	     * @function
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,b -> c) -> [a] -> [b] -> [c]
	     * @param {Function} fn The function used to combine the two elements into one value.
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
	     *         using `fn`.
	     * @example
	     *
	     *      var f = (x, y) => {
	     *        // ...
	     *      };
	     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
	     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
	     */
	    var zipWith = _curry3(function zipWith(fn, a, b) {
	        var rv = [];
	        var idx = 0;
	        var len = Math.min(a.length, b.length);
	        while (idx < len) {
	            rv[idx] = fn(a[idx], b[idx]);
	            idx += 1;
	        }
	        return rv;
	    });

	    /**
	     * A function that always returns `false`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig * -> Boolean
	     * @param {*}
	     * @return {Boolean}
	     * @see R.always, R.T
	     * @example
	     *
	     *      R.F(); //=> false
	     */
	    var F = always(false);

	    /**
	     * A function that always returns `true`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig * -> Boolean
	     * @param {*}
	     * @return {Boolean}
	     * @see R.always, R.F
	     * @example
	     *
	     *      R.T(); //=> true
	     */
	    var T = always(true);

	    /**
	     * Copies an object.
	     *
	     * @private
	     * @param {*} value The value to be copied
	     * @param {Array} refFrom Array containing the source references
	     * @param {Array} refTo Array containing the copied source references
	     * @param {Boolean} deep Whether or not to perform deep cloning.
	     * @return {*} The copied value.
	     */
	    var _clone = function _clone(value, refFrom, refTo, deep) {
	        var copy = function copy(copiedValue) {
	            var len = refFrom.length;
	            var idx = 0;
	            while (idx < len) {
	                if (value === refFrom[idx]) {
	                    return refTo[idx];
	                }
	                idx += 1;
	            }
	            refFrom[idx + 1] = value;
	            refTo[idx + 1] = copiedValue;
	            for (var key in value) {
	                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
	            }
	            return copiedValue;
	        };
	        switch (type(value)) {
	        case 'Object':
	            return copy({});
	        case 'Array':
	            return copy([]);
	        case 'Date':
	            return new Date(value.valueOf());
	        case 'RegExp':
	            return _cloneRegExp(value);
	        default:
	            return value;
	        }
	    };

	    var _createPartialApplicator = function _createPartialApplicator(concat) {
	        return _curry2(function (fn, args) {
	            return _arity(Math.max(0, fn.length - args.length), function () {
	                return fn.apply(this, concat(args, arguments));
	            });
	        });
	    };

	    var _dropLast = function dropLast(n, xs) {
	        return take(n < xs.length ? xs.length - n : 0, xs);
	    };

	    // Values of other types are only equal if identical.
	    var _equals = function _equals(a, b, stackA, stackB) {
	        if (identical(a, b)) {
	            return true;
	        }
	        if (type(a) !== type(b)) {
	            return false;
	        }
	        if (a == null || b == null) {
	            return false;
	        }
	        if (typeof a.equals === 'function' || typeof b.equals === 'function') {
	            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
	        }
	        switch (type(a)) {
	        case 'Arguments':
	        case 'Array':
	        case 'Object':
	            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
	                return a === b;
	            }
	            break;
	        case 'Boolean':
	        case 'Number':
	        case 'String':
	            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
	                return false;
	            }
	            break;
	        case 'Date':
	            if (!identical(a.valueOf(), b.valueOf())) {
	                return false;
	            }
	            break;
	        case 'Error':
	            return a.name === b.name && a.message === b.message;
	        case 'RegExp':
	            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
	                return false;
	            }
	            break;
	        case 'Map':
	        case 'Set':
	            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {
	                return false;
	            }
	            break;
	        case 'Int8Array':
	        case 'Uint8Array':
	        case 'Uint8ClampedArray':
	        case 'Int16Array':
	        case 'Uint16Array':
	        case 'Int32Array':
	        case 'Uint32Array':
	        case 'Float32Array':
	        case 'Float64Array':
	            break;
	        case 'ArrayBuffer':
	            break;
	        default:
	            // Values of other types are only equal if identical.
	            return false;
	        }
	        var keysA = keys(a);
	        if (keysA.length !== keys(b).length) {
	            return false;
	        }
	        var idx = stackA.length - 1;
	        while (idx >= 0) {
	            if (stackA[idx] === a) {
	                return stackB[idx] === b;
	            }
	            idx -= 1;
	        }
	        stackA.push(a);
	        stackB.push(b);
	        idx = keysA.length - 1;
	        while (idx >= 0) {
	            var key = keysA[idx];
	            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {
	                return false;
	            }
	            idx -= 1;
	        }
	        stackA.pop();
	        stackB.pop();
	        return true;
	    };

	    /**
	     * `_makeFlat` is a helper function that returns a one-level or fully recursive
	     * function based on the flag passed in.
	     *
	     * @private
	     */
	    var _makeFlat = function _makeFlat(recursive) {
	        return function flatt(list) {
	            var value, jlen, j;
	            var result = [];
	            var idx = 0;
	            var ilen = list.length;
	            while (idx < ilen) {
	                if (isArrayLike(list[idx])) {
	                    value = recursive ? flatt(list[idx]) : list[idx];
	                    j = 0;
	                    jlen = value.length;
	                    while (j < jlen) {
	                        result[result.length] = value[j];
	                        j += 1;
	                    }
	                } else {
	                    result[result.length] = list[idx];
	                }
	                idx += 1;
	            }
	            return result;
	        };
	    };

	    var _reduce = function () {
	        function _arrayReduce(xf, acc, list) {
	            var idx = 0;
	            var len = list.length;
	            while (idx < len) {
	                acc = xf['@@transducer/step'](acc, list[idx]);
	                if (acc && acc['@@transducer/reduced']) {
	                    acc = acc['@@transducer/value'];
	                    break;
	                }
	                idx += 1;
	            }
	            return xf['@@transducer/result'](acc);
	        }
	        function _iterableReduce(xf, acc, iter) {
	            var step = iter.next();
	            while (!step.done) {
	                acc = xf['@@transducer/step'](acc, step.value);
	                if (acc && acc['@@transducer/reduced']) {
	                    acc = acc['@@transducer/value'];
	                    break;
	                }
	                step = iter.next();
	            }
	            return xf['@@transducer/result'](acc);
	        }
	        function _methodReduce(xf, acc, obj) {
	            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
	        }
	        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';
	        return function _reduce(fn, acc, list) {
	            if (typeof fn === 'function') {
	                fn = _xwrap(fn);
	            }
	            if (isArrayLike(list)) {
	                return _arrayReduce(fn, acc, list);
	            }
	            if (typeof list.reduce === 'function') {
	                return _methodReduce(fn, acc, list);
	            }
	            if (list[symIterator] != null) {
	                return _iterableReduce(fn, acc, list[symIterator]());
	            }
	            if (typeof list.next === 'function') {
	                return _iterableReduce(fn, acc, list);
	            }
	            throw new TypeError('reduce: list must be array or iterable');
	        };
	    }();

	    var _stepCat = function () {
	        var _stepCatArray = {
	            '@@transducer/init': Array,
	            '@@transducer/step': function (xs, x) {
	                xs.push(x);
	                return xs;
	            },
	            '@@transducer/result': _identity
	        };
	        var _stepCatString = {
	            '@@transducer/init': String,
	            '@@transducer/step': function (a, b) {
	                return a + b;
	            },
	            '@@transducer/result': _identity
	        };
	        var _stepCatObject = {
	            '@@transducer/init': Object,
	            '@@transducer/step': function (result, input) {
	                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);
	            },
	            '@@transducer/result': _identity
	        };
	        return function _stepCat(obj) {
	            if (_isTransformer(obj)) {
	                return obj;
	            }
	            if (isArrayLike(obj)) {
	                return _stepCatArray;
	            }
	            if (typeof obj === 'string') {
	                return _stepCatString;
	            }
	            if (typeof obj === 'object') {
	                return _stepCatObject;
	            }
	            throw new Error('Cannot create transformer for ' + obj);
	        };
	    }();

	    var _xdropLastWhile = function () {
	        function XDropLastWhile(fn, xf) {
	            this.f = fn;
	            this.retained = [];
	            this.xf = xf;
	        }
	        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XDropLastWhile.prototype['@@transducer/result'] = function (result) {
	            this.retained = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.retain(result, input) : this.flush(result, input);
	        };
	        XDropLastWhile.prototype.flush = function (result, input) {
	            result = _reduce(this.xf['@@transducer/step'], result, this.retained);
	            this.retained = [];
	            return this.xf['@@transducer/step'](result, input);
	        };
	        XDropLastWhile.prototype.retain = function (result, input) {
	            this.retained.push(input);
	            return result;
	        };
	        return _curry2(function _xdropLastWhile(fn, xf) {
	            return new XDropLastWhile(fn, xf);
	        });
	    }();

	    /**
	     * Creates a new list iteration function from an existing one by adding two new
	     * parameters to its callback function: the current index, and the entire list.
	     *
	     * This would turn, for instance, Ramda's simple `map` function into one that
	     * more closely resembles `Array.prototype.map`. Note that this will only work
	     * for functions in which the iteration callback function is the first
	     * parameter, and where the list is the last parameter. (This latter might be
	     * unimportant if the list parameter is not used.)
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Function
	     * @category List
	     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
	     * @param {Function} fn A list iteration function that does not pass index or list to its callback
	     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
	     * @example
	     *
	     *      var mapIndexed = R.addIndex(R.map);
	     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
	     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
	     */
	    var addIndex = _curry1(function addIndex(fn) {
	        return curryN(fn.length, function () {
	            var idx = 0;
	            var origFn = arguments[0];
	            var list = arguments[arguments.length - 1];
	            var args = _slice(arguments);
	            args[0] = function () {
	                var result = origFn.apply(this, _concat(arguments, [
	                    idx,
	                    list
	                ]));
	                idx += 1;
	                return result;
	            };
	            return fn.apply(this, args);
	        });
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly 2 parameters. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Function
	     * @sig (* -> c) -> (a, b -> c)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 2.
	     * @example
	     *
	     *      var takesThreeArgs = function(a, b, c) {
	     *        return [a, b, c];
	     *      };
	     *      takesThreeArgs.length; //=> 3
	     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      var takesTwoArgs = R.binary(takesThreeArgs);
	     *      takesTwoArgs.length; //=> 2
	     *      // Only 2 arguments are passed to the wrapped function
	     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
	     */
	    var binary = _curry1(function binary(fn) {
	        return nAry(2, fn);
	    });

	    /**
	     * Creates a deep copy of the value which may contain (nested) `Array`s and
	     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not
	     * copied, but assigned by their reference.
	     *
	     * Dispatches to a `clone` method if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {*} -> {*}
	     * @param {*} value The object or array to clone
	     * @return {*} A new object or array.
	     * @example
	     *
	     *      var objects = [{}, {}, {}];
	     *      var objectsClone = R.clone(objects);
	     *      objects[0] === objectsClone[0]; //=> false
	     */
	    var clone = _curry1(function clone(value) {
	        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
	    });

	    /**
	     * Returns a curried equivalent of the provided function. The curried function
	     * has two unusual capabilities. First, its arguments needn't be provided one
	     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
	     * following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	     * following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (* -> a) -> (* -> a)
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curryN
	     * @example
	     *
	     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
	     *
	     *      var curriedAddFourNumbers = R.curry(addFourNumbers);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curry = _curry1(function curry(fn) {
	        return curryN(fn.length, fn);
	    });

	    /**
	     * Returns all but the first `n` elements of the given list, string, or
	     * transducer/transformer (or object with a `drop` method).
	     *
	     * Dispatches to the `drop` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n
	     * @param {*} list
	     * @return {*}
	     * @see R.take, R.transduce
	     * @example
	     *
	     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
	     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
	     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
	     *      R.drop(3, 'ramda');               //=> 'da'
	     */
	    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {
	        return slice(Math.max(0, n), Infinity, xs);
	    }));

	    /**
	     * Returns a list containing all but the last `n` elements of the given `list`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n The number of elements of `xs` to skip.
	     * @param {Array} xs The collection to consider.
	     * @return {Array}
	     * @see R.takeLast
	     * @example
	     *
	     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
	     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
	     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
	     *      R.dropLast(3, 'ramda');               //=> 'ra'
	     */
	    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));

	    /**
	     * Returns a new list excluding all the tailing elements of a given list which
	     * satisfy the supplied predicate function. It passes each value from the right
	     * to the supplied predicate function, skipping elements while the predicate
	     * function returns `true`. The predicate function is applied to one argument:
	     * *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.takeLastWhile, R.addIndex
	     * @example
	     *
	     *      var lteThree = x => x <= 3;
	     *
	     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
	     */
	    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));

	    /**
	     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
	     * cyclical data structures.
	     *
	     * Dispatches symmetrically to the `equals` methods of both arguments, if
	     * present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Relation
	     * @sig a -> b -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      R.equals(1, 1); //=> true
	     *      R.equals(1, '1'); //=> false
	     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
	     *
	     *      var a = {}; a.v = a;
	     *      var b = {}; b.v = b;
	     *      R.equals(a, b); //=> true
	     */
	    var equals = _curry2(function equals(a, b) {
	        return _equals(a, b, [], []);
	    });

	    /**
	     * Takes a predicate and a "filterable", and returns a new filterable of the
	     * same type containing the members of the given filterable which satisfy the
	     * given predicate.
	     *
	     * Dispatches to the `filter` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> f a
	     * @param {Function} pred
	     * @param {Array} filterable
	     * @return {Array}
	     * @see R.reject, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *
	     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	     *
	     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	     */
	    // else
	    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {
	        return _isObject(filterable) ? _reduce(function (acc, key) {
	            if (pred(filterable[key])) {
	                acc[key] = filterable[key];
	            }
	            return acc;
	        }, {}, keys(filterable)) : // else
	        _filter(pred, filterable);
	    }));

	    /**
	     * Returns a new list by pulling every item out of it (and all its sub-arrays)
	     * and putting them in a new array, depth-first.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b]
	     * @param {Array} list The array to consider.
	     * @return {Array} The flattened list.
	     * @see R.unnest
	     * @example
	     *
	     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
	     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	     */
	    var flatten = _curry1(_makeFlat(true));

	    /**
	     * Returns a new function much like the supplied one, except that the first two
	     * arguments' order is reversed.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
	     * @param {Function} fn The function to invoke with its first two parameters reversed.
	     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
	     * @example
	     *
	     *      var mergeThree = (a, b, c) => [].concat(a, b, c);
	     *
	     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
	     */
	    var flip = _curry1(function flip(fn) {
	        return curry(function (a, b) {
	            var args = _slice(arguments);
	            args[0] = b;
	            args[1] = a;
	            return fn.apply(this, args);
	        });
	    });

	    /**
	     * Returns the first element of the given list or string. In some libraries
	     * this function is named `first`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> a | Undefined
	     * @sig String -> String
	     * @param {Array|String} list
	     * @return {*}
	     * @see R.tail, R.init, R.last
	     * @example
	     *
	     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
	     *      R.head([]); //=> undefined
	     *
	     *      R.head('abc'); //=> 'a'
	     *      R.head(''); //=> ''
	     */
	    var head = nth(0);

	    /**
	     * Returns all but the last element of the given list or string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.last, R.head, R.tail
	     * @example
	     *
	     *      R.init([1, 2, 3]);  //=> [1, 2]
	     *      R.init([1, 2]);     //=> [1]
	     *      R.init([1]);        //=> []
	     *      R.init([]);         //=> []
	     *
	     *      R.init('abc');  //=> 'ab'
	     *      R.init('ab');   //=> 'a'
	     *      R.init('a');    //=> ''
	     *      R.init('');     //=> ''
	     */
	    var init = slice(0, -1);

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those
	     * elements common to both lists. Duplication is determined according to the
	     * value returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate function that determines whether
	     *        the two supplied elements are equal.
	     * @param {Array} list1 One list of items to compare
	     * @param {Array} list2 A second list of items to compare
	     * @return {Array} A new list containing those elements common to both lists.
	     * @see R.intersection
	     * @example
	     *
	     *      var buffaloSpringfield = [
	     *        {id: 824, name: 'Richie Furay'},
	     *        {id: 956, name: 'Dewey Martin'},
	     *        {id: 313, name: 'Bruce Palmer'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *      var csny = [
	     *        {id: 204, name: 'David Crosby'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 539, name: 'Graham Nash'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *
	     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);
	     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
	     */
	    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {
	        var lookupList, filteredList;
	        if (list1.length > list2.length) {
	            lookupList = list1;
	            filteredList = list2;
	        } else {
	            lookupList = list2;
	            filteredList = list1;
	        }
	        var results = [];
	        var idx = 0;
	        while (idx < filteredList.length) {
	            if (_containsWith(pred, filteredList[idx], lookupList)) {
	                results[results.length] = filteredList[idx];
	            }
	            idx += 1;
	        }
	        return uniqWith(pred, results);
	    });

	    /**
	     * Transforms the items of the list with the transducer and appends the
	     * transformed items to the accumulator using an appropriate iterator function
	     * based on the accumulator type.
	     *
	     * The accumulator can be an array, string, object or a transformer. Iterated
	     * items will be appended to arrays and concatenated to strings. Objects will
	     * be merged directly or 2-item arrays will be merged as key, value pairs.
	     *
	     * The accumulator can also be a transformer object that provides a 2-arity
	     * reducing iterator function, step, 0-arity initial value function, init, and
	     * 1-arity result extraction function result. The step function is used as the
	     * iterator function in reduce. The result function is used to convert the
	     * final accumulator into the return type and in most cases is R.identity. The
	     * init function is used to provide the initial accumulator.
	     *
	     * The iteration is performed with R.reduce after initializing the transducer.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig a -> (b -> b) -> [c] -> a
	     * @param {*} acc The initial accumulator value.
	     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
	     *
	     *      R.into([], transducer, numbers); //=> [2, 3]
	     *
	     *      var intoArray = R.into([]);
	     *      intoArray(transducer, numbers); //=> [2, 3]
	     */
	    var into = _curry3(function into(acc, xf, list) {
	        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
	    });

	    /**
	     * Same as R.invertObj, however this accounts for objects with duplicate values
	     * by putting the values into an array.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {s: x} -> {x: [ s, ... ]}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object with keys
	     * in an array.
	     * @example
	     *
	     *      var raceResultsByFirstName = {
	     *        first: 'alice',
	     *        second: 'jake',
	     *        third: 'alice',
	     *      };
	     *      R.invert(raceResultsByFirstName);
	     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
	     */
	    var invert = _curry1(function invert(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = 0;
	        var out = {};
	        while (idx < len) {
	            var key = props[idx];
	            var val = obj[key];
	            var list = _has(val, out) ? out[val] : out[val] = [];
	            list[list.length] = key;
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new object with the keys of the given object as values, and the
	     * values of the given object, which are coerced to strings, as keys. Note
	     * that the last key found is preferred when handling the same value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {s: x} -> {x: s}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object
	     * @example
	     *
	     *      var raceResults = {
	     *        first: 'alice',
	     *        second: 'jake'
	     *      };
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': 'first', 'jake':'second' }
	     *
	     *      // Alternatively:
	     *      var raceResults = ['alice', 'jake'];
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': '0', 'jake':'1' }
	     */
	    var invertObj = _curry1(function invertObj(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = 0;
	        var out = {};
	        while (idx < len) {
	            var key = props[idx];
	            out[obj[key]] = key;
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns `true` if the given value is its type's empty value; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig a -> Boolean
	     * @param {*} x
	     * @return {Boolean}
	     * @see R.empty
	     * @example
	     *
	     *      R.isEmpty([1, 2, 3]);   //=> false
	     *      R.isEmpty([]);          //=> true
	     *      R.isEmpty('');          //=> true
	     *      R.isEmpty(null);        //=> false
	     *      R.isEmpty({});          //=> true
	     *      R.isEmpty({length: 0}); //=> false
	     */
	    var isEmpty = _curry1(function isEmpty(x) {
	        return x != null && equals(x, empty(x));
	    });

	    /**
	     * Returns the last element of the given list or string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig [a] -> a | Undefined
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.init, R.head, R.tail
	     * @example
	     *
	     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
	     *      R.last([]); //=> undefined
	     *
	     *      R.last('abc'); //=> 'c'
	     *      R.last(''); //=> ''
	     */
	    var last = nth(-1);

	    /**
	     * Returns the position of the last occurrence of an item in an array, or -1 if
	     * the item is not included in the array. `R.equals` is used to determine
	     * equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} xs The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     * @see R.indexOf
	     * @example
	     *
	     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
	     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
	     */
	    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {
	        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
	            return xs.lastIndexOf(target);
	        } else {
	            var idx = xs.length - 1;
	            while (idx >= 0) {
	                if (equals(xs[idx], target)) {
	                    return idx;
	                }
	                idx -= 1;
	            }
	            return -1;
	        }
	    });

	    /**
	     * Takes a function and
	     * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	     * applies the function to each of the functor's values, and returns
	     * a functor of the same shape.
	     *
	     * Ramda provides suitable `map` implementations for `Array` and `Object`,
	     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	     *
	     * Dispatches to the `map` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * Also treats functions as functors and will compose them together.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Functor f => (a -> b) -> f a -> f b
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {Array} list The list to be iterated over.
	     * @return {Array} The new list.
	     * @see R.transduce, R.addIndex
	     * @example
	     *
	     *      var double = x => x * 2;
	     *
	     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	     *
	     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	     */
	    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {
	        switch (Object.prototype.toString.call(functor)) {
	        case '[object Function]':
	            return curryN(functor.length, function () {
	                return fn.call(this, functor.apply(this, arguments));
	            });
	        case '[object Object]':
	            return _reduce(function (acc, key) {
	                acc[key] = fn(functor[key]);
	                return acc;
	            }, {}, keys(functor));
	        default:
	            return _map(fn, functor);
	        }
	    }));

	    /**
	     * An Object-specific version of `map`. The function is applied to three
	     * arguments: *(value, key, obj)*. If only the value is significant, use
	     * `map` instead.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig ((*, String, Object) -> *) -> Object -> Object
	     * @param {Function} fn
	     * @param {Object} obj
	     * @return {Object}
	     * @see R.map
	     * @example
	     *
	     *      var values = { x: 1, y: 2, z: 3 };
	     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
	     *
	     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
	     */
	    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {
	        return _reduce(function (acc, key) {
	            acc[key] = fn(obj[key], key, obj);
	            return acc;
	        }, {}, keys(obj));
	    });

	    /**
	     * Creates a new object with the own properties of the two provided objects. If
	     * a key exists in both objects, the provided function is applied to the values
	     * associated with the key in each object, with the result being used as the
	     * value associated with the key in the returned object. The key will be
	     * excluded from the returned object if the resulting value is `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @sig (a -> a -> a) -> {a} -> {a} -> {a}
	     * @param {Function} fn
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.merge, R.mergeWithKey
	     * @example
	     *
	     *      R.mergeWith(R.concat,
	     *                  { a: true, values: [10, 20] },
	     *                  { b: true, values: [15, 35] });
	     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
	     */
	    var mergeWith = _curry3(function mergeWith(fn, l, r) {
	        return mergeWithKey(function (_, _l, _r) {
	            return fn(_l, _r);
	        }, l, r);
	    });

	    /**
	     * Takes a function `f` and a list of arguments, and returns a function `g`.
	     * When applied, `g` returns the result of applying `f` to the arguments
	     * provided initially followed by the arguments provided to `g`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
	     * @param {Function} f
	     * @param {Array} args
	     * @return {Function}
	     * @see R.partialRight
	     * @example
	     *
	     *      var multiply = (a, b) => a * b;
	     *      var double = R.partial(multiply, [2]);
	     *      double(2); //=> 4
	     *
	     *      var greet = (salutation, title, firstName, lastName) =>
	     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *
	     *      var sayHello = R.partial(greet, ['Hello']);
	     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
	     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partial = _createPartialApplicator(_concat);

	    /**
	     * Takes a function `f` and a list of arguments, and returns a function `g`.
	     * When applied, `g` returns the result of applying `f` to the arguments
	     * provided to `g` followed by the arguments provided initially.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
	     * @param {Function} f
	     * @param {Array} args
	     * @return {Function}
	     * @see R.partial
	     * @example
	     *
	     *      var greet = (salutation, title, firstName, lastName) =>
	     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *
	     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
	     *
	     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partialRight = _createPartialApplicator(flip(_concat));

	    /**
	     * Determines whether a nested path on an object has a specific value, in
	     * `R.equals` terms. Most likely used to filter a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Relation
	     * @sig [String] -> * -> {String: *} -> Boolean
	     * @param {Array} path The path of the nested property to use
	     * @param {*} val The value to compare the nested property with
	     * @param {Object} obj The object to check the nested property in
	     * @return {Boolean} `true` if the value equals the nested object property,
	     *         `false` otherwise.
	     * @example
	     *
	     *      var user1 = { address: { zipCode: 90210 } };
	     *      var user2 = { address: { zipCode: 55555 } };
	     *      var user3 = { name: 'Bob' };
	     *      var users = [ user1, user2, user3 ];
	     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
	     *      R.filter(isFamous, users); //=> [ user1 ]
	     */
	    var pathEq = _curry3(function pathEq(_path, val, obj) {
	        return equals(path(_path, obj), val);
	    });

	    /**
	     * Returns a new list by plucking the same named property off all objects in
	     * the list supplied.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig k -> [{k: v}] -> [v]
	     * @param {Number|String} key The key name to pluck off of each object.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of values for the given key.
	     * @see R.props
	     * @example
	     *
	     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
	     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
	     */
	    var pluck = _curry2(function pluck(p, list) {
	        return map(prop(p), list);
	    });

	    /**
	     * Reasonable analog to SQL `select` statement.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @category Relation
	     * @sig [k] -> [{k: v}] -> [{k: v}]
	     * @param {Array} props The property names to project
	     * @param {Array} objs The objects to query
	     * @return {Array} An array of objects with just the `props` properties.
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
	     *      var kids = [abby, fred];
	     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
	     */
	    // passing `identity` gives correct arity
	    var project = useWith(_map, [
	        pickAll,
	        identity
	    ]);

	    /**
	     * Returns `true` if the specified object property is equal, in `R.equals`
	     * terms, to the given value; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig String -> a -> Object -> Boolean
	     * @param {String} name
	     * @param {*} val
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.equals, R.propSatisfies
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
	     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
	     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
	     *      var kids = [abby, fred, rusty, alois];
	     *      var hasBrownHair = R.propEq('hair', 'brown');
	     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
	     */
	    var propEq = _curry3(function propEq(name, val, obj) {
	        return equals(val, obj[name]);
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling
	     * the iterator function and passing it an accumulator value and the current
	     * value from the array, and then passing the result to the next call.
	     *
	     * The iterator function receives two values: *(acc, value)*. It may use
	     * `R.reduced` to shortcut the iteration.
	     *
	     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.reduce` method. For more details
	     * on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	     *
	     * Dispatches to the `reduce` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig ((a, b) -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduced, R.addIndex
	     * @example
	     *
	     *      var numbers = [1, 2, 3];
	     *      var plus = (a, b) => a + b;
	     *
	     *      R.reduce(plus, 10, numbers); //=> 16
	     */
	    var reduce = _curry3(_reduce);

	    /**
	     * Groups the elements of the list according to the result of calling
	     * the String-returning function `keyFn` on each element and reduces the elements
	     * of each group to a single value via the reducer function `valueFn`.
	     *
	     * This function is basically a more general `groupBy` function.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category List
	     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
	     * @param {Function} valueFn The function that reduces the elements of each group to a single
	     *        value. Receives two values, accumulator for a particular group and the current element.
	     * @param {*} acc The (initial) accumulator value for each group.
	     * @param {Function} keyFn The function that maps the list's element into a key.
	     * @param {Array} list The array to group.
	     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
	     *         `valueFn` for elements which produced that key when passed to `keyFn`.
	     * @see R.groupBy, R.reduce
	     * @example
	     *
	     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
	     *      var namesByGrade = reduceToNamesBy(function(student) {
	     *        var score = student.score;
	     *        return score < 65 ? 'F' :
	     *               score < 70 ? 'D' :
	     *               score < 80 ? 'C' :
	     *               score < 90 ? 'B' : 'A';
	     *      });
	     *      var students = [{name: 'Lucy', score: 92},
	     *                      {name: 'Drew', score: 85},
	     *                      // ...
	     *                      {name: 'Bart', score: 62}];
	     *      namesByGrade(students);
	     *      // {
	     *      //   'A': ['Lucy'],
	     *      //   'B': ['Drew']
	     *      //   // ...,
	     *      //   'F': ['Bart']
	     *      // }
	     */
	    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
	        return _reduce(function (acc, elt) {
	            var key = keyFn(elt);
	            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
	            return acc;
	        }, {}, list);
	    }));

	    /**
	     * Like `reduce`, `reduceWhile` returns a single item by iterating through
	     * the list, successively calling the iterator function. `reduceWhile` also
	     * takes a predicate that is evaluated before each step. If the predicate returns
	     * `false`, it "short-circuits" the iteration and returns the current value
	     * of the accumulator.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.22.0
	     * @category List
	     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
	     * @param {Function} pred The predicate. It is passed the accumulator and the
	     *        current element.
	     * @param {Function} fn The iterator function. Receives two values, the
	     *        accumulator and the current element.
	     * @param {*} a The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduce, R.reduced
	     * @example
	     *
	     *      var isOdd = (acc, x) => x % 2 === 1;
	     *      var xs = [1, 3, 5, 60, 777, 800];
	     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
	     *
	     *      var ys = [2, 4, 6]
	     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
	     */
	    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
	        return _reduce(function (acc, x) {
	            return pred(acc, x) ? fn(acc, x) : _reduced(acc);
	        }, a, list);
	    });

	    /**
	     * The complement of `filter`.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> f a
	     * @param {Function} pred
	     * @param {Array} filterable
	     * @return {Array}
	     * @see R.filter, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isOdd = (n) => n % 2 === 1;
	     *
	     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
	     *
	     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	     */
	    var reject = _curry2(function reject(pred, filterable) {
	        return filter(_complement(pred), filterable);
	    });

	    /**
	     * Returns a fixed list of size `n` containing a specified identical value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig a -> n -> [a]
	     * @param {*} value The value to repeat.
	     * @param {Number} n The desired size of the output list.
	     * @return {Array} A new array containing `n` `value`s.
	     * @example
	     *
	     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
	     *
	     *      var obj = {};
	     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
	     *      repeatedObjs[0] === repeatedObjs[1]; //=> true
	     */
	    var repeat = _curry2(function repeat(value, n) {
	        return times(always(value), n);
	    });

	    /**
	     * Adds together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The sum of all the numbers in the list.
	     * @see R.reduce
	     * @example
	     *
	     *      R.sum([2,4,6,8,100,1]); //=> 121
	     */
	    var sum = reduce(add, 0);

	    /**
	     * Returns a new list containing the last `n` elements of the given list.
	     * If `n > list.length`, returns a list of `list.length` elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n The number of elements to return.
	     * @param {Array} xs The collection to consider.
	     * @return {Array}
	     * @see R.dropLast
	     * @example
	     *
	     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
	     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.takeLast(3, 'ramda');               //=> 'mda'
	     */
	    var takeLast = _curry2(function takeLast(n, xs) {
	        return drop(n >= 0 ? xs.length - n : 0, xs);
	    });

	    /**
	     * Initializes a transducer using supplied iterator function. Returns a single
	     * item by iterating through the list, successively calling the transformed
	     * iterator function and passing it an accumulator value and the current value
	     * from the array, and then passing the result to the next call.
	     *
	     * The iterator function receives two values: *(acc, value)*. It will be
	     * wrapped as a transformer to initialize the transducer. A transformer can be
	     * passed directly in place of an iterator function. In both cases, iteration
	     * may be stopped early with the `R.reduced` function.
	     *
	     * A transducer is a function that accepts a transformer and returns a
	     * transformer and can be composed directly.
	     *
	     * A transformer is an an object that provides a 2-arity reducing iterator
	     * function, step, 0-arity initial value function, init, and 1-arity result
	     * extraction function, result. The step function is used as the iterator
	     * function in reduce. The result function is used to convert the final
	     * accumulator into the return type and in most cases is R.identity. The init
	     * function can be used to provide an initial accumulator, but is ignored by
	     * transduce.
	     *
	     * The iteration is performed with R.reduce after initializing the transducer.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a
	     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array. Wrapped as transformer, if necessary, and used to
	     *        initialize the transducer
	     * @param {*} acc The initial accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduce, R.reduced, R.into
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
	     *
	     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
	     */
	    var transduce = curryN(4, function transduce(xf, fn, acc, list) {
	        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the elements
	     * of each list. Duplication is determined according to the value returned by
	     * applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @see R.union
	     * @example
	     *
	     *      var l1 = [{a: 1}, {a: 2}];
	     *      var l2 = [{a: 1}, {a: 4}];
	     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
	     */
	    var unionWith = _curry3(function unionWith(pred, list1, list2) {
	        return uniqWith(pred, _concat(list1, list2));
	    });

	    /**
	     * Takes a spec object and a test object; returns true if the test satisfies
	     * the spec, false otherwise. An object satisfies the spec if, for each of the
	     * spec's own properties, accessing that property of the object gives the same
	     * value (in `R.equals` terms) as accessing that property of the spec.
	     *
	     * `whereEq` is a specialization of [`where`](#where).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @sig {String: *} -> {String: *} -> Boolean
	     * @param {Object} spec
	     * @param {Object} testObj
	     * @return {Boolean}
	     * @see R.where
	     * @example
	     *
	     *      // pred :: Object -> Boolean
	     *      var pred = R.whereEq({a: 1, b: 2});
	     *
	     *      pred({a: 1});              //=> false
	     *      pred({a: 1, b: 2});        //=> true
	     *      pred({a: 1, b: 2, c: 3});  //=> true
	     *      pred({a: 1, b: 1});        //=> false
	     */
	    var whereEq = _curry2(function whereEq(spec, testObj) {
	        return where(map(equals, spec), testObj);
	    });

	    var _flatCat = function () {
	        var preservingReduced = function (xf) {
	            return {
	                '@@transducer/init': _xfBase.init,
	                '@@transducer/result': function (result) {
	                    return xf['@@transducer/result'](result);
	                },
	                '@@transducer/step': function (result, input) {
	                    var ret = xf['@@transducer/step'](result, input);
	                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
	                }
	            };
	        };
	        return function _xcat(xf) {
	            var rxf = preservingReduced(xf);
	            return {
	                '@@transducer/init': _xfBase.init,
	                '@@transducer/result': function (result) {
	                    return rxf['@@transducer/result'](result);
	                },
	                '@@transducer/step': function (result, input) {
	                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
	                }
	            };
	        };
	    }();

	    // Array.prototype.indexOf doesn't exist below IE9
	    // manually crawl the list to distinguish between +0 and -0
	    // NaN
	    // non-zero numbers can utilise Set
	    // all these types can utilise Set
	    // null can utilise Set
	    // anything else not covered above, defer to R.equals
	    var _indexOf = function _indexOf(list, a, idx) {
	        var inf, item;
	        // Array.prototype.indexOf doesn't exist below IE9
	        if (typeof list.indexOf === 'function') {
	            switch (typeof a) {
	            case 'number':
	                if (a === 0) {
	                    // manually crawl the list to distinguish between +0 and -0
	                    inf = 1 / a;
	                    while (idx < list.length) {
	                        item = list[idx];
	                        if (item === 0 && 1 / item === inf) {
	                            return idx;
	                        }
	                        idx += 1;
	                    }
	                    return -1;
	                } else if (a !== a) {
	                    // NaN
	                    while (idx < list.length) {
	                        item = list[idx];
	                        if (typeof item === 'number' && item !== item) {
	                            return idx;
	                        }
	                        idx += 1;
	                    }
	                    return -1;
	                }
	                // non-zero numbers can utilise Set
	                return list.indexOf(a, idx);
	            // all these types can utilise Set
	            case 'string':
	            case 'boolean':
	            case 'function':
	            case 'undefined':
	                return list.indexOf(a, idx);
	            case 'object':
	                if (a === null) {
	                    // null can utilise Set
	                    return list.indexOf(a, idx);
	                }
	            }
	        }
	        // anything else not covered above, defer to R.equals
	        while (idx < list.length) {
	            if (equals(list[idx], a)) {
	                return idx;
	            }
	            idx += 1;
	        }
	        return -1;
	    };

	    var _xchain = _curry2(function _xchain(f, xf) {
	        return map(f, _flatCat(xf));
	    });

	    /**
	     * Takes a list of predicates and returns a predicate that returns true for a
	     * given list of arguments if every one of the provided predicates is satisfied
	     * by those arguments.
	     *
	     * The function returned is a curried function whose arity matches that of the
	     * highest-arity predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} preds
	     * @return {Function}
	     * @see R.anyPass
	     * @example
	     *
	     *      var isQueen = R.propEq('rank', 'Q');
	     *      var isSpade = R.propEq('suit', '♠︎');
	     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
	     *
	     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
	     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
	     */
	    var allPass = _curry1(function allPass(preds) {
	        return curryN(reduce(max, 0, pluck('length', preds)), function () {
	            var idx = 0;
	            var len = preds.length;
	            while (idx < len) {
	                if (!preds[idx].apply(this, arguments)) {
	                    return false;
	                }
	                idx += 1;
	            }
	            return true;
	        });
	    });

	    /**
	     * Takes a list of predicates and returns a predicate that returns true for a
	     * given list of arguments if at least one of the provided predicates is
	     * satisfied by those arguments.
	     *
	     * The function returned is a curried function whose arity matches that of the
	     * highest-arity predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} preds
	     * @return {Function}
	     * @see R.allPass
	     * @example
	     *
	     *      var gte = R.anyPass([R.gt, R.equals]);
	     *
	     *      gte(3, 2); //=> true
	     *      gte(2, 2); //=> true
	     *      gte(2, 3); //=> false
	     */
	    var anyPass = _curry1(function anyPass(preds) {
	        return curryN(reduce(max, 0, pluck('length', preds)), function () {
	            var idx = 0;
	            var len = preds.length;
	            while (idx < len) {
	                if (preds[idx].apply(this, arguments)) {
	                    return true;
	                }
	                idx += 1;
	            }
	            return false;
	        });
	    });

	    /**
	     * ap applies a list of functions to a list of values.
	     *
	     * Dispatches to the `ap` method of the second argument, if present. Also
	     * treats curried functions as applicatives.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig [a -> b] -> [a] -> [b]
	     * @sig Apply f => f (a -> b) -> f a -> f b
	     * @param {Array} fns An array of functions
	     * @param {Array} vs An array of values
	     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.
	     * @example
	     *
	     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
	     */
	    // else
	    var ap = _curry2(function ap(applicative, fn) {
	        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {
	            return applicative(x)(fn(x));
	        } : // else
	        _reduce(function (acc, f) {
	            return _concat(acc, map(f, fn));
	        }, [], applicative);
	    });

	    /**
	     * Given a spec object recursively mapping properties to functions, creates a
	     * function producing an object of the same structure, by mapping each property
	     * to the result of calling its associated function with the supplied arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Function
	     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
	     * @param {Object} spec an object recursively mapping properties to functions for
	     *        producing the values for these properties.
	     * @return {Function} A function that returns an object of the same structure
	     * as `spec', with each property set to the value returned by calling its
	     * associated function with the supplied arguments.
	     * @see R.converge, R.juxt
	     * @example
	     *
	     *      var getMetrics = R.applySpec({
	     *                                      sum: R.add,
	     *                                      nested: { mul: R.multiply }
	     *                                   });
	     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
	     */
	    var applySpec = _curry1(function applySpec(spec) {
	        spec = map(function (v) {
	            return typeof v == 'function' ? v : applySpec(v);
	        }, spec);
	        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
	            var args = arguments;
	            return map(function (f) {
	                return apply(f, args);
	            }, spec);
	        });
	    });

	    /**
	     * Returns the result of calling its first argument with the remaining
	     * arguments. This is occasionally useful as a converging function for
	     * `R.converge`: the left branch can produce a function while the right branch
	     * produces a value to be passed to that function as an argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig (*... -> a),*... -> a
	     * @param {Function} fn The function to apply to the remaining arguments.
	     * @param {...*} args Any number of positional arguments.
	     * @return {*}
	     * @see R.apply
	     * @example
	     *
	     *      var indentN = R.pipe(R.times(R.always(' ')),
	     *                           R.join(''),
	     *                           R.replace(/^(?!$)/gm));
	     *
	     *      var format = R.converge(R.call, [
	     *                                  R.pipe(R.prop('indent'), indentN),
	     *                                  R.prop('value')
	     *                              ]);
	     *
	     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
	     */
	    var call = curry(function call(fn) {
	        return fn.apply(this, _slice(arguments, 1));
	    });

	    /**
	     * `chain` maps a function over a list and concatenates the results. `chain`
	     * is also known as `flatMap` in some libraries
	     *
	     * Dispatches to the `chain` method of the second argument, if present,
	     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig Chain m => (a -> m b) -> m a -> m b
	     * @param {Function} fn
	     * @param {Array} list
	     * @return {Array}
	     * @example
	     *
	     *      var duplicate = n => [n, n];
	     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
	     */
	    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {
	        if (typeof monad === 'function') {
	            return function () {
	                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);
	            };
	        }
	        return _makeFlat(false)(map(fn, monad));
	    }));

	    /**
	     * Returns a function, `fn`, which encapsulates if/else-if/else logic.
	     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments
	     * to `fn` are applied to each of the predicates in turn until one returns a
	     * "truthy" value, at which point `fn` returns the result of applying its
	     * arguments to the corresponding transformer. If none of the predicates
	     * matches, `fn` returns undefined.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Logic
	     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
	     * @param {Array} pairs
	     * @return {Function}
	     * @example
	     *
	     *      var fn = R.cond([
	     *        [R.equals(0),   R.always('water freezes at 0°C')],
	     *        [R.equals(100), R.always('water boils at 100°C')],
	     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
	     *      ]);
	     *      fn(0); //=> 'water freezes at 0°C'
	     *      fn(50); //=> 'nothing special happens at 50°C'
	     *      fn(100); //=> 'water boils at 100°C'
	     */
	    var cond = _curry1(function cond(pairs) {
	        var arity = reduce(max, 0, map(function (pair) {
	            return pair[0].length;
	        }, pairs));
	        return _arity(arity, function () {
	            var idx = 0;
	            while (idx < pairs.length) {
	                if (pairs[idx][0].apply(this, arguments)) {
	                    return pairs[idx][1].apply(this, arguments);
	                }
	                idx += 1;
	            }
	        });
	    });

	    /**
	     * Wraps a constructor function inside a curried function that can be called
	     * with the same arguments and returns the same type. The arity of the function
	     * returned is specified to allow using variadic constructor functions.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Function
	     * @sig Number -> (* -> {*}) -> (* -> {*})
	     * @param {Number} n The arity of the constructor function.
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Variadic constructor function
	     *      var Widget = () => {
	     *        this.children = Array.prototype.slice.call(arguments);
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = [
	     *        // ...
	     *      ];
	     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets
	     */
	    var constructN = _curry2(function constructN(n, Fn) {
	        if (n > 10) {
	            throw new Error('Constructor with greater than ten arguments');
	        }
	        if (n === 0) {
	            return function () {
	                return new Fn();
	            };
	        }
	        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
	            switch (arguments.length) {
	            case 1:
	                return new Fn($0);
	            case 2:
	                return new Fn($0, $1);
	            case 3:
	                return new Fn($0, $1, $2);
	            case 4:
	                return new Fn($0, $1, $2, $3);
	            case 5:
	                return new Fn($0, $1, $2, $3, $4);
	            case 6:
	                return new Fn($0, $1, $2, $3, $4, $5);
	            case 7:
	                return new Fn($0, $1, $2, $3, $4, $5, $6);
	            case 8:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
	            case 9:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
	            case 10:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
	            }
	        }));
	    });

	    /**
	     * Accepts a converging function and a list of branching functions and returns
	     * a new function. When invoked, this new function is applied to some
	     * arguments, each branching function is applied to those same arguments. The
	     * results of each branching function are passed as arguments to the converging
	     * function to produce the return value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.2
	     * @category Function
	     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
	     * @param {Function} after A function. `after` will be invoked with the return values of
	     *        `fn1` and `fn2` as its arguments.
	     * @param {Array} functions A list of functions.
	     * @return {Function} A new function.
	     * @example
	     *
	     *      var add = (a, b) => a + b;
	     *      var multiply = (a, b) => a * b;
	     *      var subtract = (a, b) => a - b;
	     *
	     *      //≅ multiply( add(1, 2), subtract(1, 2) );
	     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3
	     *
	     *      var add3 = (a, b, c) => a + b + c;
	     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4
	     */
	    var converge = _curry2(function converge(after, fns) {
	        return curryN(reduce(max, 0, pluck('length', fns)), function () {
	            var args = arguments;
	            var context = this;
	            return after.apply(context, _map(function (fn) {
	                return fn.apply(context, args);
	            }, fns));
	        });
	    });

	    /**
	     * Counts the elements of a list according to how many match each value of a
	     * key generated by the supplied function. Returns an object mapping the keys
	     * produced by `fn` to the number of occurrences in the list. Note that all
	     * keys are coerced to strings because of how JavaScript objects work.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> String) -> [a] -> {*}
	     * @param {Function} fn The function used to map values to keys.
	     * @param {Array} list The list to count elements from.
	     * @return {Object} An object mapping keys to number of occurrences in the list.
	     * @example
	     *
	     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
	     *      var letters = R.split('', 'abcABCaaaBBc');
	     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
	     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}
	     */
	    var countBy = reduceBy(function (acc, elem) {
	        return acc + 1;
	    }, 0);

	    /**
	     * Returns a new list without any consecutively repeating elements. Equality is
	     * determined by applying the supplied predicate two consecutive elements. The
	     * first element in a series of equal element is the one being preserved.
	     *
	     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig (a, a -> Boolean) -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list The array to consider.
	     * @return {Array} `list` without repeating elements.
	     * @see R.transduce
	     * @example
	     *
	     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
	     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
	     */
	    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
	        var result = [];
	        var idx = 1;
	        var len = list.length;
	        if (len !== 0) {
	            result[0] = list[0];
	            while (idx < len) {
	                if (!pred(last(result), list[idx])) {
	                    result[result.length] = list[idx];
	                }
	                idx += 1;
	            }
	        }
	        return result;
	    }));

	    /**
	     * Takes a function and two values in its domain and returns `true` if the
	     * values map to the same value in the codomain; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Relation
	     * @sig (a -> b) -> a -> a -> Boolean
	     * @param {Function} f
	     * @param {*} x
	     * @param {*} y
	     * @return {Boolean}
	     * @example
	     *
	     *      R.eqBy(Math.abs, 5, -5); //=> true
	     */
	    var eqBy = _curry3(function eqBy(f, x, y) {
	        return equals(f(x), f(y));
	    });

	    /**
	     * Reports whether two objects have the same value, in `R.equals` terms, for
	     * the specified property. Useful as a curried predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig k -> {k: v} -> {k: v} -> Boolean
	     * @param {String} prop The name of the property to compare
	     * @param {Object} obj1
	     * @param {Object} obj2
	     * @return {Boolean}
	     *
	     * @example
	     *
	     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
	     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
	     *      R.eqProps('a', o1, o2); //=> false
	     *      R.eqProps('c', o1, o2); //=> true
	     */
	    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {
	        return equals(obj1[prop], obj2[prop]);
	    });

	    /**
	     * Splits a list into sub-lists stored in an object, based on the result of
	     * calling a String-returning function on each element, and grouping the
	     * results according to values returned.
	     *
	     * Dispatches to the `groupBy` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> String) -> [a] -> {String: [a]}
	     * @param {Function} fn Function :: a -> String
	     * @param {Array} list The array to group
	     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
	     *         that produced that key when passed to `fn`.
	     * @see R.transduce
	     * @example
	     *
	     *      var byGrade = R.groupBy(function(student) {
	     *        var score = student.score;
	     *        return score < 65 ? 'F' :
	     *               score < 70 ? 'D' :
	     *               score < 80 ? 'C' :
	     *               score < 90 ? 'B' : 'A';
	     *      });
	     *      var students = [{name: 'Abby', score: 84},
	     *                      {name: 'Eddy', score: 58},
	     *                      // ...
	     *                      {name: 'Jack', score: 69}];
	     *      byGrade(students);
	     *      // {
	     *      //   'A': [{name: 'Dianne', score: 99}],
	     *      //   'B': [{name: 'Abby', score: 84}]
	     *      //   // ...,
	     *      //   'F': [{name: 'Eddy', score: 58}]
	     *      // }
	     */
	    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {
	        if (acc == null) {
	            acc = [];
	        }
	        acc.push(item);
	        return acc;
	    }, null)));

	    /**
	     * Given a function that generates a key, turns a list of objects into an
	     * object indexing the objects by the given key. Note that if multiple
	     * objects generate the same value for the indexing key only the last value
	     * will be included in the generated object.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
	     * @param {Function} fn Function :: a -> String
	     * @param {Array} array The array of objects to index
	     * @return {Object} An object indexing each array element by the given property.
	     * @example
	     *
	     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
	     *      R.indexBy(R.prop('id'), list);
	     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
	     */
	    var indexBy = reduceBy(function (acc, elem) {
	        return elem;
	    }, null);

	    /**
	     * Returns the position of the first occurrence of an item in an array, or -1
	     * if the item is not included in the array. `R.equals` is used to determine
	     * equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} xs The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     * @see R.lastIndexOf
	     * @example
	     *
	     *      R.indexOf(3, [1,2,3,4]); //=> 2
	     *      R.indexOf(10, [1,2,3,4]); //=> -1
	     */
	    var indexOf = _curry2(function indexOf(target, xs) {
	        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
	    });

	    /**
	     * juxt applies a list of functions to a list of values.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Function
	     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
	     * @param {Array} fns An array of functions
	     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
	     * @see R.applySpec
	     * @example
	     *
	     *      var getRange = R.juxt([Math.min, Math.max]);
	     *      getRange(3, 4, 9, -3); //=> [-3, 9]
	     */
	    var juxt = _curry1(function juxt(fns) {
	        return converge(_arrayOf, fns);
	    });

	    /**
	     * Returns a lens for the given getter and setter functions. The getter "gets"
	     * the value of the focus; the setter "sets" the value of the focus. The setter
	     * should not mutate the data structure.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
	     * @param {Function} getter
	     * @param {Function} setter
	     * @return {Lens}
	     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
	     *
	     *      R.view(xLens, {x: 1, y: 2});            //=> 1
	     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	     */
	    var lens = _curry2(function lens(getter, setter) {
	        return function (toFunctorFn) {
	            return function (target) {
	                return map(function (focus) {
	                    return setter(focus, target);
	                }, toFunctorFn(getter(target)));
	            };
	        };
	    });

	    /**
	     * Returns a lens whose focus is the specified index.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Number -> Lens s a
	     * @param {Number} n
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var headLens = R.lensIndex(0);
	     *
	     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
	     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
	     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
	     */
	    var lensIndex = _curry1(function lensIndex(n) {
	        return lens(nth(n), update(n));
	    });

	    /**
	     * Returns a lens whose focus is the specified path.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig [String] -> Lens s a
	     * @param {Array} path The path to use.
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var xyLens = R.lensPath(['x', 'y']);
	     *
	     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2
	     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}
	     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}
	     */
	    var lensPath = _curry1(function lensPath(p) {
	        return lens(path(p), assocPath(p));
	    });

	    /**
	     * Returns a lens whose focus is the specified property.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig String -> Lens s a
	     * @param {String} k
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.view(xLens, {x: 1, y: 2});            //=> 1
	     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	     */
	    var lensProp = _curry1(function lensProp(k) {
	        return lens(prop(k), assoc(k));
	    });

	    /**
	     * "lifts" a function to be the specified arity, so that it may "map over" that
	     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig Number -> (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The lifted function.
	     * @see R.lift, R.ap
	     * @example
	     *
	     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));
	     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     */
	    var liftN = _curry2(function liftN(arity, fn) {
	        var lifted = curryN(arity, fn);
	        return curryN(arity, function () {
	            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));
	        });
	    });

	    /**
	     * Returns the mean of the given list of numbers.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list
	     * @return {Number}
	     * @example
	     *
	     *      R.mean([2, 7, 9]); //=> 6
	     *      R.mean([]); //=> NaN
	     */
	    var mean = _curry1(function mean(list) {
	        return sum(list) / list.length;
	    });

	    /**
	     * Returns the median of the given list of numbers.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list
	     * @return {Number}
	     * @example
	     *
	     *      R.median([2, 9, 7]); //=> 7
	     *      R.median([7, 2, 10, 9]); //=> 8
	     *      R.median([]); //=> NaN
	     */
	    var median = _curry1(function median(list) {
	        var len = list.length;
	        if (len === 0) {
	            return NaN;
	        }
	        var width = 2 - len % 2;
	        var idx = (len - width) / 2;
	        return mean(_slice(list).sort(function (a, b) {
	            return a < b ? -1 : a > b ? 1 : 0;
	        }).slice(idx, idx + width));
	    });

	    /**
	     * Takes a predicate and a list or other "filterable" object and returns the
	     * pair of filterable objects of the same type of elements which do and do not
	     * satisfy, the predicate, respectively.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
	     * @param {Function} pred A predicate to determine which side the element belongs to.
	     * @param {Array} filterable the list (or other filterable) to partition.
	     * @return {Array} An array, containing first the subset of elements that satisfy the
	     *         predicate, and second the subset of elements that do not satisfy.
	     * @see R.filter, R.reject
	     * @example
	     *
	     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
	     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
	     *
	     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
	     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
	     */
	    var partition = juxt([
	        filter,
	        reject
	    ]);

	    /**
	     * Performs left-to-right function composition. The leftmost function may have
	     * any arity; the remaining functions must be unary.
	     *
	     * In some libraries this function is named `sequence`.
	     *
	     * **Note:** The result of pipe is not automatically curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.compose
	     * @example
	     *
	     *      var f = R.pipe(Math.pow, R.negate, R.inc);
	     *
	     *      f(3, 4); // -(3^4) + 1
	     */
	    var pipe = function pipe() {
	        if (arguments.length === 0) {
	            throw new Error('pipe requires at least one argument');
	        }
	        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
	    };

	    /**
	     * Performs left-to-right composition of one or more Promise-returning
	     * functions. The leftmost function may have any arity; the remaining functions
	     * must be unary.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.composeP
	     * @example
	     *
	     *      //  followersForUser :: String -> Promise [User]
	     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
	     */
	    var pipeP = function pipeP() {
	        if (arguments.length === 0) {
	            throw new Error('pipeP requires at least one argument');
	        }
	        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
	    };

	    /**
	     * Multiplies together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The product of all the numbers in the list.
	     * @see R.reduce
	     * @example
	     *
	     *      R.product([2,4,6,8,100,1]); //=> 38400
	     */
	    var product = reduce(multiply, 1);

	    /**
	     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
	     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
	     * Applicative of Traversable.
	     *
	     * Dispatches to the `sequence` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
	     * @param {Function} of
	     * @param {*} traversable
	     * @return {*}
	     * @see R.traverse
	     * @example
	     *
	     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
	     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
	     *
	     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
	     *      R.sequence(R.of, Nothing());       //=> [Nothing()]
	     */
	    var sequence = _curry2(function sequence(of, traversable) {
	        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {
	            return ap(map(prepend, x), acc);
	        }, of([]), traversable);
	    });

	    /**
	     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
	     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
	     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
	     * into an Applicative of Traversable.
	     *
	     * Dispatches to the `sequence` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
	     * @param {Function} of
	     * @param {Function} f
	     * @param {*} traversable
	     * @return {*}
	     * @see R.sequence
	     * @example
	     *
	     *      // Returns `Nothing` if the given divisor is `0`
	     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
	     *
	     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
	     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
	     */
	    var traverse = _curry3(function traverse(of, f, traversable) {
	        return sequence(of, map(f, traversable));
	    });

	    /**
	     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
	     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig Chain c => c (c a) -> c a
	     * @param {*} list
	     * @return {*}
	     * @see R.flatten, R.chain
	     * @example
	     *
	     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
	     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
	     */
	    var unnest = chain(_identity);

	    var _contains = function _contains(a, list) {
	        return _indexOf(list, a, 0) >= 0;
	    };

	    //  mapPairs :: (Object, [String]) -> [String]
	    var _toString = function _toString(x, seen) {
	        var recur = function recur(y) {
	            var xs = seen.concat([x]);
	            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
	        };
	        //  mapPairs :: (Object, [String]) -> [String]
	        var mapPairs = function (obj, keys) {
	            return _map(function (k) {
	                return _quote(k) + ': ' + recur(obj[k]);
	            }, keys.slice().sort());
	        };
	        switch (Object.prototype.toString.call(x)) {
	        case '[object Arguments]':
	            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
	        case '[object Array]':
	            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
	                return /^\d+$/.test(k);
	            }, keys(x)))).join(', ') + ']';
	        case '[object Boolean]':
	            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
	        case '[object Date]':
	            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
	        case '[object Null]':
	            return 'null';
	        case '[object Number]':
	            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
	        case '[object String]':
	            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
	        case '[object Undefined]':
	            return 'undefined';
	        default:
	            if (typeof x.toString === 'function') {
	                var repr = x.toString();
	                if (repr !== '[object Object]') {
	                    return repr;
	                }
	            }
	            return '{' + mapPairs(x, keys(x)).join(', ') + '}';
	        }
	    };

	    /**
	     * Performs right-to-left function composition. The rightmost function may have
	     * any arity; the remaining functions must be unary.
	     *
	     * **Note:** The result of compose is not automatically curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.pipe
	     * @example
	     *
	     *      var f = R.compose(R.inc, R.negate, Math.pow);
	     *
	     *      f(3, 4); // -(3^4) + 1
	     */
	    var compose = function compose() {
	        if (arguments.length === 0) {
	            throw new Error('compose requires at least one argument');
	        }
	        return pipe.apply(this, reverse(arguments));
	    };

	    /**
	     * Returns the right-to-left Kleisli composition of the provided functions,
	     * each of which must return a value of a type supported by [`chain`](#chain).
	     *
	     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Function
	     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)
	     * @param {...Function}
	     * @return {Function}
	     * @see R.pipeK
	     * @example
	     *
	     *      //  parseJson :: String -> Maybe *
	     *      //  get :: String -> Object -> Maybe *
	     *
	     *      //  getStateCode :: Maybe String -> Maybe String
	     *      var getStateCode = R.composeK(
	     *        R.compose(Maybe.of, R.toUpper),
	     *        get('state'),
	     *        get('address'),
	     *        get('user'),
	     *        parseJson
	     *      );
	     *
	     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));
	     *      //=> Just('NY')
	     *      getStateCode(Maybe.of('[Invalid JSON]'));
	     *      //=> Nothing()
	     */
	    var composeK = function composeK() {
	        return compose.apply(this, prepend(identity, map(chain, arguments)));
	    };

	    /**
	     * Performs right-to-left composition of one or more Promise-returning
	     * functions. The rightmost function may have any arity; the remaining
	     * functions must be unary.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.pipeP
	     * @example
	     *
	     *      //  followersForUser :: String -> Promise [User]
	     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);
	     */
	    var composeP = function composeP() {
	        if (arguments.length === 0) {
	            throw new Error('composeP requires at least one argument');
	        }
	        return pipeP.apply(this, reverse(arguments));
	    };

	    /**
	     * Wraps a constructor function inside a curried function that can be called
	     * with the same arguments and returns the same type.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (* -> {*}) -> (* -> {*})
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Constructor function
	     *      var Widget = config => {
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = [
	     *        // ...
	     *      ];
	     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets
	     */
	    var construct = _curry1(function construct(Fn) {
	        return constructN(Fn.length, Fn);
	    });

	    /**
	     * Returns `true` if the specified value is equal, in `R.equals` terms, to at
	     * least one element of the given list; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Boolean
	     * @param {Object} a The item to compare against.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the item is in the list, `false` otherwise.
	     * @see R.any
	     * @example
	     *
	     *      R.contains(3, [1, 2, 3]); //=> true
	     *      R.contains(4, [1, 2, 3]); //=> false
	     *      R.contains([42], [[42]]); //=> true
	     */
	    var contains = _curry2(_contains);

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not
	     * contained in the second list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith
	     * @example
	     *
	     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
	     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
	     */
	    var difference = _curry2(function difference(first, second) {
	        var out = [];
	        var idx = 0;
	        var firstLen = first.length;
	        while (idx < firstLen) {
	            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
	                out[out.length] = first[idx];
	            }
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new list without any consecutively repeating elements. `R.equals`
	     * is used to determine equality.
	     *
	     * Dispatches to the `dropRepeats` method of the first argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} `list` without repeating elements.
	     * @see R.transduce
	     * @example
	     *
	     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
	     */
	    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));

	    /**
	     * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
	     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The lifted function.
	     * @see R.liftN
	     * @example
	     *
	     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));
	     *
	     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     *
	     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));
	     *
	     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
	     */
	    var lift = _curry1(function lift(fn) {
	        return liftN(fn.length, fn);
	    });

	    /**
	     * Returns a partial copy of an object omitting the keys specified.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [String] -> {String: *} -> {String: *}
	     * @param {Array} names an array of String property names to omit from the new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with properties from `names` not on it.
	     * @see R.pick
	     * @example
	     *
	     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
	     */
	    var omit = _curry2(function omit(names, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (!_contains(prop, names)) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns the left-to-right Kleisli composition of the provided functions,
	     * each of which must return a value of a type supported by [`chain`](#chain).
	     *
	     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Function
	     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)
	     * @param {...Function}
	     * @return {Function}
	     * @see R.composeK
	     * @example
	     *
	     *      //  parseJson :: String -> Maybe *
	     *      //  get :: String -> Object -> Maybe *
	     *
	     *      //  getStateCode :: Maybe String -> Maybe String
	     *      var getStateCode = R.pipeK(
	     *        parseJson,
	     *        get('user'),
	     *        get('address'),
	     *        get('state'),
	     *        R.compose(Maybe.of, R.toUpper)
	     *      );
	     *
	     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));
	     *      //=> Just('NY')
	     *      getStateCode(Maybe.of('[Invalid JSON]'));
	     *      //=> Nothing()
	     */
	    var pipeK = function pipeK() {
	        return composeK.apply(this, reverse(arguments));
	    };

	    /**
	     * Returns the string representation of the given value. `eval`'ing the output
	     * should result in a value equivalent to the input value. Many of the built-in
	     * `toString` methods do not satisfy this requirement.
	     *
	     * If the given value is an `[object Object]` with a `toString` method other
	     * than `Object.prototype.toString`, this method is invoked with no arguments
	     * to produce the return value. This means user-defined constructor functions
	     * can provide a suitable `toString` method. For example:
	     *
	     *     function Point(x, y) {
	     *       this.x = x;
	     *       this.y = y;
	     *     }
	     *
	     *     Point.prototype.toString = function() {
	     *       return 'new Point(' + this.x + ', ' + this.y + ')';
	     *     };
	     *
	     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category String
	     * @sig * -> String
	     * @param {*} val
	     * @return {String}
	     * @example
	     *
	     *      R.toString(42); //=> '42'
	     *      R.toString('abc'); //=> '"abc"'
	     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
	     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
	     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
	     */
	    var toString = _curry1(function toString(val) {
	        return _toString(val, []);
	    });

	    /**
	     * Returns a new list without values in the first argument.
	     * `R.equals` is used to determine equality.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} list1 The values to be removed from `list2`.
	     * @param {Array} list2 The array to remove values from.
	     * @return {Array} The new array without values in `list1`.
	     * @see R.transduce
	     * @example
	     *
	     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
	     */
	    var without = _curry2(function (xs, list) {
	        return reject(flip(_contains)(xs), list);
	    });

	    // A simple Set type that honours R.equals semantics
	    /* globals Set */
	    // until we figure out why jsdoc chokes on this
	    // @param item The item to add to the Set
	    // @returns {boolean} true if the item did not exist prior, otherwise false
	    //
	    //
	    // @param item The item to check for existence in the Set
	    // @returns {boolean} true if the item exists in the Set, otherwise false
	    //
	    //
	    // Combines the logic for checking whether an item is a member of the set and
	    // for adding a new item to the set.
	    //
	    // @param item       The item to check or add to the Set instance.
	    // @param shouldAdd  If true, the item will be added to the set if it doesn't
	    //                   already exist.
	    // @param set        The set instance to check or add to.
	    // @return {boolean} true if the item already existed, otherwise false.
	    //
	    // distinguish between +0 and -0
	    // these types can all utilise the native Set
	    // set._items['boolean'] holds a two element array
	    // representing [ falseExists, trueExists ]
	    // compare functions for reference equality
	    /* falls through */
	    // reduce the search size of heterogeneous sets by creating buckets
	    // for each type.
	    // scan through all previously applied items
	    var _Set = function () {
	        function _Set() {
	            /* globals Set */
	            this._nativeSet = typeof Set === 'function' ? new Set() : null;
	            this._items = {};
	        }
	        // until we figure out why jsdoc chokes on this
	        // @param item The item to add to the Set
	        // @returns {boolean} true if the item did not exist prior, otherwise false
	        //
	        _Set.prototype.add = function (item) {
	            return !hasOrAdd(item, true, this);
	        };
	        //
	        // @param item The item to check for existence in the Set
	        // @returns {boolean} true if the item exists in the Set, otherwise false
	        //
	        _Set.prototype.has = function (item) {
	            return hasOrAdd(item, false, this);
	        };
	        //
	        // Combines the logic for checking whether an item is a member of the set and
	        // for adding a new item to the set.
	        //
	        // @param item       The item to check or add to the Set instance.
	        // @param shouldAdd  If true, the item will be added to the set if it doesn't
	        //                   already exist.
	        // @param set        The set instance to check or add to.
	        // @return {boolean} true if the item already existed, otherwise false.
	        //
	        function hasOrAdd(item, shouldAdd, set) {
	            var type = typeof item;
	            var prevSize, newSize;
	            switch (type) {
	            case 'string':
	            case 'number':
	                // distinguish between +0 and -0
	                if (item === 0 && 1 / item === -Infinity) {
	                    if (set._items['-0']) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items['-0'] = true;
	                        }
	                        return false;
	                    }
	                }
	                // these types can all utilise the native Set
	                if (set._nativeSet !== null) {
	                    if (shouldAdd) {
	                        prevSize = set._nativeSet.size;
	                        set._nativeSet.add(item);
	                        newSize = set._nativeSet.size;
	                        return newSize === prevSize;
	                    } else {
	                        return set._nativeSet.has(item);
	                    }
	                } else {
	                    if (!(type in set._items)) {
	                        if (shouldAdd) {
	                            set._items[type] = {};
	                            set._items[type][item] = true;
	                        }
	                        return false;
	                    } else if (item in set._items[type]) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items[type][item] = true;
	                        }
	                        return false;
	                    }
	                }
	            case 'boolean':
	                // set._items['boolean'] holds a two element array
	                // representing [ falseExists, trueExists ]
	                if (type in set._items) {
	                    var bIdx = item ? 1 : 0;
	                    if (set._items[type][bIdx]) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items[type][bIdx] = true;
	                        }
	                        return false;
	                    }
	                } else {
	                    if (shouldAdd) {
	                        set._items[type] = item ? [
	                            false,
	                            true
	                        ] : [
	                            true,
	                            false
	                        ];
	                    }
	                    return false;
	                }
	            case 'function':
	                // compare functions for reference equality
	                if (set._nativeSet !== null) {
	                    if (shouldAdd) {
	                        prevSize = set._nativeSet.size;
	                        set._nativeSet.add(item);
	                        newSize = set._nativeSet.size;
	                        return newSize > prevSize;
	                    } else {
	                        return set._nativeSet.has(item);
	                    }
	                } else {
	                    if (!(type in set._items)) {
	                        if (shouldAdd) {
	                            set._items[type] = [item];
	                        }
	                        return false;
	                    }
	                    if (!_contains(item, set._items[type])) {
	                        if (shouldAdd) {
	                            set._items[type].push(item);
	                        }
	                        return false;
	                    }
	                    return true;
	                }
	            case 'undefined':
	                if (set._items[type]) {
	                    return true;
	                } else {
	                    if (shouldAdd) {
	                        set._items[type] = true;
	                    }
	                    return false;
	                }
	            case 'object':
	                if (item === null) {
	                    if (!set._items['null']) {
	                        if (shouldAdd) {
	                            set._items['null'] = true;
	                        }
	                        return false;
	                    }
	                    return true;
	                }
	            /* falls through */
	            default:
	                // reduce the search size of heterogeneous sets by creating buckets
	                // for each type.
	                type = Object.prototype.toString.call(item);
	                if (!(type in set._items)) {
	                    if (shouldAdd) {
	                        set._items[type] = [item];
	                    }
	                    return false;
	                }
	                // scan through all previously applied items
	                if (!_contains(item, set._items[type])) {
	                    if (shouldAdd) {
	                        set._items[type].push(item);
	                    }
	                    return false;
	                }
	                return true;
	            }
	        }
	        return _Set;
	    }();

	    /**
	     * A function wrapping calls to the two functions in an `&&` operation,
	     * returning the result of the first function if it is false-y and the result
	     * of the second function otherwise. Note that this is short-circuited,
	     * meaning that the second function will not be invoked if the first returns a
	     * false-y value.
	     *
	     * In addition to functions, `R.both` also accepts any fantasy-land compatible
	     * applicative functor.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
	     * @see R.and
	     * @example
	     *
	     *      var gt10 = x => x > 10;
	     *      var even = x => x % 2 === 0;
	     *      var f = R.both(gt10, even);
	     *      f(100); //=> true
	     *      f(101); //=> false
	     */
	    var both = _curry2(function both(f, g) {
	        return _isFunction(f) ? function _both() {
	            return f.apply(this, arguments) && g.apply(this, arguments);
	        } : lift(and)(f, g);
	    });

	    /**
	     * Takes a function `f` and returns a function `g` such that:
	     *
	     *   - applying `g` to zero or more arguments will give __true__ if applying
	     *     the same arguments to `f` gives a logical __false__ value; and
	     *
	     *   - applying `g` to zero or more arguments will give __false__ if applying
	     *     the same arguments to `f` gives a logical __true__ value.
	     *
	     * `R.complement` will work on all other functors as well.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> *) -> (*... -> Boolean)
	     * @param {Function} f
	     * @return {Function}
	     * @see R.not
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *      var isOdd = R.complement(isEven);
	     *      isOdd(21); //=> true
	     *      isOdd(42); //=> false
	     */
	    var complement = lift(not);

	    /**
	     * Returns the result of concatenating the given lists or strings.
	     *
	     * Note: `R.concat` expects both arguments to be of the same type,
	     * unlike the native `Array.prototype.concat` method. It will throw
	     * an error if you `concat` an Array with a non-Array value.
	     *
	     * Dispatches to the `concat` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a] -> [a]
	     * @sig String -> String -> String
	     * @param {Array|String} a
	     * @param {Array|String} b
	     * @return {Array|String}
	     *
	     * @example
	     *
	     *      R.concat([], []); //=> []
	     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     *      R.concat('ABC', 'DEF'); // 'ABCDEF'
	     */
	    var concat = _curry2(function concat(a, b) {
	        if (a == null || !_isFunction(a.concat)) {
	            throw new TypeError(toString(a) + ' does not have a method named "concat"');
	        }
	        if (_isArray(a) && !_isArray(b)) {
	            throw new TypeError(toString(b) + ' is not an array');
	        }
	        return a.concat(b);
	    });

	    /**
	     * A function wrapping calls to the two functions in an `||` operation,
	     * returning the result of the first function if it is truth-y and the result
	     * of the second function otherwise. Note that this is short-circuited,
	     * meaning that the second function will not be invoked if the first returns a
	     * truth-y value.
	     *
	     * In addition to functions, `R.either` also accepts any fantasy-land compatible
	     * applicative functor.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
	     * @see R.or
	     * @example
	     *
	     *      var gt10 = x => x > 10;
	     *      var even = x => x % 2 === 0;
	     *      var f = R.either(gt10, even);
	     *      f(101); //=> true
	     *      f(8); //=> true
	     */
	    var either = _curry2(function either(f, g) {
	        return _isFunction(f) ? function _either() {
	            return f.apply(this, arguments) || g.apply(this, arguments);
	        } : lift(or)(f, g);
	    });

	    /**
	     * Turns a named method with a specified arity into a function that can be
	     * called directly supplied with arguments and a target object.
	     *
	     * The returned function is curried and accepts `arity + 1` parameters where
	     * the final parameter is the target object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
	     * @param {Number} arity Number of arguments the returned function should take
	     *        before the target object.
	     * @param {String} method Name of the method to call.
	     * @return {Function} A new curried function.
	     * @example
	     *
	     *      var sliceFrom = R.invoker(1, 'slice');
	     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
	     *      var sliceFrom6 = R.invoker(2, 'slice')(6);
	     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
	     */
	    var invoker = _curry2(function invoker(arity, method) {
	        return curryN(arity + 1, function () {
	            var target = arguments[arity];
	            if (target != null && _isFunction(target[method])) {
	                return target[method].apply(target, _slice(arguments, 0, arity));
	            }
	            throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
	        });
	    });

	    /**
	     * Returns a string made by inserting the `separator` between each element and
	     * concatenating all the elements into a single string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig String -> [a] -> String
	     * @param {Number|String} separator The string used to separate the elements.
	     * @param {Array} xs The elements to join into a string.
	     * @return {String} str The string made by concatenating `xs` with `separator`.
	     * @see R.split
	     * @example
	     *
	     *      var spacer = R.join(' ');
	     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
	     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
	     */
	    var join = invoker(1, 'join');

	    /**
	     * Creates a new function that, when invoked, caches the result of calling `fn`
	     * for a given argument set and returns the result. Subsequent calls to the
	     * memoized `fn` with the same argument set will not result in an additional
	     * call to `fn`; instead, the cached result for that set of arguments will be
	     * returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (*... -> a) -> (*... -> a)
	     * @param {Function} fn The function to memoize.
	     * @return {Function} Memoized version of `fn`.
	     * @example
	     *
	     *      var count = 0;
	     *      var factorial = R.memoize(n => {
	     *        count += 1;
	     *        return R.product(R.range(1, n + 1));
	     *      });
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      count; //=> 1
	     */
	    var memoize = _curry1(function memoize(fn) {
	        var cache = {};
	        return _arity(fn.length, function () {
	            var key = toString(arguments);
	            if (!_has(key, cache)) {
	                cache[key] = fn.apply(this, arguments);
	            }
	            return cache[key];
	        });
	    });

	    /**
	     * Splits a string into an array of strings based on the given
	     * separator.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category String
	     * @sig (String | RegExp) -> String -> [String]
	     * @param {String|RegExp} sep The pattern.
	     * @param {String} str The string to separate into an array.
	     * @return {Array} The array of strings from `str` separated by `str`.
	     * @see R.join
	     * @example
	     *
	     *      var pathComponents = R.split('/');
	     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
	     *
	     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
	     */
	    var split = invoker(1, 'split');

	    /**
	     * Finds the set (i.e. no duplicates) of all elements contained in the first or
	     * second list, but not both.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` or `list2`, but not both.
	     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
	     * @example
	     *
	     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
	     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
	     */
	    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {
	        return concat(difference(list1, list2), difference(list2, list1));
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements contained in the first or
	     * second list, but not both. Duplication is determined according to the value
	     * returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` or `list2`, but not both.
	     * @see R.symmetricDifference, R.difference, R.differenceWith
	     * @example
	     *
	     *      var eqA = R.eqBy(R.prop('a'));
	     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
	     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
	     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
	     */
	    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {
	        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
	    });

	    /**
	     * Determines whether a given string matches a given regular expression.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category String
	     * @sig RegExp -> String -> Boolean
	     * @param {RegExp} pattern
	     * @param {String} str
	     * @return {Boolean}
	     * @see R.match
	     * @example
	     *
	     *      R.test(/^x/, 'xyz'); //=> true
	     *      R.test(/^y/, 'xyz'); //=> false
	     */
	    var test = _curry2(function test(pattern, str) {
	        if (!_isRegExp(pattern)) {
	            throw new TypeError('\u2018test\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));
	        }
	        return _cloneRegExp(pattern).test(str);
	    });

	    /**
	     * The lower case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to lower case.
	     * @return {String} The lower case version of `str`.
	     * @see R.toUpper
	     * @example
	     *
	     *      R.toLower('XYZ'); //=> 'xyz'
	     */
	    var toLower = invoker(0, 'toLowerCase');

	    /**
	     * The upper case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to upper case.
	     * @return {String} The upper case version of `str`.
	     * @see R.toLower
	     * @example
	     *
	     *      R.toUpper('abc'); //=> 'ABC'
	     */
	    var toUpper = invoker(0, 'toUpperCase');

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list, based upon the value returned by applying the supplied function to
	     * each list element. Prefers the first item if the supplied function produces
	     * the same value on two items. `R.equals` is used for comparison.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> b) -> [a] -> [a]
	     * @param {Function} fn A function used to produce a value to use during comparisons.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
	     */
	    var uniqBy = _curry2(function uniqBy(fn, list) {
	        var set = new _Set();
	        var result = [];
	        var idx = 0;
	        var appliedItem, item;
	        while (idx < list.length) {
	            item = list[idx];
	            appliedItem = fn(item);
	            if (set.add(appliedItem)) {
	                result.push(item);
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list. `R.equals` is used to determine equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
	     *      R.uniq([1, '1']);     //=> [1, '1']
	     *      R.uniq([[42], [42]]); //=> [[42]]
	     */
	    var uniq = uniqBy(identity);

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those
	     * elements common to both lists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The list of elements found in both `list1` and `list2`.
	     * @see R.intersectionWith
	     * @example
	     *
	     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
	     */
	    var intersection = _curry2(function intersection(list1, list2) {
	        var lookupList, filteredList;
	        if (list1.length > list2.length) {
	            lookupList = list1;
	            filteredList = list2;
	        } else {
	            lookupList = list2;
	            filteredList = list1;
	        }
	        return uniq(_filter(flip(_contains)(lookupList), filteredList));
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the elements
	     * of each list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @example
	     *
	     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
	     */
	    var union = _curry2(compose(uniq, _concat));

	    var R = {
	        F: F,
	        T: T,
	        __: __,
	        add: add,
	        addIndex: addIndex,
	        adjust: adjust,
	        all: all,
	        allPass: allPass,
	        always: always,
	        and: and,
	        any: any,
	        anyPass: anyPass,
	        ap: ap,
	        aperture: aperture,
	        append: append,
	        apply: apply,
	        applySpec: applySpec,
	        assoc: assoc,
	        assocPath: assocPath,
	        binary: binary,
	        bind: bind,
	        both: both,
	        call: call,
	        chain: chain,
	        clamp: clamp,
	        clone: clone,
	        comparator: comparator,
	        complement: complement,
	        compose: compose,
	        composeK: composeK,
	        composeP: composeP,
	        concat: concat,
	        cond: cond,
	        construct: construct,
	        constructN: constructN,
	        contains: contains,
	        converge: converge,
	        countBy: countBy,
	        curry: curry,
	        curryN: curryN,
	        dec: dec,
	        defaultTo: defaultTo,
	        difference: difference,
	        differenceWith: differenceWith,
	        dissoc: dissoc,
	        dissocPath: dissocPath,
	        divide: divide,
	        drop: drop,
	        dropLast: dropLast,
	        dropLastWhile: dropLastWhile,
	        dropRepeats: dropRepeats,
	        dropRepeatsWith: dropRepeatsWith,
	        dropWhile: dropWhile,
	        either: either,
	        empty: empty,
	        eqBy: eqBy,
	        eqProps: eqProps,
	        equals: equals,
	        evolve: evolve,
	        filter: filter,
	        find: find,
	        findIndex: findIndex,
	        findLast: findLast,
	        findLastIndex: findLastIndex,
	        flatten: flatten,
	        flip: flip,
	        forEach: forEach,
	        fromPairs: fromPairs,
	        groupBy: groupBy,
	        groupWith: groupWith,
	        gt: gt,
	        gte: gte,
	        has: has,
	        hasIn: hasIn,
	        head: head,
	        identical: identical,
	        identity: identity,
	        ifElse: ifElse,
	        inc: inc,
	        indexBy: indexBy,
	        indexOf: indexOf,
	        init: init,
	        insert: insert,
	        insertAll: insertAll,
	        intersection: intersection,
	        intersectionWith: intersectionWith,
	        intersperse: intersperse,
	        into: into,
	        invert: invert,
	        invertObj: invertObj,
	        invoker: invoker,
	        is: is,
	        isArrayLike: isArrayLike,
	        isEmpty: isEmpty,
	        isNil: isNil,
	        join: join,
	        juxt: juxt,
	        keys: keys,
	        keysIn: keysIn,
	        last: last,
	        lastIndexOf: lastIndexOf,
	        length: length,
	        lens: lens,
	        lensIndex: lensIndex,
	        lensPath: lensPath,
	        lensProp: lensProp,
	        lift: lift,
	        liftN: liftN,
	        lt: lt,
	        lte: lte,
	        map: map,
	        mapAccum: mapAccum,
	        mapAccumRight: mapAccumRight,
	        mapObjIndexed: mapObjIndexed,
	        match: match,
	        mathMod: mathMod,
	        max: max,
	        maxBy: maxBy,
	        mean: mean,
	        median: median,
	        memoize: memoize,
	        merge: merge,
	        mergeAll: mergeAll,
	        mergeWith: mergeWith,
	        mergeWithKey: mergeWithKey,
	        min: min,
	        minBy: minBy,
	        modulo: modulo,
	        multiply: multiply,
	        nAry: nAry,
	        negate: negate,
	        none: none,
	        not: not,
	        nth: nth,
	        nthArg: nthArg,
	        objOf: objOf,
	        of: of,
	        omit: omit,
	        once: once,
	        or: or,
	        over: over,
	        pair: pair,
	        partial: partial,
	        partialRight: partialRight,
	        partition: partition,
	        path: path,
	        pathEq: pathEq,
	        pathOr: pathOr,
	        pathSatisfies: pathSatisfies,
	        pick: pick,
	        pickAll: pickAll,
	        pickBy: pickBy,
	        pipe: pipe,
	        pipeK: pipeK,
	        pipeP: pipeP,
	        pluck: pluck,
	        prepend: prepend,
	        product: product,
	        project: project,
	        prop: prop,
	        propEq: propEq,
	        propIs: propIs,
	        propOr: propOr,
	        propSatisfies: propSatisfies,
	        props: props,
	        range: range,
	        reduce: reduce,
	        reduceBy: reduceBy,
	        reduceRight: reduceRight,
	        reduceWhile: reduceWhile,
	        reduced: reduced,
	        reject: reject,
	        remove: remove,
	        repeat: repeat,
	        replace: replace,
	        reverse: reverse,
	        scan: scan,
	        sequence: sequence,
	        set: set,
	        slice: slice,
	        sort: sort,
	        sortBy: sortBy,
	        split: split,
	        splitAt: splitAt,
	        splitEvery: splitEvery,
	        splitWhen: splitWhen,
	        subtract: subtract,
	        sum: sum,
	        symmetricDifference: symmetricDifference,
	        symmetricDifferenceWith: symmetricDifferenceWith,
	        tail: tail,
	        take: take,
	        takeLast: takeLast,
	        takeLastWhile: takeLastWhile,
	        takeWhile: takeWhile,
	        tap: tap,
	        test: test,
	        times: times,
	        toLower: toLower,
	        toPairs: toPairs,
	        toPairsIn: toPairsIn,
	        toString: toString,
	        toUpper: toUpper,
	        transduce: transduce,
	        transpose: transpose,
	        traverse: traverse,
	        trim: trim,
	        tryCatch: tryCatch,
	        type: type,
	        unapply: unapply,
	        unary: unary,
	        uncurryN: uncurryN,
	        unfold: unfold,
	        union: union,
	        unionWith: unionWith,
	        uniq: uniq,
	        uniqBy: uniqBy,
	        uniqWith: uniqWith,
	        unless: unless,
	        unnest: unnest,
	        until: until,
	        update: update,
	        useWith: useWith,
	        values: values,
	        valuesIn: valuesIn,
	        view: view,
	        when: when,
	        where: where,
	        whereEq: whereEq,
	        without: without,
	        wrap: wrap,
	        xprod: xprod,
	        zip: zip,
	        zipObj: zipObj,
	        zipWith: zipWith
	    };
	  /* eslint-env amd */

	  /* TEST_ENTRY_POINT */

	  if (true) {
	    module.exports = R;
	  } else if (typeof define === 'function' && define.amd) {
	    define(function() { return R; });
	  } else {
	    this.R = R;
	  }

	}.call(this));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const natural = __webpack_require__(4),
	  wordTokenizer = new natural.WordTokenizer(),
	  stemmer = natural.PorterStemmer,
	  stem = stemmer.stem;

	const map = __webpack_require__(2).map,
	  curry = __webpack_require__(2).curry,
	  filter = __webpack_require__(2).filter;


	const compose = function(f, g) {
	  return function(x) {
	    return f(g(x));
	  }
	}

	const c_tokenize = function(tkr) {
	  return function(str) {
	    return tkr.tokenize(str);
	  }
	}
	const trace = function(x) {
	  console.log(x);
	  return x;
	}
	const gtTwo = function(x) {
	  return x.length > 2;
	}
	const wordTkr = c_tokenize(wordTokenizer),
	  findStems = compose(map(stem), wordTkr),
	  filteredStems = compose(filter(gtTwo), findStems),
	  logFilteredStems = compose(trace, filteredStems);

	module.exports = filteredStems;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	exports.SoundEx = __webpack_require__(5);
	exports.Metaphone = __webpack_require__(14);
	exports.DoubleMetaphone = __webpack_require__(15);
	exports.SoundExDM = __webpack_require__(16);
	exports.PorterStemmer = __webpack_require__(17);
	exports.PorterStemmerFa = __webpack_require__(19);
	exports.PorterStemmerFr = __webpack_require__(23);
	exports.PorterStemmerRu = __webpack_require__(27);
	exports.PorterStemmerEs = __webpack_require__(31);
	exports.PorterStemmerIt = __webpack_require__(35);
	exports.PorterStemmerNo = __webpack_require__(39);
	exports.PorterStemmerPt = __webpack_require__(44);
	exports.LancasterStemmer = __webpack_require__(49);
	exports.StemmerFr = __webpack_require__(24);
	exports.StemmerPl = __webpack_require__(51);
	exports.StemmerJa = __webpack_require__(54);
	exports.AggressiveTokenizerNl = __webpack_require__(59);
	exports.AggressiveTokenizerFa = __webpack_require__(22);
	exports.AggressiveTokenizerFr = __webpack_require__(26);
	exports.AggressiveTokenizerRu = __webpack_require__(30);
	exports.AggressiveTokenizerEs = __webpack_require__(34);
	exports.AggressiveTokenizerIt = __webpack_require__(38);
	exports.AggressiveTokenizerPl = __webpack_require__(53);
	exports.AggressiveTokenizerPt = __webpack_require__(47);
	exports.AggressiveTokenizerNo = __webpack_require__(42);
	exports.AggressiveTokenizer = __webpack_require__(8);
	exports.CaseTokenizer = __webpack_require__(60);
	exports.RegexpTokenizer = __webpack_require__(61).RegexpTokenizer;
	exports.WordTokenizer = __webpack_require__(61).WordTokenizer;
	exports.WordPunctTokenizer = __webpack_require__(61).WordPunctTokenizer;
	exports.TreebankWordTokenizer = __webpack_require__(63);
	exports.TokenizerJa = __webpack_require__(55);
	exports.SentenceTokenizer = __webpack_require__(64);
	exports.BayesClassifier = __webpack_require__(65);
	exports.LogisticRegressionClassifier = __webpack_require__(81);
	exports.NounInflector = __webpack_require__(82);
	exports.NounInflectorFr = __webpack_require__(85);
	exports.NounInflectorJa = __webpack_require__(86);
	exports.PresentVerbInflector = __webpack_require__(87);
	exports.CountInflector = __webpack_require__(88);
	exports.WordNet = __webpack_require__(89);
	exports.TfIdf = __webpack_require__(98);
	exports.Trie = __webpack_require__(99);
	exports.SentenceAnalyzer = __webpack_require__(100);
	exports.stopwords = __webpack_require__(7).words;
	exports.ShortestPathTree = __webpack_require__(101);
	exports.Spellcheck = __webpack_require__(105);
	exports.LongestPathTree = __webpack_require__(106);
	exports.EdgeWeightedDigraph = __webpack_require__(102);
	exports.NGrams = __webpack_require__(107);
	exports.NGramsZH = __webpack_require__(108);
	exports.JaroWinklerDistance = __webpack_require__(109);
	exports.LevenshteinDistance = __webpack_require__(110);
	exports.DiceCoefficient = __webpack_require__(111);
	exports.normalize = __webpack_require__(112).normalize_tokens;
	exports.normalize_ja = __webpack_require__(56).normalize_ja;
	exports.removeDiacritics = __webpack_require__(113);
	exports.transliterate_ja = __webpack_require__(114);
	exports.BrillPOSTagger = __webpack_require__(115);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(6);

	function transformLipps(token) {
	    return token.replace(/[bfpv]/g, '1');
	}

	function transformThroats(token) {
	    return token.replace(/[cgjkqsxz]/g, '2');
	}

	function transformToungue(token) {
	    return token.replace(/[dt]/g, '3');
	}

	function transformL(token) {
	    return token.replace(/l/g, '4');
	}

	function transformHum(token) {
	    return token.replace(/[mn]/g, '5');
	}

	function transformR(token) {
	    return token.replace(/r/g, '6');
	}

	function condense(token) {
	    return token.replace(/(\d)?\1+/g, '$1');
	}

	function padRight0(token) {
	    if(token.length < 4)
	        return token + Array(4 - token.length).join('0');
	    else
	        return token;
	}

	function transform(token) {
	    return transformLipps(transformThroats(
	        transformToungue(transformL(transformHum(transformR(token))))));
	}

	var SoundEx = new Phonetic();
	module.exports = SoundEx;

	SoundEx.process = function(token, maxLength) {
	    token = token.toLowerCase();    
	    var transformed = condense(transform(token.substr(1, token.length - 1))); // anything that isn't a digit goes
	    // deal with duplicate INITIAL consonant SOUNDS
	    transformed = transformed.replace(new RegExp("^" + transform(token.charAt(0))), '');
	    return token.charAt(0).toUpperCase() + padRight0(transformed.replace(/\D/g, '')).substr(0, (maxLength && maxLength - 1) || 3);
	};

	// export for tests;
	SoundEx.transformLipps = transformLipps;
	SoundEx.transformThroats = transformThroats;
	SoundEx.transformToungue = transformToungue;
	SoundEx.transformL = transformL;
	SoundEx.transformHum = transformHum;
	SoundEx.transformR = transformR;
	SoundEx.condense = condense;
	SoundEx.padRight0 = padRight0;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(7);
	var Tokenizer = __webpack_require__(8),
	    tokenizer = new Tokenizer();

	module.exports = function() {
	    this.compare = function(stringA, stringB) {
	        return this.process(stringA) == this.process(stringB);
	    };

	    this.attach = function() {
		var phonetic = this;

	        String.prototype.soundsLike = function(compareTo) {
	            return phonetic.compare(this, compareTo);
	        }
	        
	        String.prototype.phonetics = function() {
	            return phonetic.process(this);
	        }
		
	        String.prototype.tokenizeAndPhoneticize = function(keepStops) {
	            var phoneticizedTokens = [];
	            
	            tokenizer.tokenize(this).forEach(function(token) {
	                if(keepStops || stopwords.words.indexOf(token) < 0)
	                    phoneticizedTokens.push(token.phonetics());
	            });
	            
	            return phoneticizedTokens;
	        }
	    };
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be',
	    'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can',
	    'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had',
	    'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into',
	    'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must',
	    'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over',
	    'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than',
	    'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those',
	    'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were',
	    'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your',
	    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
	    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1',
	    '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/\W+/));
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/**
	 * \@todo Use .bind() in Tokenizer.prototype.attach().
	 */

	var Tokenizer = function() {
	};

	Tokenizer.prototype.trim = function(array) {
	  while (array[array.length - 1] == '')
	    array.pop();

	  while (array[0] == '')
	    array.shift();

	  return array;
	};

	// Expose an attach function that will patch String with new methods.
	Tokenizer.prototype.attach = function() {
	  var self = this;

	  String.prototype.tokenize = function() {
	    return self.tokenize(this);
	  }
	};

	Tokenizer.prototype.tokenize = function() {};

	module.exports = Tokenizer;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(12);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(13);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(11)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 13 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(6);

	function dedup(token) {
	    return token.replace(/([^c])\1/g, '$1');
	}

	function dropInitialLetters(token) {
	    if(token.match(/^(kn|gn|pn|ae|wr)/))
	        return token.substr(1, token.length - 1);
	        
	    return token;
	}

	function dropBafterMAtEnd(token) {
	    return token.replace(/mb$/, 'm');
	}

	function cTransform(token) {
	    

	    token = token.replace(/([^s]|^)(c)(h)/g, '$1x$3').trim();


	    token = token.replace(/cia/g, 'xia');
	    token = token.replace(/c(i|e|y)/g, 's$1');
	    token = token.replace(/c/g, 'k'); 
	    
	    return token;
	}

	function dTransform(token) {
	    token = token.replace(/d(ge|gy|gi)/g, 'j$1');
	    token = token.replace(/d/g, 't');
	    
	    return token;
	}

	function dropG(token) {
	    token = token.replace(/gh(^$|[^aeiou])/g, 'h$1');
	    token = token.replace(/g(n|ned)$/g, '$1');    
	    
	    return token;
	}

	function transformG(token) {
	    token = token.replace(/gh/g, 'f'); 
	    token = token.replace(/([^g]|^)(g)(i|e|y)/g, '$1j$3');
	    token = token.replace(/gg/g, 'g');
	    token = token.replace(/g/g, 'k');    
	    
	    return token;
	}

	function dropH(token) {
	    return token.replace(/([aeiou])h([^aeiou]|$)/g, '$1$2');
	}

	function transformCK(token) {
	    return token.replace(/ck/g, 'k');
	}
	function transformPH(token) {
	    return token.replace(/ph/g, 'f');
	}

	function transformQ(token) {
	    return token.replace(/q/g, 'k');
	}

	function transformS(token) {
	    return token.replace(/s(h|io|ia)/g, 'x$1');
	}

	function transformT(token) {
	    token = token.replace(/t(ia|io)/g, 'x$1');
	    token = token.replace(/th/, '0');
	    
	    return token;
	}

	function dropT(token) {
	    return token.replace(/tch/g, 'ch');
	}

	function transformV(token) {
	    return token.replace(/v/g, 'f');
	}

	function transformWH(token) {
	    return token.replace(/^wh/, 'w');
	}

	function dropW(token) {
	    return token.replace(/w([^aeiou]|$)/g, '$1');
	}

	function transformX(token) {
	    token = token.replace(/^x/, 's');
	    token = token.replace(/x/g, 'ks');
	    return token;
	}

	function dropY(token) {
	    return token.replace(/y([^aeiou]|$)/g, '$1');
	}

	function transformZ(token) {
	    return token.replace(/z/, 's');
	}

	function dropVowels(token) {
	    return token.charAt(0) + token.substr(1, token.length).replace(/[aeiou]/g, '');
	}

	var Metaphone = new Phonetic();
	module.exports = Metaphone;

	Metaphone.process = function(token, maxLength) {
	    maxLength == maxLength || 32;
	    token = token.toLowerCase();
	    token = dedup(token);
	    token = dropInitialLetters(token);
	    token = dropBafterMAtEnd(token);
	    token = transformCK(token);
	    token = cTransform(token);
	    token = dTransform(token);
	    token = dropG(token);
	    token = transformG(token);
	    token = dropH(token);
	    token = transformPH(token);
	    token = transformQ(token);
	    token = transformS(token);
	    token = transformX(token);    
	    token = transformT(token);
	    token = dropT(token);
	    token = transformV(token);
	    token = transformWH(token);
	    token = dropW(token);
	    token = dropY(token);
	    token = transformZ(token);
	    token = dropVowels(token);
	    
	    token.toUpperCase();
	    if(token.length >= maxLength)
	        token = token.substring(0, maxLength);        

	    return token.toUpperCase();
	};

	// expose functions for testing    
	Metaphone.dedup = dedup;
	Metaphone.dropInitialLetters = dropInitialLetters;
	Metaphone.dropBafterMAtEnd = dropBafterMAtEnd;
	Metaphone.cTransform = cTransform;
	Metaphone.dTransform = dTransform;
	Metaphone.dropG = dropG;
	Metaphone.transformG = transformG;
	Metaphone.dropH = dropH;
	Metaphone.transformCK = transformCK;
	Metaphone.transformPH = transformPH;
	Metaphone.transformQ = transformQ;
	Metaphone.transformS = transformS;
	Metaphone.transformT = transformT;
	Metaphone.dropT = dropT;
	Metaphone.transformV = transformV;
	Metaphone.transformWH = transformWH;
	Metaphone.dropW = dropW;
	Metaphone.transformX = transformX;
	Metaphone.dropY = dropY;
	Metaphone.transformZ = transformZ;
	Metaphone.dropVowels = dropVowels;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Phonetic = __webpack_require__(6);

	var DoubleMetaphone = new Phonetic();
	module.exports = DoubleMetaphone;

	function isVowel(c) {
		return c && c.match(/[aeiouy]/i);
	}

	function truncate(string, length) {
	    if(string.length >= length)
	        string = string.substring(0, length);
	        
	    return string;
	}

	function process(token, maxLength) {
		token = token.toUpperCase();
		var primary = '', secondary = '';	
	    var pos = 0;
	    maxLength == maxLength || 32;

	    function subMatch(startOffset, stopOffset, terms) {
	        return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);
	    }

	    function subMatchAbsolute(startOffset, stopOffset, terms) {
	        return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;
	    }

	    function addSecondary(primaryAppendage, secondaryAppendage) {
	    	primary += primaryAppendage;
	    	secondary += secondaryAppendage;
	    }

	    function add(primaryAppendage) {
	    	addSecondary(primaryAppendage, primaryAppendage);
	    }

	    function addCompressedDouble(c, encoded) {
	    	if(token[pos + 1] == c)
	    		pos++;
	    	add(encoded || c);
	    }

	    function handleC() {

	        if(pos >= 1 && !isVowel(token[pos - 2]) 
	                && token[pos - 1] == 'A' && token[pos + 1] == 'H'
	                    && (token[pos + 2] != 'I' && token[pos + 2] != 'I')
	                        || subMatch(-2, 4, ['BACHER', 'MACHER'])) {
	            add('K');
	            pos++;
	        } else if(pos == 0 && token.substring(1, 6) == 'EASAR') {
	            add('S');
	            add('S');
	            add('R');
	            pos += 6;
	        } else if(token.substring(pos + 1, pos + 4) == 'HIA') {
	            add('K');
	            pos++;
	        } else if(token[pos + 1] == 'H') {
	            if(pos > 0 && token.substring(pos + 2, pos + 4) == 'AE') {
	                addSecondary('K', 'X');
	                pos++;
	            } else if(pos == 0 
	                        && (subMatch(1, 6, ['HARAC', 'HARIS']) 
	                            || subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM']))
	                        && token.substring(pos + 1, pos + 5) != 'HORE') {
	                add('K');
	                pos++;
	            } else {
	                if((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0,  3) == 'SCH')
	                    || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID'])
	                    || subMatch(2, 3, ['T', 'S'])
	                    || ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos == 0) 
	                        && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {
	                    add('K');
	                } else if(pos > 0) {

	                    if(token.substring(0, 2) == 'MC') {
	                        add('K');
	                    } else {
	                        addSecondary('X', 'K');   
	                    }
	                } else {
	                    add('X');
	                }

	                pos++;
	            } 
	        } else if(token.substring(pos, pos + 2) == 'CZ' 
	                && token.substring(pos - 2, pos + 1) != 'WICZ') {
	            addSecondary('S', 'X');
	            pos++;
	        } else if(token.substring(pos, pos + 3) == 'CIA') {
	            add('X');
	            pos += 2;
	        } else if(token[pos + 1] == 'C' && pos != 1 && token[0] != 'M') {
	            if(['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 
	                    && token.substring(pos + 2, pos + 4) != 'HU') {
	                if(pos == 1 && token[pos - 1] == 'A'
	                        || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {
	                    add('KS');
	                } else {
	                   add('X');
	                }

	               pos +=2;
	            } else {
	                add('K');
	                pos++;
	            }
	        } else if(['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {
	            add('K');
	            pos++;
	        } else if(['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {
	            if(subMatch(1, 3, ['IA', 'IE', 'IO'])) {
	                addSecondary('S', 'X');   
	            } else {
	                add('S');
	            }
	            pos++;
	        } else {            
	            add('K');
	            if(token[pos + 1] == ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {
	                pos += 2;
	            } else if(['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1
	                    && !subMatch(1, 3, ['CE', 'CI'])) {
	                pos++;
	            } 
	        }
	    }

	    function handleD() {
	    	if(token[pos + 1] == 'G') {
	    		if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1)  {
	    			add('J');
	    			pos += 2;
	    		} else {
	    			add('TK');
	    			pos++;
	    		}
		    } else if(token[pos + 1] == 'T') {
	    		add('T');
		    	pos++;    		
	    	} else
	    		addCompressedDouble('D', 'T');
	    }

	    function handleG() {
	        if(token[pos + 1] == 'H') {
	            if(pos > 0 && !isVowel(token[pos - 1])) {
	                add('K');
	                pos++;
	            } else if(pos == 0) {
	                if(token[pos + 2] == 'I') {
	                    add('J');
	                } else {
	                    add('K');
	                }
	                pos++;
	            } else if(pos > 1 
	                && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1
	                    || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1
	                    || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {
	                pos++;
	            } else {
	                if(pos > 2
	                        && token[pos - 1] == 'U'
	                        && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {
	                    add('F');
	                } else if(token[pos - 1] != 'I') {
	                    add('K');
	                }

	                pos++;
	            }
	        } else if(token[pos + 1] == 'N') {
	            if(pos == 1 && startsWithVowel && !slavoGermanic) {
	                addSecondary('KN', 'N');
	            } else {
	                if(token.substring(pos + 2, pos + 4) != 'EY'
	                        && (token[pos + 1] != 'Y'
	                            && !slavoGermanic)) {
	                    addSecondary('N', 'KN');
	                } else
	                    add('KN');
	            }
	            pos++;
	        } else if(token.substring(pos + 1, pos + 3) == 'LI' && !slavoGermanic) {
	            addSecondary('KL', 'L');
	            pos++;
	        } else if(pos == 0 && (token[pos + 1] == 'Y'                
	                || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {
	            addSecondary('K', 'J')
	        } else {
	            addCompressedDouble('G', 'K');
	        }
	    }

	    function handleH() {
			// keep if starts a word or is surrounded by vowels
			if((pos == 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {
				add('H');
				pos++;
			}    	
	    }    

	    function handleJ() {
	        var jose = (token.substring(pos + 1, pos + 4) == 'OSE');

	        if(san || jose) {
	            if((pos == 0 && token[pos + 4] == ' ') 
	                    || san) {
	                add('H');            
	            } else
	                add('J', 'H');
	        } else {
	            if(pos == 0/* && !jose*/) {
	                addSecondary('J', 'A');
	            } else if(isVowel(token[pos - 1]) && !slavoGermanic 
	                    && (token[pos + 1] == 'A' || token[pos + 1] == 'O')) {
	                addSecondary('J', 'H');
	            } else if(pos == token.length - 1) {
	                addSecondary('J', ' ');
	            } else
	                addCompressedDouble('J');
	        }
	    }

	    function handleL() {
	    	if(token[pos + 1] == 'L') {
	    		if(pos == token.length - 3 && (
	    					subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (
	    						token.substring(pos - 1, pos + 3) == 'ALLE' &&
	    						(subMatch(-2, -1, ['AS', 'OS']) > -1 ||
	    						['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {
	    			addSecondary('L', '');
	    			pos++;
	    			return;
	    		}
	    		pos++;	
	    	}
	    	add('L');
	    }

	    function handleM() {
	    	addCompressedDouble('M');
	    	if(token[pos - 1] == 'U' && token[pos + 1] == 'B' && 
	    			((pos == token.length - 2  || token.substring(pos + 2, pos + 4) == 'ER')))
	    		pos++;
	    }

	    function handleP() {
	    	if(token[pos + 1] == 'H') {
	    		add('F');
	    		pos++;	
	    	} else {
	    		addCompressedDouble('P');
	    		    		
				if(token[pos + 1] == 'B')
	    			pos++;
	    	}
	    }

	    function handleR() {
	    	if(pos == token.length - 1 && !slavoGermanic
	    			&& token.substring(pos - 2, pos) == 'IE'
	    			&& !subMatch(-4, -3, ['ME', 'MA'])) {
	    		addSecondary('', 'R');
	    	} else
		    	addCompressedDouble('R');    		
	    }

	    function handleS() {
	        if(pos == 0 && token.substring(0, 5) == 'SUGAR') {
	            addSecondary('X', 'S');
	        } else if(token[pos + 1] == 'H') {
	            if(subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {
	                add('S');
	            } else {
	                add('X');
	            }
	            pos++;
	        } else if(subMatch(1, 3, ['IO', 'IA'])) {
	            if(slavoGermanic) {
	                add('S');
	            } else {
	                addSecondary('S', 'X');
	            }
	            pos++;
	        } else if((pos == 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1) 
	                || token[pos + 1] == 'Z') {
	            addSecondary('S', 'X');
	            if(token[pos + 1] == 'Z')
	                pos++;
	        } else if(token.substring(pos, pos + 2) == 'SC') {
	            if(token[pos + 2] == 'H') {
	                if(subMatch(3, 5, ['ER', 'EN'])) {
	                    addSecondary('X', 'SK');
	                } else if(subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {
	                    add('SK');
	                } else if(pos == 0 && !isVowel(token[3]) && token[3] != 'W') {
	                    addSecondary('X', 'S');
	                } else {
	                    add('X');   
	                } 
	            } else if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {
	                add('S');
	            } else {
	                add('SK');
	            }

	            pos += 2;            
	        } else if(pos == token.length - 1
	                && subMatch(-2, 0, ['AI', 'OI'])) {
	            addSecondary('', 'S');            
	        } else if(token[pos + 1] != 'L' && (
	                token[pos - 1] != 'A' && token[pos - 1] != 'I')) {
	            addCompressedDouble('S');
	            if(token[pos + 1] == 'Z')
	                pos++;
	        }
	    }

	    function handleT() {
	        if(token.substring(pos + 1, pos + 4) == 'ION') {
	            add('XN');
	            pos += 3;
	        } else if(subMatch(1, 3, ['IA', 'CH'])) {
	            add('X');
	            pos += 2;
	        } else if(token[pos + 1] == 'H' 
	                || token.substring(1, 2) == 'TH') {
	            if(subMatch(2, 4, ['OM', 'AM']) 
	                    || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1
	                    || token.substring(0, 3) == 'SCH') {
	                add('T');            
	            } else
	                addSecondary('0', 'T');
	            pos++;
	        } else {
	            addCompressedDouble('T');

	            if(token[pos + 1] == 'D')
	                pos++;
	        }
	    }

	    function handleX() {
	    	if(pos == 0) {
	    		add('S');
	    	} else if(!(pos == token.length - 1 
		    		&& (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1
		    			|| ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {
	    		add('KS');
	    	}
	    }

	    function handleW() {
	        if(pos == 0) {
	            if(token[1] == 'H') {
	                add('A');
	            } else if (isVowel(token[1])) {
	                addSecondary('A', 'F');
	            }
	        } else if((pos == token.length - 1 && isVowel(token[pos - 1]) 
	                    || subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY'])
	                    || token.substring(0, 3) == 'SCH')) {
	                addSecondary('', 'F');
	                pos++;
	        } else if(['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {
	            addSecondary('TS', 'FX');
	            pos += 3;
	        }
	    }

	    function handleZ() {
	        if(token[pos + 1] == 'H') {
	            add('J');
	            pos++;            
	        } else if(subMatch(1, 3, ['ZO', 'ZI', 'ZA']) 
	                || (slavoGermanic && pos > 0 && token[pos - 1] != 'T')) {
	            addSecondary('S', 'TS');
	            pos++; 
	        } else
	            addCompressedDouble('Z', 'S');
	    }

	    var san = (token.substring(0, 3) == 'SAN');
	    var startsWithVowel = isVowel(token[0]);
	    var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);

	    if(subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {
	    	pos++;
	    }

	    while(pos < token.length) {

	    	switch(token[pos]) {
		        case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y': 	        
		        case 'Ê': case 'É': case 'É': case'À':
			        if(pos == 0)
			        	add('A');
			        break;
			    case 'B':
			    	addCompressedDouble('B', 'P');
			    	break;
	            case 'C':
	                handleC();
	                break;
		        case 'Ç':
		            add("S");
		            break;
		        case 'D':
		        	handleD();
		        	break;
		        case 'F': case 'K': case 'N':
		        	addCompressedDouble(token[pos]);
		        	break;
	            case 'G':
	                handleG();
	                break;
		        case 'H':
		        	handleH();
		        	break;
	            case 'J':
	                handleJ();
	                break;
		        case 'L':
		        	handleL();
		        	break;
		        case 'M':
		        	handleM();
		        	break;
		        case 'Ñ':
		        	add('N');
		        	break;
		        case 'P':
		        	handleP();
		        	break;
		        case 'Q':
		        	addCompressedDouble('Q', 'K');
		        	break;
		        case 'R':
		        	handleR();
		        	break;
	            case 'S':
	                handleS();
	                break;
	            case 'T':
	                handleT();
	                break;
		        case 'V':
		        	addCompressedDouble('V', 'F');
		        	break;
	            case 'W':
	                handleW();
	                break;
		        case 'X':
		        	handleX();
		        	break;
		        case 'Z':
		        	handleZ();
		        	break;
	    	}

	        if(primary.length >= maxLength && secondary.length >= maxLength) {
	            break;
	        }

	    	pos++;
	    }

	    return [truncate(primary, maxLength), truncate(secondary, maxLength)];
	}

	function compare(stringA, stringB) {
	    var encodingsA = process(stringA),
	        encodingsB = process(stringB);

	    return encodingsA[0] == encodingsB[0] || 
	        encodingsA[1] == encodingsB[1];
	};

	DoubleMetaphone.compare = compare
	DoubleMetaphone.process = process;
	DoubleMetaphone.isVowel = isVowel;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Alexy Maslenninkov

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * Daitch-Mokotoff Soundex Coding
	 *
	 * The Daitch-Mokotoff Soundex System was created by Randy Daitch and Gary
	 * Mokotoff of the Jewish Genealogical Society because they concluded the system
	 * developed by Robert Russell in 1918, and in use today by the U.S. National
	 * Archives and Records Administration (NARA) does not apply well to many Slavic
	 * and Yiddish surnames.  It also includes refinements that are independent of
	 * ethnic considerations.
	 *
	 * The rules for converting surnames into D-M Code numbers are listed below.
	 * They are followed by the coding chart.
	 *
	 * 1. Names are coded to six digits, each digit representing a sound listed in
	 * the coding chart (below).
	 *
	 * 2. When a name lacks enough coded sounds for six digits, use zeros to fill to
	 * six digits. GOLDEN which has only four coded sounds [G-L-D-N] is coded as
	 * 583600.
	 *
	 * 3. The letters A, E, I, O, U, J, and Y are always coded at the beginning of a
	 * name as in Alpert 087930. In any other situation, they are ignored except
	 * when two of them form a pair and the pair comes before a vowel, as in Breuer
	 * 791900 but not Freud.
	 *
	 * 4. The letter H is coded at the beginning of a name, as in Haber 579000, or
	 * preceding a vowel, as in Manheim 665600, otherwise it is not coded.
	 *
	 * 5. When adjacent sounds can combine to form a larger sound, they are given
	 * the code number of the larger sound.  Mintz which is not coded MIN-T-Z but
	 * MIN-TZ 664000.
	 *
	 * 6. When adjacent letters have the same code number, they are coded as one
	 * sound, as in TOPF, which is not coded TO-P-F 377000 but TO-PF 370000.
	 * Exceptions to this rule are the letter combinations MN and NM, whose letters
	 * are coded separately, as in Kleinman, which is coded 586660 not 586600.
	 *
	 * 7. When a surname consists or more than one word, it is coded as if one word,
	 * such as Ben Aron which is treated as Benaron.
	 *
	 * 8. Several letter and letter combinations pose the problem that they may
	 * sound in one of two ways.  The letter and letter combinations CH, CK, C, J,
	 * and RS are assigned two possible code numbers.
	 *
	 * For more info, see http://www.jewishgen.org/InfoFiles/soundex.html
	 */

	/**
	 * D-M transformation table in the form of finite-state machine.
	 * Every element of the table having member with zero index represents
	 * legal FSM state; every non-zero key is the transition rule.
	 *
	 * Every legal state comprises tree values chosen according to the position
	 * of the letter combination in the word:
	 *   0: start of a word;
	 *   1: before a vowel;
	 *   2: any other situation.
	 */
	var codes = {
	    A: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]],
	        U: [[0, 7, -1]]},
	    B: [[7, 7, 7]],
	    C: {
	        0: [5, 5, 5],
	        Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], Z: [[4, 4, 4]]},
	        K: [[5, 5, 5], [45, 45, 45]],
	        H: {0: [5, 5, 5], S: [[5, 54, 54]]}},
	    D: {
	        0: [3, 3, 3],
	        T: [[3, 3, 3]],
	        Z: {0: [4, 4, 4], H: [[4, 4, 4]], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], H: [[4, 4, 4]], Z: [[4, 4, 4]]},
	        R: {S: [[4, 4, 4]], Z: [[4, 4, 4]]}},
	    E: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]],
	        U: [[1, 1, -1]],
	        W: [[1, 1, -1]]},
	    F: {
	        0: [7, 7, 7],
	        B: [[7, 7, 7]]},
	    G: [[5, 5, 5]],
	    H: [[5, 5, -1]],
	    I: {
	        0: [0, -1, -1],
	        A: [[1, -1, -1]],
	        E: [[1, -1, -1]],
	        O: [[1, -1, -1]],
	        U: [[1, -1, -1]]},
	    J: [[4, 4, 4]],
	    K: {
	        0: [5, 5, 5],
	        H: [[5, 5, 5]],
	        S: [[5, 54, 54]]},
	    L: [[8, 8, 8]],
	    M: {
	        0: [6, 6, 6],
	        N: [[66, 66, 66]]},
	    N: {
	        0: [6, 6, 6],
	        M: [[66, 66, 66]]},
	    O: {
	        0: [0, -1, -1],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]]},
	    P: {
	        0: [7, 7, 7],
	        F: [[7, 7, 7]],
	        H: [[7, 7, 7]]},
	    Q: [[5, 5, 5]],
	    R: {
	        0: [9, 9, 9],
	        Z: [[94, 94, 94], [94, 94, 94]],
	        S: [[94, 94, 94], [94, 94, 94]]},
	    S: {
	        0: [4, 4, 4],
	        Z: {0: [4, 4, 4], T: [[2, 43, 43]], C: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, D: [[2, 43, 43]]},
	        D: [[2, 43, 43]],
	        T: {0: [2, 43, 43], R: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]], C: {H: [[2, 4, 4]]}}},
	        C: {0: [2, 4, 4], H: {0: [4, 4, 4], T: {0: [2, 43, 43], S: {C: {H: [[2, 4, 4]]}, H: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}}, D: [[2, 43, 43]]}},
	        H: {0: [4, 4, 4], T: {0: [2, 43, 43], C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]]}}, C: {H: [[2, 4, 4]]}, D: [[2, 43, 43]]}},
	    T: {
	        0: [3, 3, 3],
	        C: {0: [4, 4, 4], H: [[4, 4, 4]]},
	        Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
	        S: {0: [4, 4, 4], Z: [[4, 4, 4]], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}},
	        T: {S: {0: [4, 4, 4], Z: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}, C: {H: [[4, 4, 4]]}, Z: [[4, 4, 4]]},
	        H: [[3, 3, 3]],
	        R: {Z: [[4, 4, 4]], S: [[4, 4, 4]]}},
	    U: {
	        0: [0, -1, -1],
	        E: [[0, -1, -1]],
	        I: [[0, 1, -1]],
	        J: [[0, 1, -1]],
	        Y: [[0, 1, -1]]},
	    V: [[7, 7, 7]],
	    W: [[7, 7, 7]],
	    X: [[5, 54, 54]],
	    Y: [[1, -1, -1]],
	    Z: {
	        0: [4, 4, 4],
	        D: {0: [2, 43, 43], Z: {0: [2, 4, 4], H: [[2, 4, 4]]}},
	        H: {0: [4, 4, 4], D: {0: [2, 43, 43], Z: {H: [[2, 4, 4]]}}},
	        S: {0: [4, 4, 4], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}}
	};


	function process(word, codeLength) {
		codeLength = codeLength || 6;
	    word = word.toUpperCase();
	    var output = '';

	    var pos = 0, lastCode = -1;
	    while (pos < word.length) {
	        var substr = word.slice(pos);
	        var rules = findRules(substr);

	        var code;
	        if (pos == 0) {
	            // at the beginning of the word
	            code = rules.mapping[0];
	        } else if (substr[rules.length] && findRules(substr[rules.length]).mapping[0] == 0) {
	            // before a vowel
	            code = rules.mapping[1];
	        } else {
	            // any other situation
	            code = rules.mapping[2];
	        }

	        if ((code != -1) && (code != lastCode)) output += code;
	        lastCode = code;
	        pos += rules.length;

	    }

	    return normalizeLength(output, codeLength);
	}


	function findRules(str) {
	    var state = codes[str[0]];
	    var legalState = state || [[-1,-1,-1]],
	        charsInvolved = 1;

	    for (var offs = 1; offs < str.length; offs++) {
	        if (!state || !state[str[offs]]) break;

	        state = state[str[offs]];
	        if (state[0]) {
	            legalState = state;
	            charsInvolved = offs + 1;
	        }
	    }

	    return {
	        length: charsInvolved,
	        mapping: legalState[0]
	    };
	}


	/**
	 * Pad right with zeroes or cut excess symbols to fit length
	 */
	function normalizeLength(token, length) {
		length = length || 6;
		if (token.length < length) {
			token += (new Array(length - token.length + 1)).join('0');
		}
	    return token.slice(0, length);
	}

	var Phonetic = __webpack_require__(6);
	var soundex = new Phonetic();
	soundex.process = process;
	module.exports = soundex;



/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(18);

	// denote groups of consecutive consonants with a C and consecutive vowels
	// with a V.
	function categorizeGroups(token) {
	    return token.replace(/[^aeiouy]+y/g, 'CV').replace(/[aeiou]+/g, 'V').replace(/[^V]+/g, 'C');
	}

	// denote single consonants with a C and single vowels with a V
	function categorizeChars(token) {
	    return token.replace(/[^aeiouy]y/g, 'CV').replace(/[aeiou]/g, 'V').replace(/[^V]/g, 'C');
	}

	// calculate the "measure" M of a word. M is the count of VC sequences dropping
	// an initial C if it exists and a trailing V if it exists.
	function measure(token) {
	    if(!token)
	    	return -1;

	    return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;
	}

	// determine if a token end with a double consonant i.e. happ
	function endsWithDoublCons(token) {
	    return token.match(/([^aeiou])\1$/);
	}

	// replace a pattern in a word. if a replacement occurs an optional callback
	// can be called to post-process the result. if no match is made NULL is
	// returned.
	function attemptReplace(token, pattern, replacement, callback) {
	    var result = null;
	    
	    if((typeof pattern == 'string') && token.substr(0 - pattern.length) == pattern)
	        result = token.replace(new RegExp(pattern + '$'), replacement);
	    else if((pattern instanceof RegExp) && token.match(pattern))
	        result = token.replace(pattern, replacement);
	        
	    if(result && callback)
	        return callback(result);
	    else
	        return result;
	}

	// attempt to replace a list of patterns/replacements on a token for a minimum
	// measure M.
	function attemptReplacePatterns(token, replacements, measureThreshold) {
	    var replacement = token;

	    for(var i = 0; i < replacements.length; i++) {   
	    	if(measureThreshold == null || measure(attemptReplace(token, replacements[i][0], replacements[i][1])) > measureThreshold) {
	    	    replacement = attemptReplace(replacement, replacements[i][0], replacements[i][2]) || replacement;
	        }
	    }
	    
	    return replacement;
	}

	// replace a list of patterns/replacements on a word. if no match is made return
	// the original token.
	function replacePatterns(token, replacements, measureThreshold) {
	    return attemptReplacePatterns(token, replacements, measureThreshold) || token;
	}

	// TODO: this should replace all of the messy replacement stuff above
	function replaceRegex(token, regex, includeParts, minimumMeasure) {
	    var parts;
	    var result = '';

	    if(regex.test(token)) {
	        parts = regex.exec(token);

	        includeParts.forEach(function(i) {
	            result += parts[i];
	        });
	    }

	    if(measure(result) > minimumMeasure) {
	        return result;
	    }

	    return null;
	}

	// step 1a as defined for the porter stemmer algorithm. 
	function step1a(token) {    
	    if(token.match(/(ss|i)es$/)) {
	        return token.replace(/(ss|i)es$/, '$1');
	    }

	    if(token.substr(-1) == 's' && token.substr(-2, 1) != 's' && token.length > 2) {
	        return token.replace(/s?$/, '');
	    }

	    return token;
	}

	// step 1b as defined for the porter stemmer algorithm. 
	function step1b(token) {   
	    if(token.substr(-3) == 'eed') {
	        if(measure(token.substr(0, token.length - 3)) > 0)
	            return token.replace(/eed$/, 'ee');
	    } else {
	        var result = attemptReplace(token, /(ed|ing)$/, '', function(token) {
	            if(categorizeGroups(token).indexOf('V') >= 0) {
	                result = attemptReplacePatterns(token, [['at', '', 'ate'],  ['bl', '', 'ble'], ['iz', '', 'ize']]);

	                if(result != token) {
	        		    return result;
	        		} else {
	        		  if(endsWithDoublCons(token) && token.match(/[^lsz]$/)) {
	        			 return token.replace(/([^aeiou])\1$/, '$1');
	                    }

	        		  if(measure(token) == 1 && categorizeChars(token).substr(-3) == 'CVC' && token.match(/[^wxy]$/)) {
	        			 return token + 'e';
	                    }
	        		}                

	        		return token;
	    	    }
	    	    
	    	    return null;
	    	});
	    	
	    	if(result) {
	    	    return result;
	        }
	    }

	    return token;   
	}

	// step 1c as defined for the porter stemmer algorithm. 
	function step1c(token) {
	    var categorizedGroups = categorizeGroups(token);

	    if(token.substr(-1) == 'y' && categorizedGroups.substr(0, categorizedGroups.length - 1).indexOf('V') > -1) {
	        return token.replace(/y$/, 'i');
	    }

	    return token;
	}

	// step 2 as defined for the porter stemmer algorithm. 
	function step2(token) {
	    token = replacePatterns(token, [['ational', '', 'ate'], ['tional', '', 'tion'], ['enci', '', 'ence'], ['anci', '', 'ance'],
	        ['izer', '', 'ize'], ['abli', '', 'able'], ['bli', '', 'ble'], ['alli', '', 'al'], ['entli', '', 'ent'], ['eli', '', 'e'],
	        ['ousli', '', 'ous'], ['ization', '', 'ize'], ['ation', '', 'ate'], ['ator', '', 'ate'],['alism', '', 'al'],
	        ['iveness', '', 'ive'], ['fulness', '', 'ful'], ['ousness', '', 'ous'], ['aliti', '', 'al'],
	        ['iviti', '', 'ive'], ['biliti', '', 'ble'], ['logi', '', 'log']], 0);

	    return token;
	}

	// step 3 as defined for the porter stemmer algorithm. 
	function step3(token) {
	    return replacePatterns(token, [['icate', '', 'ic'], ['ative', '', ''], ['alize', '', 'al'],
					   ['iciti', '', 'ic'], ['ical', '', 'ic'], ['ful', '', ''], ['ness', '', '']], 0);
	}

	// step 4 as defined for the porter stemmer algorithm. 
	function step4(token) {
	    return replaceRegex(token, /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, [1], 1) || 
	        replaceRegex(token, /^(.+?)(s|t)(ion)$/, [1, 2], 1) ||
	        token; 
	}

	// step 5a as defined for the porter stemmer algorithm. 
	function step5a(token) {
	    var m = measure(token.replace(/e$/, ''));



	    if(m > 1 || (m == 1 && !(categorizeChars(token).substr(-4, 3) == 'CVC' && token.match(/[^wxy].$/)))) {
	        token = token.replace(/e$/, '');
	    }

	    return token;
	}

	// step 5b as defined for the porter stemmer algorithm. 
	function step5b(token) {
	    if(measure(token) > 1) {
	       return token.replace(/ll$/, 'l'); 
	    }
	    
	    return token;
	}

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
	    if(token.length < 3) return token;
	    return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();
	};

	//exports for tests
	PorterStemmer.categorizeGroups = categorizeGroups;
	PorterStemmer.measure = measure;
	PorterStemmer.step1a = step1a;
	PorterStemmer.step1b = step1b;
	PorterStemmer.step1c = step1c;
	PorterStemmer.step2 = step2;
	PorterStemmer.step3 = step3;
	PorterStemmer.step4 = step4;
	PorterStemmer.step5a = step5a;
	PorterStemmer.step5b = step5b;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(7);
	var Tokenizer = __webpack_require__(8);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.addStopWord = function(stopWord) {
	        stopwords.words.push(stopWord);
	    };

	    stemmer.addStopWords = function(moreStopWords) {
	        stopwords.words = stopwords.words.concat(moreStopWords);
	    };

	    stemmer.removeStopWord = function(stopWord) {
	        this.removeStopWords([stopWord])
	    };

	    stemmer.removeStopWords = function(moreStopWords) {
	        moreStopWords.forEach(function(stopWord){
	            var idx = stopwords.words.indexOf(stopWord);
	            if (idx >= 0) {
	                stopwords.words.splice(idx, 1);
	            }
	        });

	    };


	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        var lowercaseText = text.toLowerCase();
	        var tokens = new Tokenizer().tokenize(lowercaseText);

	        if (keepStops) {
	            tokens.forEach(function(token) {
	                stemmedTokens.push(stemmer.stem(token));
	            });
	        }

	        else {
	            tokens.forEach(function(token) {
	                if (stopwords.words.indexOf(token) == -1)
	                    stemmedTokens.push(stemmer.stem(token));
	            });
	        }

	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };

	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Porter Stemmer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(20);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// disabled stemming for Farsi
	// Farsi stemming will be supported soon
	PorterStemmer.stem = function(token) {
	    return token;
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Stemmer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(21);
	var Tokenizer = __webpack_require__(22);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if(keepStops || stopwords.words.indexOf(token) == -1)
	                stemmedTokens.push(stemmer.stem(token));
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 21 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Stop Words by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    // Words
	    'از', 'با', 'یه', 'برای', 'و', 'باید', 'شاید',

	    // Symbols
	    '؟', '!', '٪', '.', '،', '؛', ':', ';', ',',
	    
	    // Numbers
	    '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', '۰'
	];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel
	Farsi Aggressive Tokenizer by Fardin Koochaki <me@fardinak.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.clearEmptyString = function(array) {
		return array.filter(function(a) {
			return a != '';
		});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(new RegExp('\.\:\+\-\=\(\)\"\'\!\?\،\,\؛\;', 'g'), ' ');
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    text = this.clearText(text);
	    return this.clearEmptyString(text.split(/\s+/));
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*
	Copyright (c) 2014, Ismaël Héry

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * Spec for the French Porter Stemmer can be found at:
	 * http://snowball.tartarus.org/algorithms/french/stemmer.html
	 */

	var Stemmer = __webpack_require__(24);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// Export
	PorterStemmer.stem = stem;

	// Exports for test purpose
	PorterStemmer.prelude = prelude;
	PorterStemmer.regions = regions;
	PorterStemmer.endsinArr = endsinArr;

	/**
	 * Stem a word thanks to Porter Stemmer rules
	 * @param  {String} token Word to be stemmed
	 * @return {String}       Stemmed word
	 */
	function stem(token) {
	  token = prelude(token.toLowerCase());

	  if (token.length == 1)
	    return token;

	  var regs = regions(token);

	  var r1_txt, r2_txt, rv_txt;
	  r1_txt = token.substring(regs.r1);
	  r2_txt = token.substring(regs.r2);
	  rv_txt = token.substring(regs.rv);

	  // Step 1
	  var beforeStep1 = token;
	  var suf, pref2, pref3, letterBefore, letter2Before, i;
	  var doStep2a = false;

	  if ((suf = endsinArr(r2_txt, ['ance', 'iqUe', 'isme', 'able', 'iste', 'eux', 'ances', 'iqUes', 'ismes', 'ables', 'istes'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications'])) != '') {
	    if (endsinArr(r2_txt, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications']) != '') {
	      token = token.slice(0, -suf.length); // delete
	    } else {
	      token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
	    }
	  } else if ((suf = endsinArr(r2_txt, ['atrice', 'ateur', 'ation', 'atrices', 'ateurs', 'ations'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['logie', 'logies'])) != '') {
	    token = token.slice(0, -suf.length) + 'log'; // replace with log
	  } else if ((suf = endsinArr(r2_txt, ['usion', 'ution', 'usions', 'utions'])) != '') {
	    token = token.slice(0, -suf.length) + 'u'; // replace with u
	  } else if ((suf = endsinArr(r2_txt, ['ence', 'ences'])) != '') {
	    token = token.slice(0, -suf.length) + 'ent'; // replace with ent
	  }
	  // ement(s)
	  else if ((suf = endsinArr(r1_txt, ['issement', 'issements'])) != '') {
	    if (!isVowel(token[token.length - suf.length - 1])) {
	      token = token.slice(0, -suf.length); // delete
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  } else if ((suf = endsinArr(r2_txt, ['ativement', 'ativements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['ivement', 'ivements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['eusement', 'eusements'])) != '') {
	    if ((suf = endsinArr(r2_txt, ['eusement', 'eusements'])) != '')
	      token = token.slice(0, -suf.length); // delete
	    else if ((suf = endsinArr(r1_txt, ['eusement', 'eusements'])) != '')
	      token = token.slice(0, -suf.length) + 'eux'; // replace by eux
	    else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '')
	      token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['ablement', 'ablements', 'iqUement', 'iqUements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(rv_txt, ['ièrement', 'ièrements', 'Ièrement', 'Ièrements'])) != '') {
	    token = token.slice(0, -suf.length) + 'i'; // replace by i
	  } else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  }
	  // ité(s)
	  else if ((suf = endsinArr(token, ['icité', 'icités'])) != '') {
	    if (endsinArr(r2_txt, ['icité', 'icités']) != '')
	      token = token.slice(0, -suf.length); // delete
	    else
	      token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
	  } else if ((suf = endsinArr(token, ['abilité', 'abilités'])) != '') {
	    if (endsinArr(r2_txt, ['abilité', 'abilités']) != '')
	      token = token.slice(0, -suf.length); // delete
	    else
	      token = token.slice(0, -suf.length) + 'abl'; // replace by abl
	  } else if ((suf = endsinArr(r2_txt, ['ité', 'ités'])) != '') {
	    token = token.slice(0, -suf.length); // delete if in R2
	  } else if ((suf = endsinArr(token, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
	    if ((suf = endsinArr(r2_txt, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
	      token = token.slice(0, -suf.length - 2) + 'iqU'; // replace with iqU
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  } else if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r2_txt, ['if', 'ive', 'ifs', 'ives'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(token, ['eaux'])) != '') {
	    token = token.slice(0, -suf.length) + 'eau'; // replace by eau
	  } else if ((suf = endsinArr(r1_txt, ['aux'])) != '') {
	    token = token.slice(0, -suf.length) + 'al'; // replace by al
	  } else if ((suf = endsinArr(r2_txt, ['euse', 'euses'])) != '') {
	    token = token.slice(0, -suf.length); // delete
	  } else if ((suf = endsinArr(r1_txt, ['euse', 'euses'])) != '') {
	    token = token.slice(0, -suf.length) + 'eux'; // replace by eux
	  } else if ((suf = endsinArr(rv_txt, ['amment'])) != '') {
	    token = token.slice(0, -suf.length) + 'ant'; // replace by ant
	    doStep2a = true;
	  } else if ((suf = endsinArr(rv_txt, ['emment'])) != '') {
	    token = token.slice(0, -suf.length) + 'ent'; // replace by ent
	    doStep2a = true;
	  } else if ((suf = endsinArr(rv_txt, ['ment', 'ments'])) != '') {
	    // letter before must be a vowel in RV
	    letterBefore = token[token.length - suf.length - 1];
	    if (isVowel(letterBefore) && endsin(rv_txt, letterBefore + suf)) {
	      token = token.slice(0, -suf.length); // delete
	      doStep2a = true;
	    }
	  }

	  // re compute regions
	  r1_txt = token.substring(regs.r1);
	  r2_txt = token.substring(regs.r2);
	  rv_txt = token.substring(regs.rv);

	  // Step 2a
	  var beforeStep2a = token;
	  var step2aDone = false;
	  if (beforeStep1 === token || doStep2a) {
	    step2aDone = true;
	    if ((suf = endsinArr(rv_txt, ['îmes', 'ît', 'îtes', 'i', 'ie', 'Ie', 'ies', 'ir', 'ira', 'irai', 'iraIent', 'irais', 'irait', 'iras', 'irent', 'irez', 'iriez', 'irions', 'irons', 'iront', 'is', 'issaIent', 'issais', 'issait', 'issant', 'issante', 'issantes', 'issants', 'isse', 'issent', 'isses', 'issez', 'issiez', 'issions', 'issons', 'it'])) != '') {
	      letterBefore = token[token.length - suf.length - 1];
	      if (!isVowel(letterBefore) && endsin(rv_txt, letterBefore + suf))
	        token = token.slice(0, -suf.length); // delete
	    }
	  }

	  // Step 2b
	  if (step2aDone && token === beforeStep2a) {
	    if ((suf = endsinArr(rv_txt, ['é', 'ée', 'ées', 'és', 'èrent', 'er', 'era', 'erai', 'eraIent', 'erais', 'erait', 'eras', 'erez', 'eriez', 'erions', 'erons', 'eront', 'ez', 'iez', 'Iez'])) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    } else if ((suf = endsinArr(rv_txt, ['ions'])) != '' && endsinArr(r2_txt, ['ions'])) {
	      token = token.slice(0, -suf.length); // delete
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    // add 'Ie' suffix to pass test for 'évanouie'
	    else if ((suf = endsinArr(rv_txt, ['âmes', 'ât', 'âtes', 'a', 'ai', 'aIent', 'ais', 'ait', 'ant', 'ante', 'antes', 'ants', 'as', 'asse', 'assent', 'asses', 'assiez', 'assions'])) != '') {
	      token = token.slice(0, -suf.length); // delete

	      letterBefore = token[token.length - 1];
	      if (letterBefore === 'e' && endsin(rv_txt, 'e' + suf))
	        token = token.slice(0, -1);

	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	  }

	  // Step 3
	  if (!(token === beforeStep1)) {
	    if (token[token.length - 1] === 'Y')
	      token = token.slice(0, -1) + 'i';
	    if (token[token.length - 1] === 'ç')
	      token = token.slice(0, -1) + 'c';
	  } // Step 4
	  else {
	    letterBefore = token[token.length - 1];
	    letter2Before = token[token.length - 2];

	    if (letterBefore === 's' && ['a', 'i', 'o', 'u', 'è', 's'].indexOf(letter2Before) == -1) {
	      token = token.slice(0, -1);
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }

	    if ((suf = endsinArr(r2_txt, ['ion'])) != '') {
	      letterBefore = token[token.length - suf.length - 1];
	      if (letterBefore === 's' || letterBefore === 't') {
	        token = token.slice(0, -suf.length); // delete
	        r1_txt = token.substring(regs.r1);
	        r2_txt = token.substring(regs.r2);
	        rv_txt = token.substring(regs.rv);
	      }
	    }

	    if ((suf = endsinArr(rv_txt, ['ier', 'ière', 'Ier', 'Ière'])) != '') {
	      token = token.slice(0, -suf.length) + 'i'; // replace by i
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(rv_txt, 'e')) != '') {
	      token = token.slice(0, -suf.length); // delete
	      r1_txt = token.substring(regs.r1);
	      r2_txt = token.substring(regs.r2);
	      rv_txt = token.substring(regs.rv);
	    }
	    if ((suf = endsinArr(rv_txt, 'ë')) != '') {
	      if (token.slice(token.length - 3, -1) === 'gu')
	        token = token.slice(0, -suf.length); // delete
	    }
	  }

	  // Step 5
	  if ((suf = endsinArr(token, ['enn', 'onn', 'ett', 'ell', 'eill'])) != '') {
	    token = token.slice(0, -1); // delete last letter
	  }

	  // Step 6
	  i = token.length - 1;
	  while (i > 0) {
	    if (!isVowel(token[i])) {
	      i--;
	    } else if (i !== token.length - 1 && (token[i] === 'é' || token[i] === 'è')) {
	      token = token.substring(0, i) + 'e' + token.substring(i + 1, token.length);
	      break;
	    } else {
	      break;
	    }
	  }

	  return token.toLowerCase();

	};

	/**
	 * Compute r1, r2, rv regions as required by french porter stemmer algorithm
	 * @param  {String} token Word to compute regions on
	 * @return {Object}       Regions r1, r2, rv as offsets from the begining of the word
	 */
	function regions(token) {
	  var r1, r2, rv, len;
	  var i;

	  r1 = r2 = rv = len = token.length;

	  // R1 is the region after the first non-vowel following a vowel,
	  for (var i = 0; i < len - 1 && r1 == len; i++) {
	    if (isVowel(token[i]) && !isVowel(token[i + 1])) {
	      r1 = i + 2;
	    }
	  }
	  // Or is the null region at the end of the word if there is no such non-vowel.

	  // R2 is the region after the first non-vowel following a vowel in R1
	  for (i = r1; i < len - 1 && r2 == len; i++) {
	    if (isVowel(token[i]) && !isVowel(token[i + 1])) {
	      r2 = i + 2;
	    }
	  }
	  // Or is the null region at the end of the word if there is no such non-vowel.

	  // RV region
	  var three = token.slice(0, 3);
	  if (isVowel(token[0]) && isVowel(token[1])) {
	    rv = 3;
	  }
	  if (three === 'par' || three == 'col' || three === 'tap')
	    rv = 3;
	  // the region after the first vowel not at the beginning of the word or null
	  else {
	    for (i = 1; i < len - 1 && rv == len; i++) {
	      if (isVowel(token[i])) {
	        rv = i + 1;
	      }
	    }
	  }

	  return {
	    r1: r1,
	    r2: r2,
	    rv: rv
	  };
	};

	/**
	 * Pre-process/prepare words as required by french porter stemmer algorithm
	 * @param  {String} token Word to be prepared
	 * @return {String}       Prepared word
	 */
	function prelude(token) {
	  token = token.toLowerCase();

	  var result = '';
	  var i = 0;

	  // special case for i = 0 to avoid '-1' index
	  if (token[i] === 'y' && isVowel(token[i + 1])) {
	    result += token[i].toUpperCase();
	  } else {
	    result += token[i];
	  }

	  for (i = 1; i < token.length; i++) {
	    if ((token[i] === 'u' || token[i] === 'i') && isVowel(token[i - 1]) && isVowel(token[i + 1])) {
	      result += token[i].toUpperCase();
	    } else if (token[i] === 'y' && (isVowel(token[i - 1]) || isVowel(token[i + 1]))) {
	      result += token[i].toUpperCase();
	    } else if (token[i] === 'u' && token[i - 1] === 'q') {
	      result += token[i].toUpperCase();
	    } else {
	      result += token[i];
	    }
	  }

	  return result;
	};

	/**
	 * Return longest matching suffixes for a token or '' if no suffix match
	 * @param  {String} token    Word to find matching suffix
	 * @param  {Array} suffixes  Array of suffixes to test matching
	 * @return {String}          Longest found matching suffix or ''
	 */
	function endsinArr(token, suffixes) {
	  var i, longest = '';
	  for (i = 0; i < suffixes.length; i++) {
	    if (endsin(token, suffixes[i]) && suffixes[i].length > longest.length)
	      longest = suffixes[i];
	  }

	  return longest;
	};


	function isVowel(letter) {
	  return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'y' || letter == 'â' || letter == 'à' || letter == 'ë' ||
	    letter == 'é' || letter == 'ê' || letter == 'è' || letter == 'ï' || letter == 'î' || letter == 'ô' || letter == 'û' || letter == 'ù');
	};

	function endsin(token, suffix) {
	  if (token.length < suffix.length) return false;
	  return (token.slice(-suffix.length) == suffix);
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Ismaël Héry

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(25);
	var Tokenizer = __webpack_require__(26);

	module.exports = function() {
	   var stemmer = this;

	   stemmer.stem = function(token) {
	      return token;
	   };

	   stemmer.tokenizeAndStem = function(text, keepStops) {
	      var stemmedTokens = [];

	      new Tokenizer().tokenize(text).forEach(function(token) {
	         if (keepStops || stopwords.words.indexOf(token) == -1) {
	            var resultToken = token.toLowerCase();
	            if (resultToken.match(/[a-zâàëéêèïîôûùç0-9]/gi)) {
	               resultToken = stemmer.stem(resultToken);
	            }
	            stemmedTokens.push(resultToken);
	         }
	      });

	      return stemmedTokens;
	   };

	   stemmer.attach = function() {
	      String.prototype.stem = function() {
	         return stemmer.stem(this);
	      };

	      String.prototype.tokenizeAndStem = function(keepStops) {
	         return stemmer.tokenizeAndStem(this, keepStops);
	      };
	   };
	}


/***/ },
/* 25 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Ismaël Héry

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	// A list of commonly used french words that have little meaning and can be excluded
	// from analysis.

	var words = ['être', 'avoir', 'faire',
	    'a',
	    'au',
	    'aux',
	    'avec',
	    'ce',
	    'ces',
	    'dans',
	    'de',
	    'des',
	    'du',
	    'elle',
	    'en',
	    'et',
	    'eux',
	    'il',
	    'je',
	    'la',
	    'le',
	    'leur',
	    'lui',
	    'ma',
	    'mais',
	    'me',
	    'même',
	    'mes',
	    'moi',
	    'mon',
	    'ne',
	    'nos',
	    'notre',
	    'nous',
	    'on',
	    'ou',
	    'où',
	    'par',
	    'pas',
	    'pour',
	    'qu',
	    'que',
	    'qui',
	    'sa',
	    'se',
	    'ses',
	    'son',
	    'sur',
	    'ta',
	    'te',
	    'tes',
	    'toi',
	    'ton',
	    'tu',
	    'un',
	    'une',
	    'vos',
	    'votre',
	    'vous',
	    'c',
	    'd',
	    'j',
	    'l',
	    'à',
	    'm',
	    'n',
	    's',
	    't',
	    'y',
	    'été',
	    'étée',
	    'étées',
	    'étés',
	    'étant',
	    'suis',
	    'es',
	    'est',
	    'sommes',
	    'êtes',
	    'sont',
	    'serai',
	    'seras',
	    'sera',
	    'serons',
	    'serez',
	    'seront',
	    'serais',
	    'serait',
	    'serions',
	    'seriez',
	    'seraient',
	    'étais',
	    'était',
	    'étions',
	    'étiez',
	    'étaient',
	    'fus',
	    'fut',
	    'fûmes',
	    'fûtes',
	    'furent',
	    'sois',
	    'soit',
	    'soyons',
	    'soyez',
	    'soient',
	    'fusse',
	    'fusses',
	    'fût',
	    'fussions',
	    'fussiez',
	    'fussent',
	    'ayant',
	    'eu',
	    'eue',
	    'eues',
	    'eus',
	    'ai',
	    'as',
	    'avons',
	    'avez',
	    'ont',
	    'aurai',
	    'auras',
	    'aura',
	    'aurons',
	    'aurez',
	    'auront',
	    'aurais',
	    'aurait',
	    'aurions',
	    'auriez',
	    'auraient',
	    'avais',
	    'avait',
	    'avions',
	    'aviez',
	    'avaient',
	    'eut',
	    'eûmes',
	    'eûtes',
	    'eurent',
	    'aie',
	    'aies',
	    'ait',
	    'ayons',
	    'ayez',
	    'aient',
	    'eusse',
	    'eusses',
	    'eût',
	    'eussions',
	    'eussiez',
	    'eussent',
	    'ceci',
	    'cela',
	    'cet',
	    'cette',
	    'ici',
	    'ils',
	    'les',
	    'leurs',
	    'quel',
	    'quels',
	    'quelle',
	    'quelles',
	    'sans',
	    'soi'
	];

	exports.words = words;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-z0-9äâàéèëêïîöôùüûœç]+/i));
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(28);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	function attemptReplacePatterns(token, patterns) {
		var replacement = null;
		var i = 0, isReplaced = false;
		while ((i < patterns.length) && !isReplaced) {
			if (patterns[i][0].test(token)) {
				replacement = token.replace(patterns[i][0], patterns[i][1]);
				isReplaced = true;
			}
			i++;
		}
		return replacement;
	};

	function perfectiveGerund(token) {
		var result = attemptReplacePatterns(token, [
				[/[ая]в(ши|шись)$/g, ''],
				[/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']
			]);
		return result;
	};

	function adjectival(token) {
		var result = adjective(token);
		if (result != null) {
			var pariticipleResult = participle(result);
			result = pariticipleResult ? pariticipleResult : result;
		}
		return result;
	};

	function adjective(token) {
		var result = attemptReplacePatterns(token, [
				[/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']
			]);
		return result;
	};

	function participle(token) {
		var result = attemptReplacePatterns(token, [
			[/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'],
			[/(ивш|ывш|ующ)$/g, '']
		]);
		return result;
	};

	function reflexive(token) {
		var result = attemptReplacePatterns(token, [
			[/(ся|сь)$/g, '']
		]);
		return result;
	};

	function verb(token) {
		var result = attemptReplacePatterns(token, [
			[/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'],
			[/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']
		]);
		return result;
	};

	function noun(token) {
		var result = attemptReplacePatterns(token, [
			[/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']
		]);
		return result;
	};

	function superlative (token) {
		var result = attemptReplacePatterns(token, [
			[/(ейш|ейше)$/g, '']
		]);
		return result;
	};

	function derivational (token) {
		var result = attemptReplacePatterns(token, [
			[/(ост|ость)$/g, '']
		]);
		return result;
	};

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		token = token.toLowerCase().replace(/ё/g, 'е');
		var volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g;
		var RV = volwesRegexp.exec(token);
		if (!RV || RV.length < 3) {
			return token;
		}
		var head = RV[1];
		RV = RV[2];
		volwesRegexp.lastIndex = 0;
		var R2 = volwesRegexp.exec(RV);
		var result = perfectiveGerund(RV);
		if (result === null) {
			var resultReflexive = reflexive(RV) || RV;
			result = adjectival(resultReflexive);
			if (result === null) {
				result = verb(resultReflexive);
				if (result === null) {
					result = noun(resultReflexive);
					if (result === null) {
						result = resultReflexive;
					}
				}
			}
		}
		result = result.replace(/и$/g, '');
		var derivationalResult = result
		if (R2 && R2[2]) {
			derivationalResult = derivational(R2[2]);
			if (derivationalResult != null) {
				derivationalResult = derivational(result);
			} else {
				derivationalResult = result;
			}
		}

		var superlativeResult = superlative(derivationalResult) || derivationalResult;

		superlativeResult = superlativeResult.replace(/(н)н/g, '$1');
		superlativeResult = superlativeResult.replace(/ь$/g, '');
		return head + superlativeResult;
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(29);
	var Tokenizer = __webpack_require__(30);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[а-яё0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 29 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Polyakov Vladimir, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'о', 'после', 'все', 'также', 'и', 'другие', 'все', 'как', 'во', 'быть',
	    'потому', 'был', 'до', 'являюсь', 'между', 'все', 'но', 'от', 'иди', 'могу',
	    'подойди', 'мог', 'делал', 'делаю', 'каждый', 'для', 'откуда', 'иметь', 'имел',
	    'он', 'имеет', 'её', 'здесь', 'его', 'как', 'если', 'в', 'оно', 'за',
	    'делать', 'много', 'я', 'может быть', 'более', 'самый', 'должен',
	    'мой', 'никогда', 'сейчас', 'из', 'на', 'только', 'или', 'другой', 'другая',
	    'другое', 'наше', 'вне', 'конец', 'сказал', 'сказала', 'также', 'видел', 'c',
	    'немного', 'все еще', 'так', 'затем', 'тот', 'их', 'там', 'этот', 'они', 'те',
	    'через', 'тоже', 'под', 'над', 'очень', 'был', 'путь', 'мы', 'хорошо',
	    'что', 'где', 'который', 'пока', 'кто', 'с кем', 'хотел бы', 'ты', 'твои',
	    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н',
	    'o', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь',
	    'э', 'ю', 'я','$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};

	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(/[^a-zа-яё0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.clearText(text).split(' '));
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(32);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	function isVowel(letter){
		return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'á' || letter == 'é' ||
				letter == 'í' || letter == 'ó' || letter == 'ú');
	};

	function getNextVowelPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (isVowel(token[i])) return i;
				return length;
	};

	function getNextConsonantPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (!isVowel(token[i])) return i;
				return length;
	};


	function endsin(token, suffix) {
		if (token.length < suffix.length) return false;
		return (token.slice(-suffix.length) == suffix);
	};

	function endsinArr(token, suffixes) {
		for(var i=0;i<suffixes.length;i++){
			if (endsin(token, suffixes[i])) return suffixes[i];
		}
		return '';
	};

	function removeAccent(token) {
		var str=token.replace(/á/gi,'a');
		str=str.replace(/é/gi,'e');
		str=str.replace(/í/gi,'i');
		str=str.replace(/ó/gi,'o');
		str=str.replace(/ú/gi,'u');
		return str;
	};

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		token = token.toLowerCase();

		if (token.length<3){
			return token;
		}

		var r1,r2,rv,len= token.length;
		//looking for regions after vowels

		for(var i=0; i< token.length-1 && r1==len;i++){
	 		if(isVowel(token[i]) && !isVowel(token[i+1]) ){
	 			r1=i+2;
	 		}

		}

		for(var i=r1; i< token.length-1 && r2==len;i++){
			if(isVowel(token[i]) && !isVowel(token[i+1])){
				r2=i+2;
			}
		}

		if (len > 3) {
				if(isVowel(token[1])) {
					// If the second letter is a consonant, RV is the region after the next following vowel
					rv = getNextVowelPos(token, 2) +1;
				} else if (isVowel(token[0]) && isVowel(token[1])) {
					// or if the first two letters are vowels, RV is the region after the next consonant
					rv = getNextConsonantPos(token, 2) + 1;
				} else {
					//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
					rv = 3;
				}
			}

		var r1_txt = token.substring(r1-1);
		var r2_txt = token.substring(r2-1);
		var rv_txt = token.substring(rv-1);


		var token_orig = token;

		// Step 0: Attached pronoun
		var pronoun_suf = new Array('me', 'se', 'sela', 'selo', 'selas', 'selos', 'la', 'le', 'lo', 'las', 'les', 'los', 'nos');
		var pronoun_suf_pre1 = new Array('éndo', 'ándo', 'ár', 'ér', 'ír');
		var pronoun_suf_pre2 = new Array('ando', 'iendo', 'ar', 'er', 'ir');
		var suf = endsinArr(token, pronoun_suf);


		if (suf!='') {

			var pre_suff = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);

			if (pre_suff != '') {

					token = removeAccent(token.slice(0,-suf.length));
			} else {
				var pre_suff = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);

				if (pre_suff != '' ||
					(endsin(token, 'yendo' ) &&
					(token.slice(-suf.length-6,1) == 'u'))) {
					token = token.slice(0,-suf.length);
				}
			}
		}

			if (token != token_orig) {
				r1_txt = token.substring(r1-1);
				r2_txt = token.substring(r2-1);
				rv_txt = token.substring(rv-1);
			}
			var token_after0 = token;

			if ((suf = endsinArr(r2_txt, new Array('anza', 'anzas', 'ico', 'ica', 'icos', 'icas', 'ismo', 'ismos', 'able', 'ables', 'ible', 'ibles', 'ista', 'istas', 'oso', 'osa', 'osos', 'osas', 'amiento', 'amientos', 'imiento', 'imientos'))) != '') {
				token = token.slice(0, -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('icadora', 'icador', 'icación', 'icadoras', 'icadores', 'icaciones', 'icante', 'icantes', 'icancia', 'icancias', 'adora', 'ador', 'ación', 'adoras', 'adores', 'aciones', 'ante', 'antes', 'ancia', 'ancias'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('logía', 'logías'))) != '') {
				token = token.slice(0,  -suf.length)+ 'log';
			} else if ((suf =endsinArr(r2_txt, new  Array('ución', 'uciones'))) != '') {
				token = token.slice(0,  -suf.length) + 'u';
			} else if ((suf = endsinArr(r2_txt, new  Array('encia', 'encias'))) != '') {
				token = token.slice(0,  -suf.length)+ 'ente';
			} else if ((suf = endsinArr(r2_txt, new  Array('ativamente', 'ivamente', 'osamente', 'icamente', 'adamente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r1_txt, new  Array('amente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('antemente', 'ablemente', 'iblemente', 'mente'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('abilidad', 'abilidades', 'icidad', 'icidades', 'ividad', 'ividades', 'idad', 'idades'))) != '') {
				token = token.slice(0,  -suf.length);
			} else if ((suf = endsinArr(r2_txt, new  Array('ativa', 'ativo', 'ativas', 'ativos', 'iva', 'ivo', 'ivas', 'ivos'))) != '') {
				token = token.slice(0,  -suf.length);
			}

			if (token != token_after0) {
				r1_txt = token.substring(r1-1);
				r2_txt = token.substring(r2-1);
				rv_txt = token.substring(rv-1);
			}
			var token_after1 = token;

			if (token_after0 == token_after1) {
				// Do step 2a if no ending was removed by step 1.
				if ((suf = endsinArr(rv_txt, new Array('ya', 'ye', 'yan', 'yen', 'yeron', 'yendo', 'yo', 'yó', 'yas', 'yes', 'yais', 'yamos'))) != '' && (token.substring(suf.length-1,1) == 'u')) {
					token = token.slice(0, -suf.length);
				}

				if (token != token_after1) {
					r1_txt = token.substring(r1-1);
					r2_txt = token.substring(r2-1);
					rv_txt = token.substring(rv-1);
				}
				var token_after2a = token;

				// Do Step 2b if step 2a was done, but failed to remove a suffix.
				if (token_after2a == token_after1) {

					if ((suf = endsinArr(rv_txt,new Array('en', 'es', 'éis', 'emos'))) != '') {
						token = token.slice(0,-suf.length);
						if (endsin(token, 'gu')) {
							token = token.slice(0,-1);
						}
					} else if ((suf = endsinArr(rv_txt, new Array('arían', 'arías', 'arán', 'arás', 'aríais', 'aría', 'aréis', 'aríamos', 'aremos', 'ará', 'aré', 'erían', 'erías', 'erán', 'erás', 'eríais', 'ería', 'eréis', 'eríamos', 'eremos', 'erá', 'eré', 'irían', 'irías', 'irán', 'irás', 'iríais', 'iría', 'iréis', 'iríamos', 'iremos', 'irá', 'iré', 'aba', 'ada', 'ida', 'ía', 'ara', 'iera', 'ad', 'ed', 'id', 'ase', 'iese', 'aste', 'iste', 'an', 'aban', 'ían', 'aran', 'ieran', 'asen', 'iesen', 'aron', 'ieron', 'ado', 'ido', 'ando', 'iendo', 'ió', 'ar', 'er', 'ir', 'as', 'abas', 'adas', 'idas', 'ías', 'aras', 'ieras', 'ases', 'ieses', 'ís', 'áis', 'abais', 'íais', 'arais', 'ierais', '  aseis', 'ieseis', 'asteis', 'isteis', 'ados', 'idos', 'amos', 'ábamos', 'íamos', 'imos', 'áramos', 'iéramos', 'iésemos', 'ásemos'))) != '') {

						token = token.slice(0, -suf.length);

					}
				}
			}

			// Always do step 3.
			r1_txt = token.substring(r1-1);
			r2_txt = token.substring(r2-1);
			rv_txt = token.substring(rv-1);

			if ((suf = endsinArr(rv_txt, new Array('os', 'a', 'o', 'á', 'í', 'ó'))) != '') {
				token = token.slice(0, -suf.length);
			} else if ((suf = endsinArr(rv_txt ,new Array('e','é'))) != '') {
				token = token.slice(0,-1);
				rv_txt = token.substring(rv-1);
				if (endsin(rv_txt,'u') && endsin(token,'gu')) {
					token = token.slice(0,-1);
				}
			}

			return removeAccent(token);

	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(33);
	var Tokenizer = __webpack_require__(34);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[a-záéíóúüñ0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 33 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'a','un','el','ella','y','sobre','de','la','que','en',
	    'los','del','se','las','por','un','para','con','no',
	    'una','su','al','lo','como','más','pero','sus','le',
	    'ya','o','porque','cuando','muy','sin','sobre','también',
	    'me','hasta','donde','quien','desde','nos','durante','uno',
	    'ni','contra','ese','eso','mí','qué','otro','él','cual',
	    'poco','mi','tú','te','ti','sí',
	     '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-zA-Zá-úÁ-ÚñÑüÜ]+/));
	};


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012, Leonardo Fenu, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(36);

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;


	function isVowel(letter){
		return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'à' ||
				letter == 'è' || letter == 'ì' || letter == 'ò' || letter == 'ù');
	};

	function getNextVowelPos(token,start){
		start = start + 1;
		var length = token.length;
		for (var i = start; i < length; i++) {
			if (isVowel(token[i])) {
				return i;
			}
		}
		return length;
	};

	function getNextConsonantPos(token,start){
		length=token.length
				for (var i = start; i < length; i++)
					if (!isVowel(token[i])) return i;
				return length;
	};


	function endsin(token, suffix) {
		if (token.length < suffix.length) return false;
		return (token.slice(-suffix.length) == suffix);
	};

	function endsinArr(token, suffixes) {
		for(var i=0;i<suffixes.length;i++){
			if (endsin(token, suffixes[i])) return suffixes[i];
		}
		return '';
	};

	function replaceAcute(token) {
		var str=token.replace(/á/gi,'à');
		str=str.replace(/é/gi,'è');
		str=str.replace(/í/gi,'ì');
		str=str.replace(/ó/gi,'ò');
		str=str.replace(/ú/gi,'ù');
		return str;
	};

	function vowelMarking(token) {
		function replacer(match, p1, p2, p3){
	  		return p1+p2.toUpperCase()+p3;
		};	
		str=token.replace(/([aeiou])(i|u)([aeiou])/g, replacer);	
		return str;
	}


	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
		
		token = token.toLowerCase();
		token = replaceAcute(token);
		token = token.replace(/qu/g,'qU');	
		token = vowelMarking(token);
		
		if (token.length<3){
			return token;
		}

		var r1 = r2 = rv = len = token.length;
		// R1 is the region after the first non-vowel following a vowel, 
		for(var i=0; i < token.length-1 && r1==len;i++){
	 		if(isVowel(token[i]) && !isVowel(token[i+1]) ){
	 			r1=i+2;
	 		}
		}
		// Or is the null region at the end of the word if there is no such non-vowel.  

		// R2 is the region after the first non-vowel following a vowel in R1
		for(var i=r1; i< token.length-1 && r2==len;i++){
			if(isVowel(token[i]) && !isVowel(token[i+1])){
				r2=i+2;
			}
		}

		// Or is the null region at the end of the word if there is no such non-vowel. 

		// If the second letter is a consonant, RV is the region after the next following vowel, 
		
		// RV as follow

		if (len > 3) {
			if(!isVowel(token[1])) {
				// If the second letter is a consonant, RV is the region after the next following vowel
				rv = getNextVowelPos(token, 1) +1;
			} else if (isVowel(token[0]) && isVowel(token[1])) { 
				// or if the first two letters are vowels, RV is the region after the next consonant
				rv = getNextConsonantPos(token, 2) + 1;
			} else {
				//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
				rv = 3;
			}
		}

		var r1_txt = token.substring(r1);
		var r2_txt = token.substring(r2);
		var rv_txt = token.substring(rv);

		var token_orig = token;

		// Step 0: Attached pronoun

		var pronoun_suf = new Array('glieli','glielo','gliene','gliela','gliele','sene','tene','cela','cele','celi','celo','cene','vela','vele','veli','velo','vene','mela','mele','meli','melo','mene','tela','tele','teli','telo','gli','ci', 'la','le','li','lo','mi','ne','si','ti','vi');	
		var pronoun_suf_pre1 = new Array('ando','endo');	
		var pronoun_suf_pre2 = new Array('ar', 'er', 'ir');
		var suf = endsinArr(token, pronoun_suf);

		if (suf!='') {
			var pre_suff1 = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);
			var pre_suff2 = endsinArr(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);	
			
			if (pre_suff1 != '') {
				token = token.slice(0,-suf.length);
			}
			if (pre_suff2 != '') {
				token = token.slice(0,  -suf.length)+ 'e';
			}
		}

		if (token != token_orig) {
			r1_txt = token.substring(r1);
			r2_txt = token.substring(r2);
			rv_txt = token.substring(rv);
		}

		var token_after0 = token;

		// Step 1:  Standard suffix removal
		
		if ((suf = endsinArr(r2_txt, new  Array('ativamente','abilamente','ivamente','osamente','icamente'))) != '') {
			token = token.slice(0, -suf.length);	// delete
		} else if ((suf = endsinArr(r2_txt, new  Array('icazione','icazioni','icatore','icatori','azione','azioni','atore','atori'))) != '') {
			token = token.slice(0,  -suf.length);	// delete
		} else if ((suf = endsinArr(r2_txt, new  Array('logia','logie'))) != '') {
			token = token.slice(0,  -suf.length)+ 'log'; // replace with log
		} else if ((suf =endsinArr(r2_txt, new  Array('uzione','uzioni','usione','usioni'))) != '') {
			token = token.slice(0,  -suf.length) + 'u'; // replace with u
		} else if ((suf = endsinArr(r2_txt, new  Array('enza','enze'))) != '') {
			token = token.slice(0,  -suf.length)+ 'ente'; // replace with ente
		} else if ((suf = endsinArr(rv_txt, new  Array('amento', 'amenti', 'imento', 'imenti'))) != '') {
			token = token.slice(0,  -suf.length);	// delete
		} else if ((suf = endsinArr(r1_txt, new  Array('amente'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new Array('atrice','atrici','abile','abili','ibile','ibili','mente','ante','anti','anza','anze','iche','ichi','ismo','ismi','ista','iste','isti','istà','istè','istì','ico','ici','ica','ice','oso','osi','osa','ose'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new  Array('abilità', 'icità', 'ività', 'ità'))) != '') {
			token = token.slice(0,  -suf.length); // delete
		} else if ((suf = endsinArr(r2_txt, new  Array('icativa','icativo','icativi','icative','ativa','ativo','ativi','ative','iva','ivo','ivi','ive'))) != '') {
			token = token.slice(0,  -suf.length);
		}
		
		
		if (token != token_after0) {
			r1_txt = token.substring(r1);
			r2_txt = token.substring(r2);
			rv_txt = token.substring(rv);
		}
		

		var token_after1 = token;
		
		// Step 2:  Verb suffixes

		if (token_after0 == token_after1) {
			if ((suf = endsinArr(rv_txt, new Array('erebbero','irebbero','assero','assimo','eranno','erebbe','eremmo','ereste','eresti','essero','iranno','irebbe','iremmo','ireste','iresti','iscano','iscono','issero','arono','avamo','avano','avate','eremo','erete','erono','evamo','evano','evate','iremo','irete','irono','ivamo','ivano','ivate','ammo','ando','asse','assi','emmo','enda','ende','endi','endo','erai','Yamo','iamo','immo','irai','irei','isca','isce','isci','isco','erei','uti','uto','ita','ite','iti','ito','iva','ivi','ivo','ono','uta','ute','ano','are','ata','ate','ati','ato','ava','avi','avo','erà','ere','erò','ete','eva','evi','evo','irà','ire','irò','ar','ir'))) != '') {
				token = token.slice(0, -suf.length);
			}
		}

		
		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);

		// Always do step 3. 

		if ((suf = endsinArr(rv_txt, new Array('ia', 'ie', 'ii', 'io', 'ià', 'iè','iì', 'iò','a','e','i','o','à','è','ì','ò'))) != '') {
			token = token.slice(0, -suf.length);
		} 

		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);
		
		if ((suf =endsinArr(rv_txt, new  Array('ch'))) != '') {
			token = token.slice(0,  -suf.length) + 'c'; // replace with c
		} else if ((suf =endsinArr(rv_txt, new  Array('gh'))) != '') {
			token = token.slice(0,  -suf.length) + 'g'; // replace with g
		}

		
		r1_txt = token.substring(r1);
		r2_txt = token.substring(r2);
		rv_txt = token.substring(rv);

		return token.toLowerCase();

	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var stopwords = __webpack_require__(37);
	var Tokenizer = __webpack_require__(38);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];
	        
	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(/[a-zàèìòù0-9]/gi)) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });
	        
	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };
	        
	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}

/***/ },
/* 37 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, David Przybilla, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'ad','al','allo','ai','agli','all','agl','alla','alle','con','col','coi','da','dal','dallo',
	    'dai','dagli','dall','dagl','dalla','dalle','di','del','dello','dei','degli','dell','degl',
	    'della','delle','in','nel','nello','nei','negli','nell','negl','nella','nelle','su','sul',
	    'sullo','sui','sugli','sull','sugl','sulla','sulle','per','tra','contro','io','tu','lui',
	    'lei','noi','voi','loro','mio','mia','miei','mie','tuo','tua','tuoi','tue','suo','sua','suoi',
	    'sue','nostro','nostra','nostri','nostre','vostro','vostra','vostri','vostre','mi','ti','ci',
	    'vi','lo','la','li','le','gli','ne','il','un','uno','una','ma','ed','se','perché','anche','come',
	    'dov','dove','che','chi','cui','non','più','quale','quanto','quanti','quanta','quante','quello',
	    'quelli','quella','quelle','questo','questi','questa','queste','si','tutto','tutti','a','c','e',
	    'i','l','o','ho','hai','ha','abbiamo','avete','hanno','abbia','abbiate','abbiano','avrò','avrai',
	    'avrà','avremo','avrete','avranno','avrei','avresti','avrebbe','avremmo','avreste','avrebbero',
	    'avevo','avevi','aveva','avevamo','avevate','avevano','ebbi','avesti','ebbe','avemmo','aveste',
	    'ebbero','avessi','avesse','avessimo','avessero','avendo','avuto','avuta','avuti','avute','sono',
	    'sei','è','siamo','siete','sia','siate','siano','sarò','sarai','sarà','saremo','sarete','saranno',
	    'sarei','saresti','sarebbe','saremmo','sareste','sarebbero','ero','eri','era','eravamo','eravate',
	    'erano','fui','fosti','fu','fummo','foste','furono','fossi','fosse','fossimo','fossero','essendo',
	    'faccio','fai','facciamo','fanno','faccia','facciate','facciano','farò','farai','farà','faremo',
	    'farete','faranno','farei','faresti','farebbe','faremmo','fareste','farebbero','facevo','facevi',
	    'faceva','facevamo','facevate','facevano','feci','facesti','fece','facemmo','faceste','fecero',
	    'facessi','facesse','facessimo','facessero','facendo','sto','stai','sta','stiamo','stanno','stia',
	    'stiate','stiano','starò','starai','starà','staremo','starete','staranno','starei','staresti',
	    'starebbe','staremmo','stareste','starebbero','stavo','stavi','stava','stavamo','stavate','stavano',
	    'stetti','stesti','stette','stemmo','steste','stettero','stessi','stesse','stessimo','stessero','stando',
	     '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
	    
	// tell the world about the noise words.    
	exports.words = words;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);    
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/\W+/));
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(40);

	// Get the part of the token after the first non-vowel following a vowel
	function getR1(token) {
	    var match = token.match(/[aeiouyæåø]{1}[^aeiouyæåø]([A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+)/);

	    if (match) {
	        var preR1Length = match.index + 2;

	        if (preR1Length < 3 && preR1Length > 0) {
	            return token.slice(3);
	        } else if (preR1Length >= 3) {
	            return match[1];
	        } else {
	            return token;
	        }
	    }

	    return null;
	}

	function step1(token) {
	    // Perform step 1a-c
	    var step1aResult = step1a(token),
	        step1bResult = step1b(token),
	        step1cResult = step1c(token);

	    // Returne the shortest result string (from 1a, 1b and 1c)
	    if (step1aResult.length < step1bResult.length) {
	        return (step1aResult.length < step1cResult.length) ? step1aResult : step1cResult;
	    } else {
	        return (step1bResult.length < step1cResult.length) ? step1bResult : step1cResult;
	    }
	}

	// step 1a as defined for the porter stemmer algorithm.
	function step1a(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    var r1Match = r1.match(/(a|e|ede|ande|ende|ane|ene|hetene|en|heten|ar|er|heter|as|es|edes|endes|enes|hetenes|ens|hetens|ers|ets|et|het|ast)$/);

	    if (r1Match) {
	        return token.replace(new RegExp(r1Match[1] + '$'), '');
	    }

	    return token;
	}

	// step 1b as defined for the porter stemmer algorithm.
	function step1b(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (token.match(/(b|c|d|f|g|h|j|l|m|n|o|p|r|t|v|y|z)s$/)) {
	        return token.slice(0, -1);
	    }

	    if (token.match(/([^aeiouyæåø]k)s$/)) {
	        return token.slice(0, -1);
	    }

	    return token;
	}

	// step 1c as defined for the porter stemmer algorithm.
	function step1c(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (r1.match(/(erte|ert)$/)) {
	        return token.replace(/(erte|ert)$/, 'er');
	    }

	    return token;
	}

	// step 2 as defined for the porter stemmer algorithm.
	function step2(token) {
	    var r1 = getR1(token);

	    if (!r1) {
	        return token;
	    }

	    if (r1.match(/(d|v)t$/)) {
	        return token.slice(0, -1);
	    }

	    return token;
	}

	// step 3 as defined for the porter stemmer algorithm.
	function step3(token) {
	    var r1 = getR1(token);

	    if (!r1)
	        return token;

	    var r1Match = r1.match(/(leg|eleg|ig|eig|lig|elig|els|lov|elov|slov|hetslov)$/);

	    if (r1Match) {
	        return token.replace(new RegExp(r1Match[1] + '$'), '');
	    }

	    return token;
	}

	var PorterStemmer = new Stemmer();
	module.exports = PorterStemmer;

	// perform full stemming algorithm on a single word
	PorterStemmer.stem = function(token) {
	    return step3(step2(step1(token.toLowerCase()))).toString();
	};

	//exports for tests
	PorterStemmer.getR1  = getR1;
	PorterStemmer.step1  = step1;
	PorterStemmer.step1a = step1a;
	PorterStemmer.step1b = step1b;
	PorterStemmer.step1c = step1c;
	PorterStemmer.step2  = step2;
	PorterStemmer.step3  = step3;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(41);
	var Tokenizer = __webpack_require__(42);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.addStopWord = function(stopWord) {
	        stopwords.words.push(stopWord);
	    };

	    stemmer.addStopWords = function(moreStopWords) {
	        stopwords.words = stopwords.words.concat(moreStopWords);
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];

	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if(keepStops || stopwords.words.indexOf(token.toLowerCase()) == -1)
	                stemmedTokens.push(stemmer.stem(token));
	        });

	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };

	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	    'og','i','jeg','det','at','en','et','den','til','er','som',
	    'på','de','med','han','av','ikke','der','så','var','meg',
	    'seg','men','ett','har','om','vi','min','mitt','ha','hadde',
	    'hun','nå','over','da','ved','fra','du','ut','sin','dem',
	    'oss','opp','man','kan','hans','hvor','eller','hva','skal',
	    'selv','sjøl','her','alle','vil','bli','ble','blitt','kunne',
	    'inn','når','være','kom','noen','noe','ville','dere','som',
	    'deres','kun','ja','etter','ned','skulle','denne','for','deg',
	    'si','sine','sitt','mot','å','meget','hvorfor','dette','disse',
	    'uten','hvordan','ingen','din','ditt','blir','samme','hvilken',
	    'hvilke','sånn','inni','mellom','vår','hver','hvem','vors',
	    'hvis','både','bare','enn','fordi','før','mange','også','slik',
	    'vært','være','begge','siden','henne','hennar','hennes',
	    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

	// tell the world about the noise words.
	exports.words = words;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Kristoffer Brabrand

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    normalizer = __webpack_require__(43),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    text = normalizer.remove_diacritics(text);

	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+/));
	};


/***/ },
/* 43 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Kristoffer Brabrand

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Remove commonly used diacritic marks from a string as these
	 * are not used in a consistent manner. Leave only ä, ö, ü.
	 */
	var remove_diacritics = function(text) {
	    text = text.replace('à', 'a');
	    text = text.replace('À', 'A');
	    text = text.replace('á', 'a');
	    text = text.replace('Á', 'A');
	    text = text.replace('â', 'a');
	    text = text.replace('Â', 'A');
	    text = text.replace('ç', 'c');
	    text = text.replace('Ç', 'C');
	    text = text.replace('è', 'e');
	    text = text.replace('È', 'E');
	    text = text.replace('é', 'e');
	    text = text.replace('É', 'E');
	    text = text.replace('ê', 'e');
	    text = text.replace('Ê', 'E');
	    text = text.replace('î', 'i');
	    text = text.replace('Î', 'I');
	    text = text.replace('ñ', 'n');
	    text = text.replace('Ñ', 'N');
	    text = text.replace('ó', 'o');
	    text = text.replace('Ó', 'O');
	    text = text.replace('ô', 'o');
	    text = text.replace('Ô', 'O');
	    text = text.replace('û', 'u');
	    text = text.replace('Û', 'U');
	    text = text.replace('š', 's');
	    text = text.replace('Š', 'S');

	    return text;
	};

	// export the relevant stuff.
	exports.remove_diacritics = remove_diacritics;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2015, Luís Rodrigues

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	module.exports = (function () {
	  'use strict';

	  var Stemmer     = __webpack_require__(45),
	    Token         = __webpack_require__(48),
	    PorterStemmer = new Stemmer();

	  /**
	   * Marks a region after the first non-vowel following a vowel, or the
	   * null region at the end of the word if there is no such non-vowel.
	   *
	   * @param {Object} token Token to stem.
	   * @param {Number} start Start index (defaults to 0).
	   * @param {Number}       Region start index.
	   */
	   var markRegionN = function (start) {
	    var index = start || 0,
	      length = this.string.length,
	      region = length;

	    while (index < length - 1 && region === length) {
	      if (this.hasVowelAtIndex(index) && !this.hasVowelAtIndex(index + 1)) {
	        region = index + 2;
	      }
	      index++;
	    }

	    return region;
	  };

	  /**
	   * Mark RV.
	   *
	   * @param  {Object} token Token to stem.
	   * @return {Number}       Region start index.
	   */
	  var markRegionV = function () {
	    var rv = this.string.length;

	    if (rv > 3) {
	      if (!this.hasVowelAtIndex(1)) {
	        rv = this.nextVowelIndex(2) + 1;

	      } else if (this.hasVowelAtIndex(0) && this.hasVowelAtIndex(1)) {
	        rv = this.nextConsonantIndex(2) + 1;

	      } else {
	        rv = 3;
	      }
	    }

	    return rv;
	  };

	  /**
	   * Prelude.
	   *
	   * Nasalised vowel forms should be treated as a vowel followed by a consonant.
	   *
	   * @param  {String} token Word to stem.
	   * @return {String}       Stemmed token.
	   */
	  function prelude (token) {
	    return token
	    .replaceAll('ã', 'a~')
	    .replaceAll('õ', 'o~');
	  }

	  /**
	   * Step 1: Standard suffix removal.
	   *
	   * This step should always be performed.
	   *
	   * @param  {Token} token Word to stem.
	   * @return {Token}       Stemmed token.
	   */
	  function standardSuffix (token) {

	    token.replaceSuffixInRegion([
	      'amentos', 'imentos', 'aço~es', 'adoras', 'adores', 'amento', 'imento',

	      'aça~o', 'adora', 'ância', 'antes', 'ismos', 'istas',

	      'ador', 'ante', 'ável', 'ezas', 'icas', 'icos', 'ismo', 'ista', 'ível',
	      'osas', 'osos',

	      'eza', 'ica', 'ico', 'osa', 'oso'

	      ], '', 'r2');

	    token.replaceSuffixInRegion(['logias', 'logia'], 'log', 'r2');

	    // token.replaceSuffixInRegion(['uço~es', 'uça~o'], 'u', 'r1');

	    token.replaceSuffixInRegion(['ências', 'ência'], 'ente', 'r2');

	    token.replaceSuffixInRegion([
	      'ativamente', 'icamente', 'ivamente', 'osamente', 'adamente'
	    ], '', 'r2');

	    token.replaceSuffixInRegion('amente', '', 'r1');

	    token.replaceSuffixInRegion([
	      'antemente', 'avelmente', 'ivelmente', 'mente'
	    ], '', 'r2');

	    token.replaceSuffixInRegion([
	      'abilidades', 'abilidade',
	      'icidades', 'icidade',
	      'ividades', 'ividade',
	      'idades', 'idade'
	    ], '', 'r2');

	    token.replaceSuffixInRegion([
	      'ativas', 'ativos', 'ativa', 'ativo',
	      'ivas', 'ivos', 'iva', 'ivo'
	    ], '', 'r2');

	    if (token.hasSuffix('eiras') || token.hasSuffix('eira')) {
	      token.replaceSuffixInRegion(['iras', 'ira'], 'ir', 'rv');
	    }

	    return token;
	  }

	  /**
	   * Step 2: Verb suffix removal.
	   *
	   * Perform this step if no ending was removed in step 1.
	   *
	   * @param  {Token} token   Token to stem.
	   * @return {Token}         Stemmed token.
	   */
	  function verbSuffix (token) {

	    token.replaceSuffixInRegion([
	      'aríamos', 'ássemos', 'eríamos', 'êssemos', 'iríamos', 'íssemos',

	      'áramos', 'aremos', 'aríeis', 'ásseis', 'ávamos', 'éramos', 'eremos',
	      'eríeis', 'ésseis', 'íramos', 'iremos', 'iríeis', 'ísseis',

	      'ara~o', 'ardes', 'areis', 'áreis', 'ariam', 'arias', 'armos', 'assem',
	      'asses', 'astes', 'áveis', 'era~o', 'erdes', 'ereis', 'éreis', 'eriam',
	      'erias', 'ermos', 'essem', 'esses', 'estes', 'íamos', 'ira~o', 'irdes',
	      'ireis', 'íreis', 'iriam', 'irias', 'irmos', 'issem', 'isses', 'istes',

	      'adas', 'ados', 'amos', 'ámos', 'ando', 'aram', 'aras', 'arás', 'arei',
	      'arem', 'ares', 'aria', 'asse', 'aste', 'avam', 'avas', 'emos', 'endo',
	      'eram', 'eras', 'erás', 'erei', 'erem', 'eres', 'eria', 'esse', 'este',
	      'idas', 'idos', 'íeis', 'imos', 'indo', 'iram', 'iras', 'irás', 'irei',
	      'irem', 'ires', 'iria', 'isse', 'iste',

	      'ada', 'ado', 'ais', 'ara', 'ará', 'ava', 'eis', 'era', 'erá', 'iam',
	      'ias', 'ida', 'ido', 'ira', 'irá',

	      'am', 'ar', 'as', 'ei', 'em', 'er', 'es', 'eu', 'ia', 'ir', 'is', 'iu', 'ou'

	    ], '', 'rv');

	    return token;
	  }

	  /**
	   * Step 3: Delete suffix i.
	   *
	   * Perform this step if the word was changed, in RV and preceded by c.
	   *
	   * @param  {Token} token   Token to stem.
	   * @return {Token}         Stemmed token.
	   */
	  function iPrecededByCSuffix (token) {

	    if (token.hasSuffix('ci')) {
	      token.replaceSuffixInRegion('i', '', 'rv');
	    }

	    return token;
	  }

	  /**
	   * Step 4: Residual suffix.
	   *
	   * Perform this step if steps 1 and 2 did not alter the word.
	   *
	   * @param  {Token} token Token to stem.
	   * @return {Token}       Stemmed token.
	   */
	  function residualSuffix (token) {

	    token.replaceSuffixInRegion(['os', 'a', 'i', 'o', 'á', 'í', 'ó'], '', 'rv');

	    return token;
	  }

	  /**
	   * Step 5: Residual form.
	   *
	   * This step should always be performed.
	   *
	   * @param  {Token} token Token to stem.
	   * @return {Token}       Stemmed token.
	   */
	  function residualForm (token) {

	    var tokenString = token.string;

	    if (token.hasSuffix('gue') || token.hasSuffix('gué') || token.hasSuffix('guê')) {
	      token.replaceSuffixInRegion(['ue', 'ué', 'uê'], '', 'rv');
	    }

	    if (token.hasSuffix('cie') || token.hasSuffix('cié') || token.hasSuffix('ciê')) {
	      token.replaceSuffixInRegion(['ie', 'ié', 'iê'], '', 'rv');
	    }

	    if (tokenString === token.string) {
	      token.replaceSuffixInRegion(['e', 'é', 'ê'], '', 'rv');
	    }

	    token.replaceSuffixInRegion('ç', 'c', 'all');

	    return token;
	  }

	  /**
	   * Postlude.
	   *
	   * Turns a~, o~ back into ã, õ.
	   *
	   * @param  {String} token Word to stem.
	   * @return {String}       Stemmed token.
	   */
	  function postlude (token) {
	    return token
	      .replaceAll('a~', 'ã')
	      .replaceAll('o~', 'õ');
	  }

	  /**
	   * Stems a word using a Porter stemmer algorithm.
	   *
	   * @param  {String} word Word to stem.
	   * @return {String}      Stemmed token.
	   */
	  PorterStemmer.stem = function (word) {
	    var token = new Token(word.toLowerCase()),
	      original;

	    token = prelude(token);

	    token.usingVowels('aeiouáéíóúâêôàãõ')
	      .markRegion('all', 0)
	      .markRegion('r1', null, markRegionN)
	      .markRegion('r2', token.regions.r1, markRegionN)
	      .markRegion('rv', null, markRegionV);

	    original = token.string;

	    // Always do step 1.
	    token = standardSuffix(token);

	    // Do step 2 if no ending was removed by step 1.
	    if (token.string === original) {
	      token = verbSuffix(token);
	    }

	    // If the last step to be obeyed — either step 1 or 2 — altered the word,
	    // do step 3. Alternatively, if neither steps 1 nor 2 altered the word, do
	    // step 4.
	    token = token.string !== original ? iPrecededByCSuffix(token) : residualSuffix(token);

	    // Always do step 5.
	    token = residualForm(token);

	    token = postlude(token);

	    return token.string;
	  };

	  return PorterStemmer;
	})();


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Ismaël Héry

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	module.exports = function () {
	  'use strict';

	  var Stemmer = this,
	    stopwords = __webpack_require__(46),
	    Tokenizer = __webpack_require__(47);

	  Stemmer.stem = function (token) {
	    return token;
	  };

	  Stemmer.addStopWords = function (word) {
	    stopwords.words.push(word);
	  };

	  Stemmer.addStopWords = function (words) {
	    stopwords.words = stopwords.words.concat(words);
	  };

	  Stemmer.tokenizeAndStem = function(text, keepStops) {
	    var stemmedTokens = [];

	    var tokenStemmer = function (token) {
	      if (keepStops || stopwords.words.indexOf(token.toLowerCase()) === -1) {
	        stemmedTokens.push(Stemmer.stem(token));
	      }
	    };

	    new Tokenizer().tokenize(text).forEach(tokenStemmer);

	    return stemmedTokens;
	  };

	  Stemmer.attach = function () {
	    String.prototype.stem = function () {
	      return Stemmer.stem(this);
	    };

	    String.prototype.tokenizeAndStem = function (keepStops) {
	      return Stemmer.tokenizeAndStem(this, keepStops);
	    };
	  };
	};


/***/ },
/* 46 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Luís Rodrigues

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	var words = [
	  'a',
	  'à',
	  'ao',
	  'aos',
	  'aquela',
	  'aquelas',
	  'aquele',
	  'aqueles',
	  'aquilo',
	  'as',
	  'às',
	  'até',
	  'com',
	  'como',
	  'da',
	  'das',
	  'de',
	  'dela',
	  'delas',
	  'dele',
	  'deles',
	  'depois',
	  'do',
	  'dos',
	  'e',
	  'ela',
	  'elas',
	  'ele',
	  'eles',
	  'em',
	  'entre',
	  'essa',
	  'essas',
	  'esse',
	  'esses',
	  'esta',
	  'estas',
	  'este',
	  'estes',
	  'eu',
	  'isso',
	  'isto',
	  'já',
	  'lhe',
	  'lhes',
	  'mais',
	  'mas',
	  'me',
	  'mesmo',
	  'meu',
	  'meus',
	  'minha',
	  'minhas',
	  'muito',
	  'muitos',
	  'na',
	  'não',
	  'nas',
	  'nem',
	  'no',
	  'nos',
	  'nós',
	  'nossa',
	  'nossas',
	  'nosso',
	  'nossos',
	  'num',
	  'nuns',
	  'numa',
	  'numas',
	  'o',
	  'os',
	  'ou',
	  'para',
	  'pela',
	  'pelas',
	  'pelo',
	  'pelos',
	  'por',
	  'quais',
	  'qual',
	  'quando',
	  'que',
	  'quem',
	  'se',
	  'sem',
	  'seu',
	  'seus',
	  'só',
	  'sua',
	  'suas',
	  'também',
	  'te',
	  'teu',
	  'teus',
	  'tu',
	  'tua',
	  'tuas',
	  'um',
	  'uma',
	  'umas',
	  'você',
	  'vocês',
	  'vos',
	  'vosso',
	  'vossos',
	  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'
	];

	// tell the world about the noise words.
	exports.words = words;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel,David Przybilla

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.trim(text.split(/[^a-zA-Zà-úÀ-Ú]/)));
	};


/***/ },
/* 48 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2015, Luís Rodrigues

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	module.exports = (function () {
	  'use strict';

	  /**
	   * Stemmer token constructor.
	   *
	   * @param {String} string Token string.
	   */
	  var Token = function (string) {
	    this.vowels   = '';
	    this.regions  = {};
	    this.string   = string;
	    this.original = string;
	  }

	  /**
	   * Set vowels.
	   *
	   * @param  {String|Array} vowels List of vowels.
	   * @return {Token}               Token instance.
	   */
	  Token.prototype.usingVowels = function (vowels) {
	    this.vowels = vowels;
	    return this;
	  };

	  /**
	   * Marks a region by defining its starting index or providing a callback
	   * function that does.
	   *
	   * @param  {String}       region   Region name.
	   * @param  {Array|Number} args     Callback arguments or region start index.
	   * @param  {Function}     callback Function that determines the start index (optional).
	   * @param  {Object}       context  Callback context (optional, defaults to this).
	   * @return {Token}                 Token instance.
	   */
	  Token.prototype.markRegion = function (region, args, callback, context) {
	    if (typeof callback === 'function') {
	      this.regions[region] = callback.apply(context || this, [].concat(args));

	    } else if (!isNaN(args)) {
	      this.regions[region] = args;
	    }

	    return this;
	  };

	  /**
	   * Replaces all instances of a string with another.
	   *
	   * @param  {String} find    String to be replaced.
	   * @param  {String} replace Replacement string.
	   * @return {Token}          Token instance.
	   */
	  Token.prototype.replaceAll = function (find, replace) {
	    this.string = this.string.split(find).join(replace);
	    return this;
	  };

	  /**
	   * Replaces the token suffix if in a region.
	   *
	   * @param  {String} suffix  Suffix to replace.
	   * @param  {String} replace Replacement string.
	   * @param  {String} region  Region name.
	   * @return {Token}          Token instance.
	   */
	  Token.prototype.replaceSuffixInRegion = function (suffix, replace, region) {
	    var suffixes = [].concat(suffix);
	    for (var i = 0; i < suffixes.length; i++) {
	      if (this.hasSuffixInRegion(suffixes[i], region)) {
	        this.string = this.string.slice(0, -suffixes[i].length) + replace;
	        return this;
	      }
	    }
	    return this;
	  };

	  /**
	   * Determines whether the token has a vowel at the provided index.
	   *
	   * @param  {Integer} index Character index.
	   * @return {Boolean}       Whether the token has a vowel at the provided index.
	   */
	  Token.prototype.hasVowelAtIndex = function (index) {
	    return this.vowels.indexOf(this.string[index]) !== -1;
	  };

	  /**
	   * Finds the next vowel in the token.
	   *
	   * @param  {Integer} start Starting index offset.
	   * @return {Integer}       Vowel index, or the end of the string.
	   */
	  Token.prototype.nextVowelIndex = function (start) {
	    var index = (start >= 0 && start < this.string.length) ? start : this.string.length;
	    while (index < this.string.length && !this.hasVowelAtIndex(index)) {
	      index++;
	    }
	    return index;
	  };

	  /**
	   * Finds the next consonant in the token.
	   *
	   * @param  {Integer} start Starting index offset.
	   * @return {Integer}       Consonant index, or the end of the string.
	   */
	  Token.prototype.nextConsonantIndex = function (start) {
	    var index = (start >= 0 && start < this.string.length) ? start : this.string.length;
	    while (index < this.string.length && this.hasVowelAtIndex(index)) {
	      index++;
	    }
	    return index;
	  };

	  /**
	   * Determines whether the token has the provided suffix.
	   * @param  {String}  suffix Suffix to match.
	   * @return {Boolean}        Whether the token string ends in suffix.
	   */
	  Token.prototype.hasSuffix = function (suffix) {
	    return this.string.slice(-suffix.length) === suffix;
	  };

	  /**
	   * Determines whether the token has the provided suffix within the specified
	   * region.
	   *
	   * @param  {String}  suffix Suffix to match.
	   * @param  {String}  region Region name.
	   * @return {Boolean}        Whether the token string ends in suffix.
	   */
	  Token.prototype.hasSuffixInRegion = function (suffix, region) {
	    var regionStart = this.regions[region] || 0,
	      suffixStart   = this.string.length - suffix.length;
	    return this.hasSuffix(suffix) && suffixStart >= regionStart;
	  };

	  return Token;
	})();


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Stemmer = __webpack_require__(18);
	var ruleTable = __webpack_require__(50).rules;

	function acceptable(candidate) {
	    if (candidate.match(/^[aeiou]/))
	        return (candidate.length > 1);
	    else
	        return (candidate.length > 2 && candidate.match(/[aeiouy]/));
	}

	// take a token, look up the applicatble rule section and attempt some stemming!
	function applyRuleSection(token, intact) {
	    var section = token.substr( - 1);
	    var rules = ruleTable[section];

	    if (rules) {
	        for (var i = 0; i < rules.length; i++) {
	            if ((intact || !rules[i].intact)
	            // only apply intact rules to intact tokens
	            && token.substr(0 - rules[i].pattern.length) == rules[i].pattern) {
	                // hack off only as much as the rule indicates
	                var result = token.substr(0, token.length - rules[i].size);

	                // if the rules wants us to apply an appendage do so
	                if (rules[i].appendage)
	                    result += rules[i].appendage;

	                if (acceptable(result)) {
	                    token = result;

	                    // see what the rules wants to do next
	                    if (rules[i].continuation) {
	                        // this rule thinks there still might be stem left. keep at it.
	                        // since we've applied a change we'll pass false in for intact
	                        return applyRuleSection(result, false);
	                    } else {
	                        // the rule thinks we're done stemming. drop out.
	                        return result;
	                    }
	                }
	            }
	        }
	    }

	    return token;
	}

	var LancasterStemmer = new Stemmer();
	module.exports = LancasterStemmer;

	LancasterStemmer.stem = function(token) {
	    return applyRuleSection(token.toLowerCase(), true);
	}

/***/ },
/* 50 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	exports.rules = {
	    "a": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "ia", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "a", 
	            "size": "1"
	        }
	    ], 
	    "b": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "bb", 
	            "size": "1"
	        }
	    ], 
	    "c": [
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ytic", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ic", 
	            "size": "2"
	       }, 
	        {
	            "appendage": "t", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "nc", 
	            "size": "1"
	        }
	    ], 
	    "d": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "dd", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ied", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "ss", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ceed", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "eed", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ed", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "hood", 
	            "size": "4"
	        }
	    ], 
	    "e": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "e", 
	            "size": "1"
	        }
	    ], 
	    "f": [
	        {
	            "appendage": "v", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "lief", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "if", 
	            "size": "2"
	        }
	    ], 
	    "g": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ing", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iag", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ag", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "gg", 
	            "size": "1"
	        }
	    ], 
	    "h": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "th", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "ct", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "guish", 
	            "size": "5"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ish", 
	            "size": "3"
	        }
	    ], 
	    "i": [
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "i", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "i", 
	            "size": "1"
	        }
	    ], 
	    "j": [
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ij", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "fuj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "uj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "oj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "r", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "hej", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "verj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "misj", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "d", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "nj", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "j", 
	            "size": "1"
	        }
	    ], 
	    "l": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ifiabl", 
	            "size": "6"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iabl", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "abl", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ibl", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "l", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "bil", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "cl", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iful", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ful", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ul", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ial", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ual", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "al", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ll", 
	            "size": "1"
	        }
	    ], 
	    "m": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ium", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "um", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ism", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "mm", 
	            "size": "1"
	        }
	    ], 
	    "n": [
	        {
	            "appendage": "j", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "sion", 
	            "size": "4"
	        }, 
	        {
	            "appendage": "ct", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "xion", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ion", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ian", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "an", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "een", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "en", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "nn", 
	            "size": "1"
	        }
	    ], 
	    "p": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ship", 
	            "size": "4"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "pp", 
	            "size": "1"
	        }
	    ], 
	    "r": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "er", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ear", 
	            "size": "0"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ar", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "or", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ur", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "rr", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "tr", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ier", 
	            "size": "3"
	        }
	    ], 
	    "s": [
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ies", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sis", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "is", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ness", 
	            "size": "4"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ss", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ous", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": true, 
	            "pattern": "us", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": true, 
	            "pattern": "s", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "s", 
	            "size": "0"
	        }
	    ], 
	    "t": [
	        {
	            "appendage": "y", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "plicat", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "at", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ment", 
	            "size": "4"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ent", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ant", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "b", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ript", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "b", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "orpt", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "duct", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sumpt", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "iv", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "cept", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "v", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "olut", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "sist", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ist", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "tt", 
	            "size": "1"
	        }
	    ], 
	    "u": [
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "iqu", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ogu", 
	            "size": "1"
	        }
	    ], 
	    "v": [
	        {
	            "appendage": "j", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "siv", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "eiv", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "iv", 
	            "size": "2"
	        }
	    ], 
	    "y": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "bly", 
	            "size": "1"
	        }, 
	        {
	            "appendage": "y", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ily", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ply", 
	            "size": "0"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ly", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ogy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "phy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "omy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "opy", 
	            "size": "1"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ity", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ety", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "lty", 
	            "size": "2"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "istry", 
	            "size": "5"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ary", 
	            "size": "3"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ory", 
	            "size": "3"
	        }, 
	        {
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "ify", 
	            "size": "3"
	        }, 
	        {
	            "appendage": "t", 
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "ncy", 
	            "size": "2"
	        }, 
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "acy", 
	            "size": "3"
	        }
	    ], 
	    "z": [
	        {
	            "continuation": true, 
	            "intact": false, 
	            "pattern": "iz", 
	            "size": "2"
	        }, 
	        {
	            "appendage": "s", 
	            "continuation": false, 
	            "intact": false, 
	            "pattern": "yz", 
	            "size": "1"
	        }
	    ]
	};



/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var stopwords = __webpack_require__(52);
	var Tokenizer = __webpack_require__(53);

	module.exports = function() {
	    var stemmer = this;

	    stemmer.stem = function(token) {
	        return token;
	    };

	    stemmer.tokenizeAndStem = function(text, keepStops) {
	        var stemmedTokens = [];

	        new Tokenizer().tokenize(text).forEach(function(token) {
	            if (keepStops || stopwords.words.indexOf(token) == -1) {
	                var resultToken = token.toLowerCase();
	                if (resultToken.match(new RegExp('[a-zążśźęćńół0-9]+', 'gi'))) {
	                    resultToken = stemmer.stem(resultToken);
	                }
	                stemmedTokens.push(resultToken);
	            }
	        });

	        return stemmedTokens;
	    };

	    stemmer.attach = function() {
	        String.prototype.stem = function() {
	            return stemmer.stem(this);
	        };

	        String.prototype.tokenizeAndStem = function(keepStops) {
	            return stemmer.tokenizeAndStem(this, keepStops);
	        };
	    };
	}


/***/ },
/* 52 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	// list based on: http://pl.wikipedia.org/wiki/Wikipedia:Stopwords
	var words = [
	    'a', 'aby', 'ach', 'acz', 'aczkolwiek', 'aj', 'albo', 'ale', 'ależ', 'ani',
	    'aż', 'bardziej', 'bardzo', 'bo', 'bowiem', 'by', 'byli', 'bynajmniej',
	    'być', 'był', 'była', 'było', 'były', 'będzie', 'będą', 'cali', 'cała',
	    'cały', 'ci', 'cię', 'ciebie', 'co', 'cokolwiek', 'coś', 'czasami',
	    'czasem', 'czemu', 'czy', 'czyli', 'daleko', 'dla', 'dlaczego', 'dlatego',
	    'do', 'dobrze', 'dokąd', 'dość', 'dużo', 'dwa', 'dwaj', 'dwie', 'dwoje',
	    'dziś', 'dzisiaj', 'gdy', 'gdyby', 'gdyż', 'gdzie', 'gdziekolwiek',
	    'gdzieś', 'i', 'ich', 'ile', 'im', 'inna', 'inne', 'inny', 'innych', 'iż',
	    'ja', 'ją', 'jak', 'jakaś', 'jakby', 'jaki', 'jakichś', 'jakie', 'jakiś',
	    'jakiż', 'jakkolwiek', 'jako', 'jakoś', 'je', 'jeden', 'jedna', 'jedno',
	    'jednak', 'jednakże', 'jego', 'jej', 'jemu', 'jest', 'jestem', 'jeszcze',
	    'jeśli', 'jeżeli', 'już', 'ją', 'każdy', 'kiedy', 'kilka', 'kimś', 'kto',
	    'ktokolwiek', 'ktoś', 'która', 'które', 'którego', 'której', 'który',
	    'których', 'którym', 'którzy', 'ku', 'lat', 'lecz', 'lub', 'ma', 'mają',
	    'mało', 'mam', 'mi', 'mimo', 'między', 'mną', 'mnie', 'mogą', 'moi', 'moim',
	    'moja', 'moje', 'może', 'możliwe', 'można', 'mój', 'mu', 'musi', 'my', 'na',
	    'nad', 'nam', 'nami', 'nas', 'nasi', 'nasz', 'nasza', 'nasze', 'naszego',
	    'naszych', 'natomiast', 'natychmiast', 'nawet', 'nią', 'nic', 'nich', 'nie',
	    'niech', 'niego', 'niej', 'niemu', 'nigdy', 'nim', 'nimi', 'niż', 'no', 'o',
	    'obok', 'od', 'około', 'on', 'ona', 'one', 'oni', 'ono', 'oraz', 'oto',
	    'owszem', 'pan', 'pana', 'pani', 'po', 'pod', 'podczas', 'pomimo', 'ponad',
	    'ponieważ', 'powinien', 'powinna', 'powinni', 'powinno', 'poza', 'prawie',
	    'przecież', 'przed', 'przede', 'przedtem', 'przez', 'przy', 'roku',
	    'również', 'sam', 'sama', 'są', 'się', 'skąd', 'sobie', 'sobą', 'sposób',
	    'swoje', 'ta', 'tak', 'taka', 'taki', 'takie', 'także', 'tam', 'te', 'tego',
	    'tej', 'temu', 'ten', 'teraz', 'też', 'to', 'tobą', 'tobie', 'toteż',
	    'trzeba', 'tu', 'tutaj', 'twoi', 'twoim', 'twoja', 'twoje', 'twym', 'twój',
	    'ty', 'tych', 'tylko', 'tym', 'u', 'w', 'wam', 'wami', 'was', 'wasz', 'zaś',
	    'wasza', 'wasze', 'we', 'według', 'wiele', 'wielu', 'więc', 'więcej', 'tę',
	    'wszyscy', 'wszystkich', 'wszystkie', 'wszystkim', 'wszystko', 'wtedy',
	    'wy', 'właśnie', 'z', 'za', 'zapewne', 'zawsze', 'ze', 'zł', 'znowu',
	    'znów', 'został', 'żaden', 'żadna', 'żadne', 'żadnych', 'że', 'żeby',
	    '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

	// tell the world about the noise words.
	exports.words = words;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2013, Paweł Łaskarzewski

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};

	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.withoutEmpty = function(array) {
		return array.filter(function(a) {return a;});
	};

	AggressiveTokenizer.prototype.clearText = function(text) {
		return text.replace(/[^a-zążśźęćńół0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
	};

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.withoutEmpty(this.clearText(text).split(' '));
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A very basic stemmer that performs the following steps:
	 * * Stem katakana.
	 * Inspired by:
	 * http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter.java
	 *
	 * This script assumes input is normalized using normalizer_ja().
	 *
	 * \@todo Use .bind() in StemmerJa.prototype.attach().
	 */

	var Tokenizer = __webpack_require__(55);
	var stopwords = __webpack_require__(58);



	/**
	 * @constructor
	 */
	var StemmerJa = function() {
	};


	/**
	 * Tokenize and stem a text.
	 * Stop words are excluded except if the second argument is true.
	 *
	 * @param {string} text
	 * @param {boolean} keepStops Whether to keep stop words from the output or not.
	 * @return {Array.<string>}
	 */
	StemmerJa.prototype.tokenizeAndStem = function(text, keepStops) {
	  var self = this;
	  var stemmedTokens = [];
	  var tokens = new Tokenizer().tokenize(text);

	  // This is probably faster than an if at each iteration.
	  if (keepStops) {
	    tokens.forEach(function(token) {
	      var resultToken = token.toLowerCase();
	      resultToken = self.stem(resultToken);
	      stemmedTokens.push(resultToken);
	    });
	  } else {
	    tokens.forEach(function(token) {
	      if (stopwords.indexOf(token) == -1) {
	        var resultToken = token.toLowerCase();
	        resultToken = self.stem(resultToken);
	        stemmedTokens.push(resultToken);
	      }
	    });
	  }

	  return stemmedTokens;
	};


	/**
	 * Stem a term.
	 *
	 * @param {string} token
	 * @return {string}
	 */
	StemmerJa.prototype.stem = function(token) {
	  token = this.stemKatakana(token);

	  return token;
	};


	/**
	 * Remove the final prolonged sound mark on katakana if length is superior to
	 * a threshold.
	 *
	 * @param {string} token A katakana string to stem.
	 * @return {string} A katakana string stemmed.
	 */
	StemmerJa.prototype.stemKatakana = function(token) {
	  var HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK = 'ー';
	  var DEFAULT_MINIMUM_LENGTH = 4;

	  if (token.length >= DEFAULT_MINIMUM_LENGTH
	      && token.slice(-1) === HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
	      && this.isKatakana(token)) {
	    token = token.slice(0, token.length - 1);
	  }
	  return token;
	};


	/**
	 * Is a string made of fullwidth katakana only?
	 * This implementation is the fastest I know:
	 * http://jsperf.com/string-contain-katakana-only/2
	 *
	 * @param {string} str A string.
	 * @return {boolean} True if the string has katakana only.
	 */
	StemmerJa.prototype.isKatakana = function(str) {
	  return !!str.match(/^[゠-ヿ]+$/);
	};

	// Expose an attach function that will patch String with new methods.
	StemmerJa.prototype.attach = function() {
	  var self = this;

	  String.prototype.stem = function() {
	    return self.stem(this);
	  };

	  String.prototype.tokenizeAndStem = function(keepStops) {
	    return self.tokenizeAndStem(this, keepStops);
	  };
	};

	module.exports = StemmerJa;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// Original copyright:
	/*
	 Copyright (c) 2008, Taku Kudo

	 All rights reserved.

	 Redistribution and use in source and binary forms, with or without
	 modification, are permitted provided that the following conditions are met:

	 * Redistributions of source code must retain the above copyright notice,
	 this list of conditions and the following disclaimer.
	 * Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.
	 * Neither the name of the <ORGANIZATION> nor the names of its
	 contributors may be used to endorse or promote products derived from this
	 software without specific prior written permission.

	 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
	 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	// This version:
	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	// TinySegmenter 0.1 -- Super compact Japanese tokenizer in Javascript
	// (c) 2008 Taku Kudo <taku@chasen.org>
	// TinySegmenter is freely distributable under the terms of a new BSD licence.
	// For details, see http://chasen.org/~taku/software/TinySegmenter/LICENCE.txt

	var Tokenizer = __webpack_require__(9),
	    normalize = __webpack_require__(56).normalize_ja,
	    util = __webpack_require__(10);



	/**
	 * @constructor
	 */
	var TokenizerJa = function() {
	  this.chartype_ = [
	    [/[〇一二三四五六七八九十百千万億兆]/, 'M'],
	    [/[一-鿌〆]/, 'H'],
	    [/[ぁ-ゟ]/, 'I'],
	    [/[゠-ヿ]/, 'K'],
	    [/[a-zA-Z]/, 'A'],
	    [/[0-9]/, 'N']
	  ];

	  this.BIAS__ = -332;
	  this.BC1__ = {'HH': 6, 'II': 2461, 'KH': 406, 'OH': -1378};
	  this.BC2__ = {'AA': -3267, 'AI': 2744, 'AN': -878, 'HH': -4070, 'HM': -1711, 'HN': 4012, 'HO': 3761, 'IA': 1327, 'IH': -1184, 'II': -1332, 'IK': 1721, 'IO': 5492, 'KI': 3831, 'KK': -8741, 'MH': -3132, 'MK': 3334, 'OO': -2920};
	  this.BC3__ = {'HH': 996, 'HI': 626, 'HK': -721, 'HN': -1307, 'HO': -836, 'IH': -301, 'KK': 2762, 'MK': 1079, 'MM': 4034, 'OA': -1652, 'OH': 266};
	  this.BP1__ = {'BB': 295, 'OB': 304, 'OO': -125, 'UB': 352};
	  this.BP2__ = {'BO': 60, 'OO': -1762};
	  this.BQ1__ = {'BHH': 1150, 'BHM': 1521, 'BII': -1158, 'BIM': 886, 'BMH': 1208, 'BNH': 449, 'BOH': -91, 'BOO': -2597, 'OHI': 451, 'OIH': -296, 'OKA': 1851, 'OKH': -1020, 'OKK': 904, 'OOO': 2965};
	  this.BQ2__ = {'BHH': 118, 'BHI': -1159, 'BHM': 466, 'BIH': -919, 'BKK': -1720, 'BKO': 864, 'OHH': -1139, 'OHM': -181, 'OIH': 153, 'UHI': -1146};
	  this.BQ3__ = {'BHH': -792, 'BHI': 2664, 'BII': -299, 'BKI': 419, 'BMH': 937, 'BMM': 8335, 'BNN': 998, 'BOH': 775, 'OHH': 2174, 'OHM': 439, 'OII': 280, 'OKH': 1798, 'OKI': -793, 'OKO': -2242, 'OMH': -2402, 'OOO': 11699};
	  this.BQ4__ = {'BHH': -3895, 'BIH': 3761, 'BII': -4654, 'BIK': 1348, 'BKK': -1806, 'BMI': -3385, 'BOO': -12396, 'OAH': 926, 'OHH': 266, 'OHK': -2036, 'ONN': -973};
	  this.BW1__ = {'，と': 660, '，同': 727, 'B1あ': 1404, 'B1同': 542, '、と': 660, '、同': 727, '｣と': 1682, 'あっ': 1505, 'いう': 1743, 'いっ': -2055, 'いる': 672, 'うし': -4817, 'うん': 665, 'から': 3472, 'がら': 600, 'こう': -790, 'こと': 2083, 'こん': -1262, 'さら': -4143, 'さん': 4573, 'した': 2641, 'して': 1104, 'すで': -3399, 'そこ': 1977, 'それ': -871, 'たち': 1122, 'ため': 601, 'った': 3463, 'つい': -802, 'てい': 805, 'てき': 1249, 'でき': 1127, 'です': 3445, 'では': 844, 'とい': -4915, 'とみ': 1922, 'どこ': 3887, 'ない': 5713, 'なっ': 3015, 'など': 7379, 'なん': -1113, 'にし': 2468, 'には': 1498, 'にも': 1671, 'に対': -912, 'の一': -501, 'の中': 741, 'ませ': 2448, 'まで': 1711, 'まま': 2600, 'まる': -2155, 'やむ': -1947, 'よっ': -2565, 'れた': 2369, 'れで': -913, 'をし': 1860, 'を見': 731, '亡く': -1886, '京都': 2558, '取り': -2784, '大き': -2604, '大阪': 1497, '平方': -2314, '引き': -1336, '日本': -195, '本当': -2423, '毎日': -2113, '目指': -724};
	  this.BW2__ = {'11': -669, '．．': -11822, '――': -5730, '−−': -13175, 'いう': -1609, 'うか': 2490, 'かし': -1350, 'かも': -602, 'から': -7194, 'かれ': 4612, 'がい': 853, 'がら': -3198, 'きた': 1941, 'くな': -1597, 'こと': -8392, 'この': -4193, 'させ': 4533, 'され': 13168, 'さん': -3977, 'しい': -1819, 'しか': -545, 'した': 5078, 'して': 972, 'しな': 939, 'その': -3744, 'たい': -1253, 'たた': -662, 'ただ': -3857, 'たち': -786, 'たと': 1224, 'たは': -939, 'った': 4589, 'って': 1647, 'っと': -2094, 'てい': 6144, 'てき': 3640, 'てく': 2551, 'ては': -3110, 'ても': -3065, 'でい': 2666, 'でき': -1528, 'でし': -3828, 'です': -4761, 'でも': -4203, 'とい': 1890, 'とこ': -1746, 'とと': -2279, 'との': 720, 'とみ': 5168, 'とも': -3941, 'ない': -2488, 'なが': -1313, 'など': -6509, 'なの': 2614, 'なん': 3099, 'にお': -1615, 'にし': 2748, 'にな': 2454, 'によ': -7236, 'に対': -14943, 'に従': -4688, 'に関': -11388, 'のか': 2093, 'ので': -7059, 'のに': -6041, 'のの': -6125, 'はい': 1073, 'はが': -1033, 'はず': -2532, 'ばれ': 1813, 'まし': -1316, 'まで': -6621, 'まれ': 5409, 'めて': -3153, 'もい': 2230, 'もの': -10713, 'らか': -944, 'らし': -1611, 'らに': -1897, 'りし': 651, 'りま': 1620, 'れた': 4270, 'れて': 849, 'れば': 4114, 'ろう': 6067, 'われ': 7901, 'を通': -11877, 'んだ': 728, 'んな': -4115, '一人': 602, '一方': -1375, '一日': 970, '一部': -1051, '上が': -4479, '会社': -1116, '出て': 2163, '分の': -7758, '同党': 970, '同日': -913, '大阪': -2471, '委員': -1250, '少な': -1050, '年度': -8669, '年間': -1626, '府県': -2363, '手権': -1982, '新聞': -4066, '日新': -722, '日本': -7068, '日米': 3372, '曜日': -601, '朝鮮': -2355, '本人': -2697, '東京': -1543, '然と': -1384, '社会': -1276, '立て': -990, '第に': -1612, '米国': -4268};
	  this.BW3__ = {'あた': -2194, 'あり': 719, 'ある': 3846, 'い．': -1185, 'い。': -1185, 'いい': 5308, 'いえ': 2079, 'いく': 3029, 'いた': 2056, 'いっ': 1883, 'いる': 5600, 'いわ': 1527, 'うち': 1117, 'うと': 4798, 'えと': 1454, 'か．': 2857, 'か。': 2857, 'かけ': -743, 'かっ': -4098, 'かに': -669, 'から': 6520, 'かり': -2670, 'が，': 1816, 'が、': 1816, 'がき': -4855, 'がけ': -1127, 'がっ': -913, 'がら': -4977, 'がり': -2064, 'きた': 1645, 'けど': 1374, 'こと': 7397, 'この': 1542, 'ころ': -2757, 'さい': -714, 'さを': 976, 'し，': 1557, 'し、': 1557, 'しい': -3714, 'した': 3562, 'して': 1449, 'しな': 2608, 'しま': 1200, 'す．': -1310, 'す。': -1310, 'する': 6521, 'ず，': 3426, 'ず、': 3426, 'ずに': 841, 'そう': 428, 'た．': 8875, 'た。': 8875, 'たい': -594, 'たの': 812, 'たり': -1183, 'たる': -853, 'だ．': 4098, 'だ。': 4098, 'だっ': 1004, 'った': -4748, 'って': 300, 'てい': 6240, 'てお': 855, 'ても': 302, 'です': 1437, 'でに': -1482, 'では': 2295, 'とう': -1387, 'とし': 2266, 'との': 541, 'とも': -3543, 'どう': 4664, 'ない': 1796, 'なく': -903, 'など': 2135, 'に，': -1021, 'に、': -1021, 'にし': 1771, 'にな': 1906, 'には': 2644, 'の，': -724, 'の、': -724, 'の子': -1000, 'は，': 1337, 'は、': 1337, 'べき': 2181, 'まし': 1113, 'ます': 6943, 'まっ': -1549, 'まで': 6154, 'まれ': -793, 'らし': 1479, 'られ': 6820, 'るる': 3818, 'れ，': 854, 'れ、': 854, 'れた': 1850, 'れて': 1375, 'れば': -3246, 'れる': 1091, 'われ': -605, 'んだ': 606, 'んで': 798, 'カ月': 990, '会議': 860, '入り': 1232, '大会': 2217, '始め': 1681, '市': 965, '新聞': -5055, '日，': 974, '日、': 974, '社会': 2024};
	  this.TC1__ = {'AAA': 1093, 'HHH': 1029, 'HHM': 580, 'HII': 998, 'HOH': -390, 'HOM': -331, 'IHI': 1169, 'IOH': -142, 'IOI': -1015, 'IOM': 467, 'MMH': 187, 'OOI': -1832};
	  this.TC2__ = {'HHO': 2088, 'HII': -1023, 'HMM': -1154, 'IHI': -1965, 'KKH': 703, 'OII': -2649};
	  this.TC3__ = {'AAA': -294, 'HHH': 346, 'HHI': -341, 'HII': -1088, 'HIK': 731, 'HOH': -1486, 'IHH': 128, 'IHI': -3041, 'IHO': -1935, 'IIH': -825, 'IIM': -1035, 'IOI': -542, 'KHH': -1216, 'KKA': 491, 'KKH': -1217, 'KOK': -1009, 'MHH': -2694, 'MHM': -457, 'MHO': 123, 'MMH': -471, 'NNH': -1689, 'NNO': 662, 'OHO': -3393};
	  this.TC4__ = {'HHH': -203, 'HHI': 1344, 'HHK': 365, 'HHM': -122, 'HHN': 182, 'HHO': 669, 'HIH': 804, 'HII': 679, 'HOH': 446, 'IHH': 695, 'IHO': -2324, 'IIH': 321, 'III': 1497, 'IIO': 656, 'IOO': 54, 'KAK': 4845, 'KKA': 3386, 'KKK': 3065, 'MHH': -405, 'MHI': 201, 'MMH': -241, 'MMM': 661, 'MOM': 841};
	  this.TQ1__ = {'BHHH': -227, 'BHHI': 316, 'BHIH': -132, 'BIHH': 60, 'BIII': 1595, 'BNHH': -744, 'BOHH': 225, 'BOOO': -908, 'OAKK': 482, 'OHHH': 281, 'OHIH': 249, 'OIHI': 200, 'OIIH': -68};
	  this.TQ2__ = {'BIHH': -1401, 'BIII': -1033, 'BKAK': -543, 'BOOO': -5591};
	  this.TQ3__ = {'BHHH': 478, 'BHHM': -1073, 'BHIH': 222, 'BHII': -504, 'BIIH': -116, 'BIII': -105, 'BMHI': -863, 'BMHM': -464, 'BOMH': 620, 'OHHH': 346, 'OHHI': 1729, 'OHII': 997, 'OHMH': 481, 'OIHH': 623, 'OIIH': 1344, 'OKAK': 2792, 'OKHH': 587, 'OKKA': 679, 'OOHH': 110, 'OOII': -685};
	  this.TQ4__ = {'BHHH': -721, 'BHHM': -3604, 'BHII': -966, 'BIIH': -607, 'BIII': -2181, 'OAAA': -2763, 'OAKK': 180, 'OHHH': -294, 'OHHI': 2446, 'OHHO': 480, 'OHIH': -1573, 'OIHH': 1935, 'OIHI': -493, 'OIIH': 626, 'OIII': -4007, 'OKAK': -8156};
	  this.TW1__ = {'につい': -4681, '東京都': 2026};
	  this.TW2__ = {'ある程': -2049, 'いった': -1256, 'ころが': -2434, 'しょう': 3873, 'その後': -4430, 'だって': -1049, 'ていた': 1833, 'として': -4657, 'ともに': -4517, 'もので': 1882, '一気に': -792, '初めて': -1512, '同時に': -8097, '大きな': -1255, '対して': -2721, '社会党': -3216};
	  this.TW3__ = {'いただ': -1734, 'してい': 1314, 'として': -4314, 'につい': -5483, 'にとっ': -5989, 'に当た': -6247, 'ので，': -727, 'ので、': -727, 'のもの': -600, 'れから': -3752, '十二月': -2287};
	  this.TW4__ = {'いう．': 8576, 'いう。': 8576, 'からな': -2348, 'してい': 2958, 'たが，': 1516, 'たが、': 1516, 'ている': 1538, 'という': 1349, 'ました': 5543, 'ません': 1097, 'ようと': -4258, 'よると': 5865};
	  this.UC1__ = {'A': 484, 'K': 93, 'M': 645, 'O': -505};
	  this.UC2__ = {'A': 819, 'H': 1059, 'I': 409, 'M': 3987, 'N': 5775, 'O': 646};
	  this.UC3__ = {'A': -1370, 'I': 2311};
	  this.UC4__ = {'A': -2643, 'H': 1809, 'I': -1032, 'K': -3450, 'M': 3565, 'N': 3876, 'O': 6646};
	  this.UC5__ = {'H': 313, 'I': -1238, 'K': -799, 'M': 539, 'O': -831};
	  this.UC6__ = {'H': -506, 'I': -253, 'K': 87, 'M': 247, 'O': -387};
	  this.UP1__ = {'O': -214};
	  this.UP2__ = {'B': 69, 'O': 935};
	  this.UP3__ = {'B': 189};
	  this.UQ1__ = {'BH': 21, 'BI': -12, 'BK': -99, 'BN': 142, 'BO': -56, 'OH': -95, 'OI': 477, 'OK': 410, 'OO': -2422};
	  this.UQ2__ = {'BH': 216, 'BI': 113, 'OK': 1759};
	  this.UQ3__ = {'BA': -479, 'BH': 42, 'BI': 1913, 'BK': -7198, 'BM': 3160, 'BN': 6427, 'BO': 14761, 'OI': -827, 'ON': -3212};
	  this.UW1__ = {'，': 156, '、': 156, '｢': -463, 'あ': -941, 'う': -127, 'が': -553, 'き': 121, 'こ': 505, 'で': -201, 'と': -547, 'ど': -123, 'に': -789, 'の': -185, 'は': -847, 'も': -466, 'や': -470, 'よ': 182, 'ら': -292, 'り': 208, 'れ': 169, 'を': -446, 'ん': -137, '・': -135, '主': -402, '京': -268, '区': -912, '午': 871, '国': -460, '大': 561, '委': 729, '市': -411, '日': -141, '理': 361, '生': -408, '県': -386, '都': -718};
	  this.UW2__ = {'，': -829, '、': -829, '〇': 892, '｢': -645, '｣': 3145, 'あ': -538, 'い': 505, 'う': 134, 'お': -502, 'か': 1454, 'が': -856, 'く': -412, 'こ': 1141, 'さ': 878, 'ざ': 540, 'し': 1529, 'す': -675, 'せ': 300, 'そ': -1011, 'た': 188, 'だ': 1837, 'つ': -949, 'て': -291, 'で': -268, 'と': -981, 'ど': 1273, 'な': 1063, 'に': -1764, 'の': 130, 'は': -409, 'ひ': -1273, 'べ': 1261, 'ま': 600, 'も': -1263, 'や': -402, 'よ': 1639, 'り': -579, 'る': -694, 'れ': 571, 'を': -2516, 'ん': 2095, 'ア': -587, 'カ': 306, 'キ': 568, 'ッ': 831, '三': -758, '不': -2150, '世': -302, '中': -968, '主': -861, '事': 492, '人': -123, '会': 978, '保': 362, '入': 548, '初': -3025, '副': -1566, '北': -3414, '区': -422, '大': -1769, '天': -865, '太': -483, '子': -1519, '学': 760, '実': 1023, '小': -2009, '市': -813, '年': -1060, '強': 1067, '手': -1519, '揺': -1033, '政': 1522, '文': -1355, '新': -1682, '日': -1815, '明': -1462, '最': -630, '朝': -1843, '本': -1650, '東': -931, '果': -665, '次': -2378, '民': -180, '気': -1740, '理': 752, '発': 529, '目': -1584, '相': -242, '県': -1165, '立': -763, '第': 810, '米': 509, '自': -1353, '行': 838, '西': -744, '見': -3874, '調': 1010, '議': 1198, '込': 3041, '開': 1758, '間': -1257};
	  this.UW3__ = {'1': -800, '，': 4889, '−': -1723, '、': 4889, '々': -2311, '〇': 5827, '｣': 2670, '〓': -3573, 'あ': -2696, 'い': 1006, 'う': 2342, 'え': 1983, 'お': -4864, 'か': -1163, 'が': 3271, 'く': 1004, 'け': 388, 'げ': 401, 'こ': -3552, 'ご': -3116, 'さ': -1058, 'し': -395, 'す': 584, 'せ': 3685, 'そ': -5228, 'た': 842, 'ち': -521, 'っ': -1444, 'つ': -1081, 'て': 6167, 'で': 2318, 'と': 1691, 'ど': -899, 'な': -2788, 'に': 2745, 'の': 4056, 'は': 4555, 'ひ': -2171, 'ふ': -1798, 'へ': 1199, 'ほ': -5516, 'ま': -4384, 'み': -120, 'め': 1205, 'も': 2323, 'や': -788, 'よ': -202, 'ら': 727, 'り': 649, 'る': 5905, 'れ': 2773, 'わ': -1207, 'を': 6620, 'ん': -518, 'ア': 551, 'グ': 1319, 'ス': 874, 'ッ': -1350, 'ト': 521, 'ム': 1109, 'ル': 1591, 'ロ': 2201, 'ン': 278, '・': -3794, '一': -1619, '下': -1759, '世': -2087, '両': 3815, '中': 653, '主': -758, '予': -1193, '二': 974, '人': 2742, '今': 792, '他': 1889, '以': -1368, '低': 811, '何': 4265, '作': -361, '保': -2439, '元': 4858, '党': 3593, '全': 1574, '公': -3030, '六': 755, '共': -1880, '円': 5807, '再': 3095, '分': 457, '初': 2475, '別': 1129, '前': 2286, '副': 4437, '力': 365, '動': -949, '務': -1872, '化': 1327, '北': -1038, '区': 4646, '千': -2309, '午': -783, '協': -1006, '口': 483, '右': 1233, '各': 3588, '合': -241, '同': 3906, '和': -837, '員': 4513, '国': 642, '型': 1389, '場': 1219, '外': -241, '妻': 2016, '学': -1356, '安': -423, '実': -1008, '家': 1078, '小': -513, '少': -3102, '州': 1155, '市': 3197, '平': -1804, '年': 2416, '広': -1030, '府': 1605, '度': 1452, '建': -2352, '当': -3885, '得': 1905, '思': -1291, '性': 1822, '戸': -488, '指': -3973, '政': -2013, '教': -1479, '数': 3222, '文': -1489, '新': 1764, '日': 2099, '旧': 5792, '昨': -661, '時': -1248, '曜': -951, '最': -937, '月': 4125, '期': 360, '李': 3094, '村': 364, '東': -805, '核': 5156, '森': 2438, '業': 484, '氏': 2613, '民': -1694, '決': -1073, '法': 1868, '海': -495, '無': 979, '物': 461, '特': -3850, '生': -273, '用': 914, '町': 1215, '的': 7313, '直': -1835, '省': 792, '県': 6293, '知': -1528, '私': 4231, '税': 401, '立': -960, '第': 1201, '米': 7767, '系': 3066, '約': 3663, '級': 1384, '統': -4229, '総': 1163, '線': 1255, '者': 6457, '能': 725, '自': -2869, '英': 785, '見': 1044, '調': -562, '財': -733, '費': 1777, '車': 1835, '軍': 1375, '込': -1504, '通': -1136, '選': -681, '郎': 1026, '郡': 4404, '部': 1200, '金': 2163, '長': 421, '開': -1432, '間': 1302, '関': -1282, '雨': 2009, '電': -1045, '非': 2066, '駅': 1620};
	  this.UW4__ = {'，': 3930, '．': 3508, '―': -4841, '、': 3930, '。': 3508, '〇': 4999, '｢': 1895, '｣': 3798, '〓': -5156, 'あ': 4752, 'い': -3435, 'う': -640, 'え': -2514, 'お': 2405, 'か': 530, 'が': 6006, 'き': -4482, 'ぎ': -3821, 'く': -3788, 'け': -4376, 'げ': -4734, 'こ': 2255, 'ご': 1979, 'さ': 2864, 'し': -843, 'じ': -2506, 'す': -731, 'ず': 1251, 'せ': 181, 'そ': 4091, 'た': 5034, 'だ': 5408, 'ち': -3654, 'っ': -5882, 'つ': -1659, 'て': 3994, 'で': 7410, 'と': 4547, 'な': 5433, 'に': 6499, 'ぬ': 1853, 'ね': 1413, 'の': 7396, 'は': 8578, 'ば': 1940, 'ひ': 4249, 'び': -4134, 'ふ': 1345, 'へ': 6665, 'べ': -744, 'ほ': 1464, 'ま': 1051, 'み': -2082, 'む': -882, 'め': -5046, 'も': 4169, 'ゃ': -2666, 'や': 2795, 'ょ': -1544, 'よ': 3351, 'ら': -2922, 'り': -9726, 'る': -14896, 'れ': -2613, 'ろ': -4570, 'わ': -1783, 'を': 13150, 'ん': -2352, 'カ': 2145, 'コ': 1789, 'セ': 1287, 'ッ': -724, 'ト': -403, 'メ': -1635, 'ラ': -881, 'リ': -541, 'ル': -856, 'ン': -3637, '・': -4371, 'ー': -11870, '一': -2069, '中': 2210, '予': 782, '事': -190, '井': -1768, '人': 1036, '以': 544, '会': 950, '体': -1286, '作': 530, '側': 4292, '先': 601, '党': -2006, '共': -1212, '内': 584, '円': 788, '初': 1347, '前': 1623, '副': 3879, '力': -302, '動': -740, '務': -2715, '化': 776, '区': 4517, '協': 1013, '参': 1555, '合': -1834, '和': -681, '員': -910, '器': -851, '回': 1500, '国': -619, '園': -1200, '地': 866, '場': -1410, '塁': -2094, '士': -1413, '多': 1067, '大': 571, '子': -4802, '学': -1397, '定': -1057, '寺': -809, '小': 1910, '屋': -1328, '山': -1500, '島': -2056, '川': -2667, '市': 2771, '年': 374, '庁': -4556, '後': 456, '性': 553, '感': 916, '所': -1566, '支': 856, '改': 787, '政': 2182, '教': 704, '文': 522, '方': -856, '日': 1798, '時': 1829, '最': 845, '月': -9066, '木': -485, '来': -442, '校': -360, '業': -1043, '氏': 5388, '民': -2716, '気': -910, '沢': -939, '済': -543, '物': -735, '率': 672, '球': -1267, '生': -1286, '産': -1101, '田': -2900, '町': 1826, '的': 2586, '目': 922, '省': -3485, '県': 2997, '空': -867, '立': -2112, '第': 788, '米': 2937, '系': 786, '約': 2171, '経': 1146, '統': -1169, '総': 940, '線': -994, '署': 749, '者': 2145, '能': -730, '般': -852, '行': -792, '規': 792, '警': -1184, '議': -244, '谷': -1000, '賞': 730, '車': -1481, '軍': 1158, '輪': -1433, '込': -3370, '近': 929, '道': -1291, '選': 2596, '郎': -4866, '都': 1192, '野': -1100, '銀': -2213, '長': 357, '間': -2344, '院': -2297, '際': -2604, '電': -878, '領': -1659, '題': -792, '館': -1984, '首': 1749, '高': 2120};
	  this.UW5__ = {'1': -514, '，': 465, '．': -299, 'E2': -32768, '］': -2762, '、': 465, '。': -299, '｢': 363, 'あ': 1655, 'い': 331, 'う': -503, 'え': 1199, 'お': 527, 'か': 647, 'が': -421, 'き': 1624, 'ぎ': 1971, 'く': 312, 'げ': -983, 'さ': -1537, 'し': -1371, 'す': -852, 'だ': -1186, 'ち': 1093, 'っ': 52, 'つ': 921, 'て': -18, 'で': -850, 'と': -127, 'ど': 1682, 'な': -787, 'に': -1224, 'の': -635, 'は': -578, 'べ': 1001, 'み': 502, 'め': 865, 'ゃ': 3350, 'ょ': 854, 'り': -208, 'る': 429, 'れ': 504, 'わ': 419, 'を': -1264, 'ん': 327, 'イ': 241, 'ル': 451, 'ン': -343, '中': -871, '京': 722, '会': -1153, '党': -654, '務': 3519, '区': -901, '告': 848, '員': 2104, '大': -1296, '学': -548, '定': 1785, '嵐': -1304, '市': -2991, '席': 921, '年': 1763, '思': 872, '所': -814, '挙': 1618, '新': -1682, '日': 218, '月': -4353, '査': 932, '格': 1356, '機': -1508, '氏': -1347, '田': 240, '町': -3912, '的': -3149, '相': 1319, '省': -1052, '県': -4003, '研': -997, '社': -278, '空': -813, '統': 1955, '者': -2233, '表': 663, '語': -1073, '議': 1219, '選': -1018, '郎': -368, '長': 786, '間': 1191, '題': 2368, '館': -689};
	  this.UW6__ = {'1': -270, '，': 227, '．': 808, 'E1': 306, '、': 227, '。': 808, 'あ': -307, 'う': 189, 'か': 241, 'が': -73, 'く': -121, 'こ': -200, 'じ': 1782, 'す': 383, 'た': -428, 'っ': 573, 'て': -1014, 'で': 101, 'と': -105, 'な': -253, 'に': -149, 'の': -417, 'は': -236, 'も': -206, 'り': 187, 'る': -135, 'を': 195, 'ル': -673, 'ン': -496, '一': -277, '中': 201, '件': -800, '会': 624, '前': 302, '区': 1792, '員': -1212, '委': 798, '学': -960, '市': 887, '広': -695, '後': 535, '業': -697, '相': 753, '社': -507, '福': 974, '空': -822, '者': 1811, '連': 463, '郎': 1082};

	  return this;
	};

	util.inherits(TokenizerJa, Tokenizer);


	/**
	 * @param {string} str
	 * @return {string}
	 * @private
	 */
	TokenizerJa.prototype.ctype_ = function(str) {
	  for (var i = 0, length = this.chartype_.length; i < length; i++) {
	    if (str.match(this.chartype_[i][0])) {
	      return this.chartype_[i][1];
	    }
	  }
	  return 'O';
	};


	/**
	 * @param {string} v
	 * @return {number}
	 * @private
	 */
	TokenizerJa.prototype.ts_ = function(v) {
	  if (v) { return v; }
	  return 0;
	};


	/**
	 * Remove punctuations signs from tokens.
	 *
	 * @param {Array.<string>} tokens An array of tokens.
	 * @return {Array.<string>} An array of tokens.
	 * @private
	 */
	TokenizerJa.prototype.removePuncTokens = function(tokens) {
	  return tokens
	      .map(function(token) {
	        return token.replace(/[＿－・，、；：！？．。（）［］｛｝｢｣＠＊＼／＆＃％｀＾＋＜＝＞｜～≪≫─＄＂_\-･,､;:!?.｡()[\]{}「」@*\/&#%`^+<=>|~«»$"\s]+/g, '');
	      })
	      .filter(function(token) {
	        return token != '';
	      });
	};


	/**
	 * @param {string} text
	 * @return {Array.<string>}
	 */
	TokenizerJa.prototype.tokenize = function(text) {
	  if (text == null || text == undefined || text == '') {
	    return [];
	  }
	  text = normalize(text);
	  var result = [];
	  var seg = ['B3', 'B2', 'B1'];
	  var ctype = ['O', 'O', 'O'];
	  var o = text.split('');
	  var i;
	  var length;
	  for (i = 0, length = o.length; i < length; ++i) {
	    seg.push(o[i]);
	    ctype.push(this.ctype_(o[i]));
	  }
	  seg.push('E1');
	  seg.push('E2');
	  seg.push('E3');
	  ctype.push('O');
	  ctype.push('O');
	  ctype.push('O');
	  var word = seg[3];
	  var p1 = 'U';
	  var p2 = 'U';
	  var p3 = 'U';
	  for (i = 4, length = seg.length - 3; i < length; ++i) {
	    var score = this.BIAS__;
	    var w1 = seg[i - 3];
	    var w2 = seg[i - 2];
	    var w3 = seg[i - 1];
	    var w4 = seg[i];
	    var w5 = seg[i + 1];
	    var w6 = seg[i + 2];
	    var c1 = ctype[i - 3];
	    var c2 = ctype[i - 2];
	    var c3 = ctype[i - 1];
	    var c4 = ctype[i];
	    var c5 = ctype[i + 1];
	    var c6 = ctype[i + 2];
	    score += this.ts_(this.UP1__[p1]);
	    score += this.ts_(this.UP2__[p2]);
	    score += this.ts_(this.UP3__[p3]);
	    score += this.ts_(this.BP1__[p1 + p2]);
	    score += this.ts_(this.BP2__[p2 + p3]);
	    score += this.ts_(this.UW1__[w1]);
	    score += this.ts_(this.UW2__[w2]);
	    score += this.ts_(this.UW3__[w3]);
	    score += this.ts_(this.UW4__[w4]);
	    score += this.ts_(this.UW5__[w5]);
	    score += this.ts_(this.UW6__[w6]);
	    score += this.ts_(this.BW1__[w2 + w3]);
	    score += this.ts_(this.BW2__[w3 + w4]);
	    score += this.ts_(this.BW3__[w4 + w5]);
	    score += this.ts_(this.TW1__[w1 + w2 + w3]);
	    score += this.ts_(this.TW2__[w2 + w3 + w4]);
	    score += this.ts_(this.TW3__[w3 + w4 + w5]);
	    score += this.ts_(this.TW4__[w4 + w5 + w6]);
	    score += this.ts_(this.UC1__[c1]);
	    score += this.ts_(this.UC2__[c2]);
	    score += this.ts_(this.UC3__[c3]);
	    score += this.ts_(this.UC4__[c4]);
	    score += this.ts_(this.UC5__[c5]);
	    score += this.ts_(this.UC6__[c6]);
	    score += this.ts_(this.BC1__[c2 + c3]);
	    score += this.ts_(this.BC2__[c3 + c4]);
	    score += this.ts_(this.BC3__[c4 + c5]);
	    score += this.ts_(this.TC1__[c1 + c2 + c3]);
	    score += this.ts_(this.TC2__[c2 + c3 + c4]);
	    score += this.ts_(this.TC3__[c3 + c4 + c5]);
	    score += this.ts_(this.TC4__[c4 + c5 + c6]);
	    //score += this.ts_(this.TC5__[c4 + c5 + c6]);
	    score += this.ts_(this.UQ1__[p1 + c1]);
	    score += this.ts_(this.UQ2__[p2 + c2]);
	    score += this.ts_(this.UQ3__[p3 + c3]);
	    score += this.ts_(this.BQ1__[p2 + c2 + c3]);
	    score += this.ts_(this.BQ2__[p2 + c3 + c4]);
	    score += this.ts_(this.BQ3__[p3 + c2 + c3]);
	    score += this.ts_(this.BQ4__[p3 + c3 + c4]);
	    score += this.ts_(this.TQ1__[p2 + c1 + c2 + c3]);
	    score += this.ts_(this.TQ2__[p2 + c2 + c3 + c4]);
	    score += this.ts_(this.TQ3__[p3 + c1 + c2 + c3]);
	    score += this.ts_(this.TQ4__[p3 + c2 + c3 + c4]);
	    var p = 'O';
	    if (score > 0) {
	      result.push(word);
	      word = '';
	      p = 'B';
	    }
	    p1 = p2;
	    p2 = p3;
	    p3 = p;
	    word += seg[i];
	  }
	  result.push(word);

	  result = this.removePuncTokens(result);

	  return result;
	};

	module.exports = TokenizerJa;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Normalize Japanese inputs and expose function to perform several conversions.
	 *
	 * Note: The space character is treated like a roman character as it usually
	 *   has the same width as them in Japanese texts.
	 *
	 * \@todo Replace characters range from ㈠ to ㉃, ㊀ to ㊰ and ㇰ to ㇿ.
	 * \@todo Lazy initializations of conversionTables and converters.
	 * \@todo Would fixHalfwidthKana be useful?
	 *
	 * Descriptions of functions exposed:
	 * normalizeJapanese 「全角」英字・数字を「半角」、「半角」記・カタカナを「全角」に変換
	 * converters.fullwidthToHalfwidth.alphabet    「全角」英字を「半角」に変換
	 * converters.halfwidthToFullwidth.alphabet    「半角」英字を「全角」に変換
	 * converters.fullwidthToHalfwidth.numbers     「全角」数字を「半角」に変換
	 * converters.halfwidthToFullwidth.numbers     「半角」数字を「全角」に変換 「全角」スペースを「半角」
	 * converters.fullwidthToHalfwidth.punctuation 「全角」記号を「半角」に変換 「半角」スペースを「全角」
	 * converters.halfwidthToFullwidth.punctuation 「半角」記号を「全角」に変換
	 * converters.fullwidthToHalfwidth.katakana    「全角カタカナ」を「半角カタカナ」に変換
	 * converters.halfwidthToFullwidth.katakana    「半角カタカナ」を「全角カタカナ」に変換
	 * converters.hiraganaToKatakana               「カタカナ」を「ひらがな」に変換
	 * converters.katakanaToHiragana               「ひらがな」を「カタカナ」に変換
	 */

	var flip = __webpack_require__(57).flip;
	var merge = __webpack_require__(57).merge;
	var replacer = __webpack_require__(57).replacer;

	// From http://fernweh.jp/b/mb_convert_kana_js/
	var conversionTables = {
	  fullwidthToHalfwidth: {
	    alphabet: {
	      'ａ': 'a',
	      'ｂ': 'b',
	      'ｃ': 'c',
	      'ｄ': 'd',
	      'ｅ': 'e',
	      'ｆ': 'f',
	      'ｇ': 'g',
	      'ｈ': 'h',
	      'ｉ': 'i',
	      'ｊ': 'j',
	      'ｋ': 'k',
	      'ｌ': 'l',
	      'ｍ': 'm',
	      'ｎ': 'n',
	      'ｏ': 'o',
	      'ｐ': 'p',
	      'ｑ': 'q',
	      'ｒ': 'r',
	      'ｓ': 's',
	      'ｔ': 't',
	      'ｕ': 'u',
	      'ｖ': 'v',
	      'ｗ': 'w',
	      'ｘ': 'x',
	      'ｙ': 'y',
	      'ｚ': 'z',
	      'Ａ': 'A',
	      'Ｂ': 'B',
	      'Ｃ': 'C',
	      'Ｄ': 'D',
	      'Ｅ': 'E',
	      'Ｆ': 'F',
	      'Ｇ': 'G',
	      'Ｈ': 'H',
	      'Ｉ': 'I',
	      'Ｊ': 'J',
	      'Ｋ': 'K',
	      'Ｌ': 'L',
	      'Ｍ': 'M',
	      'Ｎ': 'N',
	      'Ｏ': 'O',
	      'Ｐ': 'P',
	      'Ｑ': 'Q',
	      'Ｒ': 'R',
	      'Ｓ': 'S',
	      'Ｔ': 'T',
	      'Ｕ': 'U',
	      'Ｖ': 'V',
	      'Ｗ': 'W',
	      'Ｘ': 'X',
	      'Ｙ': 'Y',
	      'Ｚ': 'Z',
	      '　': ' ' // Fullwidth space
	    },

	    numbers: {
	      '０': '0',
	      '１': '1',
	      '２': '2',
	      '３': '3',
	      '４': '4',
	      '５': '5',
	      '６': '6',
	      '７': '7',
	      '８': '8',
	      '９': '9'
	    },

	    symbol: {
	      '＿': '_',
	      '－': '-',
	      '，': ',',
	      '；': ';',
	      '：': ':',
	      '！': '!',
	      '？': '?',
	      '．': '.',
	      '（': '(',
	      '）': ')',
	      '［': '[',
	      '］': ']',
	      '｛': '{',
	      '｝': '}',
	      '＠': '@',
	      '＊': '*',
	      '＼': '\\',
	      '／': '/',
	      '＆': '&',
	      '＃': '#',
	      '％': '%',
	      '｀': '`',
	      '＾': '^',
	      '＋': '+',
	      '＜': '<',
	      '＝': '=',
	      '＞': '>',
	      '｜': '|',
	      // Never converted: '～': '~',
	      '≪': '«',
	      '≫': '»',
	      '─': '-',
	      '＄': '$',
	      '＂': '"'
	    },

	    purePunctuation: {
	      '、': '､',
	      '。': '｡',
	      '・': '･',
	      '「': '｢',
	      '」': '｣'
	    },

	    punctuation: {},

	    katakana: {
	      '゛': 'ﾞ',
	      '゜': 'ﾟ',
	      'ー': 'ｰ',

	      'ヴ': 'ｳﾞ',
	      'ガ': 'ｶﾞ',
	      'ギ': 'ｷﾞ',
	      'グ': 'ｸﾞ',
	      'ゲ': 'ｹﾞ',
	      'ゴ': 'ｺﾞ',
	      'ザ': 'ｻﾞ',
	      'ジ': 'ｼﾞ',
	      'ズ': 'ｽﾞ',
	      'ゼ': 'ｾﾞ',
	      'ゾ': 'ｿﾞ',
	      'ダ': 'ﾀﾞ',
	      'ヂ': 'ﾁﾞ',
	      'ヅ': 'ﾂﾞ',
	      'デ': 'ﾃﾞ',
	      'ド': 'ﾄﾞ',
	      'バ': 'ﾊﾞ',
	      'パ': 'ﾊﾟ',
	      'ビ': 'ﾋﾞ',
	      'ピ': 'ﾋﾟ',
	      'ブ': 'ﾌﾞ',
	      'プ': 'ﾌﾟ',
	      'ベ': 'ﾍﾞ',
	      'ペ': 'ﾍﾟ',
	      'ボ': 'ﾎﾞ',
	      'ポ': 'ﾎﾟ',

	      'ァ': 'ｧ',
	      'ア': 'ｱ',
	      'ィ': 'ｨ',
	      'イ': 'ｲ',
	      'ゥ': 'ｩ',
	      'ウ': 'ｳ',
	      'ェ': 'ｪ',
	      'エ': 'ｴ',
	      'ォ': 'ｫ',
	      'オ': 'ｵ',
	      'カ': 'ｶ',
	      'キ': 'ｷ',
	      'ク': 'ｸ',
	      'ケ': 'ｹ',
	      'コ': 'ｺ',
	      'サ': 'ｻ',
	      'シ': 'ｼ',
	      'ス': 'ｽ',
	      'セ': 'ｾ',
	      'ソ': 'ｿ',
	      'タ': 'ﾀ',
	      'チ': 'ﾁ',
	      'ッ': 'ｯ',
	      'ツ': 'ﾂ',
	      'テ': 'ﾃ',
	      'ト': 'ﾄ',
	      'ナ': 'ﾅ',
	      'ニ': 'ﾆ',
	      'ヌ': 'ﾇ',
	      'ネ': 'ﾈ',
	      'ノ': 'ﾉ',
	      'ハ': 'ﾊ',
	      'ヒ': 'ﾋ',
	      'フ': 'ﾌ',
	      'ヘ': 'ﾍ',
	      'ホ': 'ﾎ',
	      'マ': 'ﾏ',
	      'ミ': 'ﾐ',
	      'ム': 'ﾑ',
	      'メ': 'ﾒ',
	      'モ': 'ﾓ',
	      'ャ': 'ｬ',
	      'ヤ': 'ﾔ',
	      'ュ': 'ｭ',
	      'ユ': 'ﾕ',
	      'ョ': 'ｮ',
	      'ヨ': 'ﾖ',
	      'ラ': 'ﾗ',
	      'リ': 'ﾘ',
	      'ル': 'ﾙ',
	      'レ': 'ﾚ',
	      'ロ': 'ﾛ',
	      'ワ': 'ﾜ',
	      'ヲ': 'ｦ',
	      'ン': 'ﾝ'
	    }
	  },

	  halfwidthToFullwidth: {}
	};

	var fixFullwidthKana = {
	  'ゝ゛': 'ゞ',
	  'ヽ゛': 'ヾ',

	  'う゛': 'ゔ',
	  'か゛': 'が',
	  'き゛': 'ぎ',
	  'く゛': 'ぐ',
	  'け゛': 'げ',
	  'こ゛': 'ご',
	  'さ゛': 'ざ',
	  'し゛': 'じ',
	  'す゛': 'ず',
	  'せ゛': 'ぜ',
	  'そ゛': 'ぞ',
	  'た゛': 'だ',
	  'ち゛': 'ぢ',
	  'つ゛': 'づ',
	  'て゛': 'で',
	  'と゛': 'ど',
	  'は゛': 'ば',
	  'は゜': 'ぱ',
	  'ひ゛': 'び',
	  'ひ゜': 'ぴ',
	  'ふ゛': 'ぶ',
	  'ふ゜': 'ぷ',
	  'へ゛': 'べ',
	  'へ゜': 'ぺ',
	  'ほ゛': 'ぼ',
	  'ほ゜': 'ぽ',
	  'っな': 'んな',
	  'っに': 'んに',
	  'っぬ': 'んぬ',
	  'っね': 'んね',
	  'っの': 'んの',

	  'ウ゛': 'ヴ',
	  'カ゛': 'ガ',
	  'キ゛': 'ギ',
	  'ク゛': 'グ',
	  'ケ゛': 'ゲ',
	  'コ゛': 'ゴ',
	  'サ゛': 'ザ',
	  'シ゛': 'ジ',
	  'ス゛': 'ズ',
	  'セ゛': 'ゼ',
	  'ソ゛': 'ゾ',
	  'タ゛': 'ダ',
	  'チ゛': 'ヂ',
	  'ツ゛': 'ヅ',
	  'テ゛': 'デ',
	  'ト゛': 'ド',
	  'ハ゛': 'バ',
	  'ハ゜': 'パ',
	  'ヒ゛': 'ビ',
	  'ヒ゜': 'ピ',
	  'フ゛': 'ブ',
	  'フ゜': 'プ',
	  'ヘ゛': 'ベ',
	  'ヘ゜': 'ペ',
	  'ホ゛': 'ボ',
	  'ホ゜': 'ポ',
	  'ッナ': 'ンナ',
	  'ッニ': 'ンニ',
	  'ッヌ': 'ンヌ',
	  'ッネ': 'ンネ',
	  'ッノ': 'ンノ'
	};

	var fixCompositeSymbolsTable = {
	  '㋀': '1月',
	  '㋁': '2月',
	  '㋂': '3月',
	  '㋃': '4月',
	  '㋄': '5月',
	  '㋅': '6月',
	  '㋆': '7月',
	  '㋇': '8月',
	  '㋈': '9月',
	  '㋉': '10月',
	  '㋊': '11月',
	  '㋋': '12月',

	  '㏠': '1日',
	  '㏡': '2日',
	  '㏢': '3日',
	  '㏣': '4日',
	  '㏤': '5日',
	  '㏥': '6日',
	  '㏦': '7日',
	  '㏧': '8日',
	  '㏨': '9日',
	  '㏩': '10日',
	  '㏪': '11日',
	  '㏫': '12日',
	  '㏬': '13日',
	  '㏭': '14日',
	  '㏮': '15日',
	  '㏯': '16日',
	  '㏰': '17日',
	  '㏱': '18日',
	  '㏲': '19日',
	  '㏳': '20日',
	  '㏴': '21日',
	  '㏵': '22日',
	  '㏶': '23日',
	  '㏷': '24日',
	  '㏸': '25日',
	  '㏹': '26日',
	  '㏺': '27日',
	  '㏻': '28日',
	  '㏼': '29日',
	  '㏽': '30日',
	  '㏾': '31日',

	  '㍘': '0点',
	  '㍙': '1点',
	  '㍚': '2点',
	  '㍛': '3点',
	  '㍜': '4点',
	  '㍝': '5点',
	  '㍞': '6点',
	  '㍟': '7点',
	  '㍠': '8点',
	  '㍡': '9点',
	  '㍢': '10点',
	  '㍣': '11点',
	  '㍤': '12点',
	  '㍥': '13点',
	  '㍦': '14点',
	  '㍧': '15点',
	  '㍨': '16点',
	  '㍩': '17点',
	  '㍪': '18点',
	  '㍫': '19点',
	  '㍬': '20点',
	  '㍭': '21点',
	  '㍮': '22点',
	  '㍯': '23点',
	  '㍰': '24点',

	  '㍻': '平成',
	  '㍼': '昭和',
	  '㍽': '大正',
	  '㍾': '明治',
	  '㍿': '株式会社',

	  '㌀': 'アパート',
	  '㌁': 'アルファ',
	  '㌂': 'アンペア',
	  '㌃': 'アール',
	  '㌄': 'イニング',
	  '㌅': 'インチ',
	  '㌆': 'ウオン',
	  '㌇': 'エスクード',
	  '㌈': 'エーカー',
	  '㌉': 'オンス',
	  '㌊': 'オーム',
	  '㌋': 'カイリ', //海里
	  '㌌': 'カラット',
	  '㌍': 'カロリー',
	  '㌎': 'ガロン',
	  '㌏': 'ガンマ',
	  '㌐': 'ギガ',
	  '㌑': 'ギニー',
	  '㌒': 'キュリー',
	  '㌓': 'ギルダー',
	  '㌔': 'キロ',
	  '㌕': 'キログラム',
	  '㌖': 'キロメートル',
	  '㌗': 'キロワット',
	  '㌘': 'グラム',
	  '㌙': 'グラムトン',
	  '㌚': 'クルゼイロ',
	  '㌛': 'クローネ',
	  '㌜': 'ケース',
	  '㌝': 'コルナ',
	  '㌞': 'コーポ',
	  '㌟': 'サイクル',
	  '㌠': 'サンチーム',
	  '㌡': 'シリング',
	  '㌢': 'センチ',
	  '㌣': 'セント',
	  '㌤': 'ダース',
	  '㌥': 'デシ',
	  '㌦': 'ドル',
	  '㌧': 'トン',
	  '㌨': 'ナノ',
	  '㌩': 'ノット',
	  '㌪': 'ハイツ',
	  '㌫': 'パーセント',
	  '㌬': 'パーツ',
	  '㌭': 'バーレル',
	  '㌮': 'ピアストル',
	  '㌯': 'ピクル',
	  '㌰': 'ピコ',
	  '㌱': 'ビル',
	  '㌲': 'ファラッド',
	  '㌳': 'フィート',
	  '㌴': 'ブッシェル',
	  '㌵': 'フラン',
	  '㌶': 'ヘクタール',
	  '㌷': 'ペソ',
	  '㌸': 'ペニヒ',
	  '㌹': 'ヘルツ',
	  '㌺': 'ペンス',
	  '㌻': 'ページ',
	  '㌼': 'ベータ',
	  '㌽': 'ポイント',
	  '㌾': 'ボルト',
	  '㌿': 'ホン',
	  '㍀': 'ポンド',
	  '㍁': 'ホール',
	  '㍂': 'ホーン',
	  '㍃': 'マイクロ',
	  '㍄': 'マイル',
	  '㍅': 'マッハ',
	  '㍆': 'マルク',
	  '㍇': 'マンション',
	  '㍈': 'ミクロン',
	  '㍉': 'ミリ',
	  '㍊': 'ミリバール',
	  '㍋': 'メガ',
	  '㍌': 'メガトン',
	  '㍍': 'メートル',
	  '㍎': 'ヤード',
	  '㍏': 'ヤール',
	  '㍐': 'ユアン',
	  '㍑': 'リットル',
	  '㍒': 'リラ',
	  '㍓': 'ルピー',
	  '㍔': 'ルーブル',
	  '㍕': 'レム',
	  '㍖': 'レントゲン',
	  '㍗': 'ワット'
	};

	// punctuation is pure_punctuation
	conversionTables.fullwidthToHalfwidth.punctuation = merge(
	    conversionTables.fullwidthToHalfwidth.symbol,
	    conversionTables.fullwidthToHalfwidth.purePunctuation
	)

	// Fill in the conversion tables with the flipped tables.
	conversionTables.halfwidthToFullwidth.alphabet = flip(conversionTables.fullwidthToHalfwidth.alphabet);
	conversionTables.halfwidthToFullwidth.numbers = flip(conversionTables.fullwidthToHalfwidth.numbers);
	conversionTables.halfwidthToFullwidth.symbol = flip(conversionTables.fullwidthToHalfwidth.symbol);
	conversionTables.halfwidthToFullwidth.purePunctuation = flip(conversionTables.fullwidthToHalfwidth.purePunctuation);
	conversionTables.halfwidthToFullwidth.punctuation = flip(conversionTables.fullwidthToHalfwidth.punctuation);
	conversionTables.halfwidthToFullwidth.katakana = flip(conversionTables.fullwidthToHalfwidth.katakana);

	// Build the normalization table.
	conversionTables.normalize = merge(
	    conversionTables.fullwidthToHalfwidth.alphabet,
	    conversionTables.fullwidthToHalfwidth.numbers,
	    conversionTables.fullwidthToHalfwidth.symbol,
	    conversionTables.halfwidthToFullwidth.purePunctuation,
	    conversionTables.halfwidthToFullwidth.katakana
	    );

	var converters = {
	  fullwidthToHalfwidth: {
	    alphabet: replacer(conversionTables.fullwidthToHalfwidth.alphabet),
	    numbers: replacer(conversionTables.fullwidthToHalfwidth.numbers),
	    symbol: replacer(conversionTables.fullwidthToHalfwidth.symbol),
	    purePunctuation: replacer(conversionTables.fullwidthToHalfwidth.purePunctuation),
	    punctuation: replacer(conversionTables.fullwidthToHalfwidth.punctuation),
	    katakana: replacer(conversionTables.fullwidthToHalfwidth.katakana)
	  },

	  halfwidthToFullwidth: {
	    alphabet: replacer(conversionTables.halfwidthToFullwidth.alphabet),
	    numbers: replacer(conversionTables.halfwidthToFullwidth.numbers),
	    symbol: replacer(conversionTables.halfwidthToFullwidth.symbol),
	    purePunctuation: replacer(conversionTables.halfwidthToFullwidth.purePunctuation),
	    punctuation: replacer(conversionTables.halfwidthToFullwidth.punctuation),
	    katakana: replacer(conversionTables.halfwidthToFullwidth.katakana)
	  },

	  fixFullwidthKana: replacer(fixFullwidthKana),
	  normalize: replacer(conversionTables.normalize)
	};

	var fixCompositeSymbols = replacer(fixCompositeSymbolsTable);


	/**
	 * Convert hiragana to fullwidth katakana.
	 * According to http://jsperf.com/converting-japanese, these implementations are
	 * faster than using lookup tables.
	 *
	 * @param {string} str A string.
	 * @return {string} A string not containing hiragana.
	 */
	converters.hiraganaToKatakana = function(str) {
	  str = converters.halfwidthToFullwidth.katakana(str);
	  str = converters.fixFullwidthKana(str);

	  str = str.replace(/ゝ/g, 'ヽ');
	  str = str.replace(/ゞ/g, 'ヾ');
	  //str = str.replace(/?/g, '𛀀'); // Letter archaic E

	  str = str.replace(/[ぁ-ゖ]/g, function(str) {
	    return String.fromCharCode(str.charCodeAt(0) + 96);
	  });

	  return str;
	};


	/**
	 * Convert katakana to hiragana.
	 *
	 * @param {string} str A string.
	 * @return {string} A string not containing katakana.
	 */
	converters.katakanaToHiragana = function(str) {
	  str = converters.halfwidthToFullwidth.katakana(str);
	  str = converters.fixFullwidthKana(str);

	  str = str.replace(/ヽ/g, 'ゝ');
	  str = str.replace(/ヾ/g, 'ゞ');
	  //str = str.replace(/?/g, '𛀁'); // Letter archaic E

	  str = str.replace(/[ァ-ヶ]/g, function(str) {
	    return String.fromCharCode(str.charCodeAt(0) - 96);
	  });

	  return str;
	};


	/**
	 * Fix kana and apply the following processes;
	 * * Replace repeat characters
	 * * Alphabet to halfwidth
	 * * Numbers to halfwidth
	 * * Punctuation to fullwidth
	 * * Katakana to fullwidth
	 * * Fix fullwidth kana
	 * * Replace composite symbols
	 *
	 * @param {string} str
	 * @return {string}
	 */
	var normalize_ja = function(str) {
	  // Replace repeat characters.
	  str = str
	    .replace(/(..)々々/g, '$1$1')
	    .replace(/(.)々/g, '$1$1');

	  str = converters.normalize(str);
	  str = converters.fixFullwidthKana(str);

	  // Replace composite symbols.
	  str = fixCompositeSymbols(str);

	  return str;
	};

	exports.normalize_ja = normalize_ja;
	exports.converters = converters;


/***/ },
/* 57 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */


	/**
	 * Generate a replacing function given a table of patterns. Inspired by:
	 * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter
	 * The order of elements is significant. Longer elements should be listed first.
	 * @see Speed test http://jsperf.com/build-a-regexp-table
	 *
	 * @param {Object.<string, string>} translationTable The translation table of key value.
	 * @return {function(string): string} A translating function.
	 */
	function replacer(translationTable) {
	  /**
	   * An array of translationTable keys.
	   * @type {Array.<string>}
	   */
	  var pattern = [];

	  /**
	   * The regular expression doing the replacement job.
	   * @type {RegExp}
	   */
	  var regExp;

	  /**
	   * Used to iterate over translationTable.
	   * @type {string}
	   */
	  var key;

	  for (key in translationTable) {
	    // Escaping regexp special chars.
	    // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2
	    // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956
	    key = ('' + key).replace(/([-()\[\]{}+?*.$\^|,:#<!\\\/])/g, '\\$1').
	      replace(/\x08/g, '\\x08');

	    pattern.push(key);
	  }

	  regExp = new RegExp(pattern.join('|'), 'g');

	  /**
	   * @param {string} str Input string.
	   * @return {string} The string replaced.
	   */
	  return function(str) {
	    return str.replace(regExp, function(str) {
	      return translationTable[str];
	    });
	  };
	}


	/**
	 * Exchanges all keys with their associated values in an object.
	 *
	 * @param {Object.<string, string>} obj An object of strings.
	 * @return {Object.<string, string>} An object of strings.
	 */
	function flip(obj) {
	  var newObj = Object.create(null),
	      key;

	  for (key in obj) {
	    newObj[obj[key]] = key;
	  }

	  return newObj;
	}


	/**
	 * Merge several objects. Properties from earlier objects are overwritten by
	 * laters's in case of conflict.
	 *
	 * @param {...Object.<string, string>} var_args One or more objects of strings.
	 * @return {!Object.<string, string>} An object of strings.
	 */
	function merge(var_args) {
	  var args = [].slice.call(arguments),
	      newObj = Object.create(null),
	      id = 0, key;

	  while (args[id]) {
	    for (key in args[id]) {
	      newObj[key] = args[id][key];
	    }

	    id++;
	  }

	  return newObj;
	}

	exports.replacer = replacer;
	exports.flip = flip;
	exports.merge = merge;


/***/ },
/* 58 */
/***/ function(module, exports) {

	// Original copyright:
	/*
	 Licensed to the Apache Software Foundation (ASF) under one or more
	 contributor license agreements.  See the NOTICE file distributed with
	 this work for additional information regarding copyright ownership.
	 The ASF licenses this file to You under the Apache License, Version 2.0
	 the "License"); you may not use this file except in compliance with
	 the License.  You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	*/

	// This version:
	/*
	Copyright (c) 2012, Guillaume Marty

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// a list of commonly used words that have little meaning and can be excluded
	// from analysis.
	// Original location:
	// http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/resources/org/apache/lucene/analysis/ja/stopwords.txt
	var words = ['の', 'に', 'は', 'を', 'た', 'が', 'で', 'て', 'と', 'し', 'れ', 'さ',
	  'ある', 'いる', 'も', 'する', 'から', 'な', 'こと', 'として', 'い', 'や', 'れる',
	  'など', 'なっ', 'ない', 'この', 'ため', 'その', 'あっ', 'よう', 'また', 'もの',
	  'という', 'あり', 'まで', 'られ', 'なる', 'へ', 'か', 'だ', 'これ', 'によって',
	  'により', 'おり', 'より', 'による', 'ず', 'なり', 'られる', 'において', 'ば', 'なかっ',
	  'なく', 'しかし', 'について', 'せ', 'だっ', 'その後', 'できる', 'それ', 'う', 'ので',
	  'なお', 'のみ', 'でき', 'き', 'つ', 'における', 'および', 'いう', 'さらに', 'でも',
	  'ら', 'たり', 'その他', 'に関する', 'たち', 'ます', 'ん', 'なら', 'に対して', '特に',
	  'せる', '及び', 'これら', 'とき', 'では', 'にて', 'ほか', 'ながら', 'うち', 'そして',
	  'とともに', 'ただし', 'かつて', 'それぞれ', 'または', 'お', 'ほど', 'ものの', 'に対する',
	  'ほとんど', 'と共に', 'といった', 'です', 'とも', 'ところ', 'ここ'];

	// tell the world about the noise words.
	module.exports = words;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel, Martijn de Boer

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var AggressiveTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(AggressiveTokenizer, Tokenizer);

	module.exports = AggressiveTokenizer;

	AggressiveTokenizer.prototype.tokenize = function(text) {
	    // break a string up into an array of tokens by anything non-word
	    return this.trim(text.split(/[^a-zA-Z0-9_']+/));
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2011, Chris Umbel, Alex Langberg

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	var Tokenizer = __webpack_require__(9),
	  util = __webpack_require__(10),
	  CaseTokenizer = function() {
	    Tokenizer.call(this);
	  };

	util.inherits(CaseTokenizer, Tokenizer);

	CaseTokenizer.prototype.attach = function() {
	  var self = this;

	  String.prototype.tokenize = function(preserveApostrophe) {
	    return self.tokenize(this, preserveApostrophe);
	  }
	};

	// Idea from Seagull: http://stackoverflow.com/a/26482650
	CaseTokenizer.prototype.tokenize = function(text, preserveApostrophe) {
	  var whitelist = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
	  var lower = text.toLowerCase();
	  var upper = text.toUpperCase();
	  var result = '';
	  var i;

	  for (i = 0; i < lower.length; ++i) {
	    if (lower[i] !== upper[i] || whitelist.indexOf(lower[i]) > -1 || (text[i] === '\'' && preserveApostrophe)) {
	      result += text[i];
	    } else {
	      result += ' ';
	    }
	  }

	  return this.trim(result.replace(/\s+/g, ' ').split(' '));
	};

	module.exports = CaseTokenizer;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10),
	    _ = __webpack_require__(62)._;

	// Base Class for RegExp Matching
	var RegexpTokenizer = function(options) {
	    var options = options || {};
	    this._pattern = options.pattern || this._pattern;
	    this.discardEmpty = options.discardEmpty || true;

	    // Match and split on GAPS not the actual WORDS
	    this._gaps = options.gaps;
	    
	    if (this._gaps === undefined) {
	        this._gaps = true;
	    }
	};

	util.inherits(RegexpTokenizer, Tokenizer);

	RegexpTokenizer.prototype.tokenize = function(s) {
	    var results;

	    if (this._gaps) {
	        results = s.split(this._pattern);
	        return (this.discardEmpty) ? _.without(results,'',' ') : results;
	    } else {
	        return s.match(this._pattern);
	    }
	};

	exports.RegexpTokenizer = RegexpTokenizer;

	/***
	 * A tokenizer that divides a text into sequences of alphabetic and
	 * non-alphabetic characters.  E.g.:
	 *
	 *      >>> WordTokenizer().tokenize("She said 'hello'.")
	 *      ['She', 'said', 'hello']
	 * 
	 */
	var WordTokenizer = function(options) {
	    this._pattern = /[^A-Za-zА-Яа-я0-9_]+/;
	    RegexpTokenizer.call(this,options)
	};

	util.inherits(WordTokenizer, RegexpTokenizer);
	exports.WordTokenizer = WordTokenizer;

	/***
	 * A tokenizer that divides a text into sequences of alphabetic and
	 * non-alphabetic characters.  E.g.:
	 *
	 *      >>> WordPunctTokenizer().tokenize("She said 'hello'.")
	 *      ["She","said","'","hello","'","."]
	 * 
	 */
	var WordPunctTokenizer = function(options) {
	    this._pattern = new RegExp(/(\w+|[а-я0-9_]+|\.|\!|\'|\"")/i);
	    RegexpTokenizer.call(this,options)
	};

	util.inherits(WordPunctTokenizer, RegexpTokenizer);
	exports.WordPunctTokenizer = WordPunctTokenizer;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10),
	    _ = __webpack_require__(62)._;

	var contractions2 = [
	    /(.)('ll|'re|'ve|n't|'s|'m|'d)\b/ig,
	    /\b(can)(not)\b/ig,
	    /\b(D)('ye)\b/ig,
	    /\b(Gim)(me)\b/ig,
	    /\b(Gon)(na)\b/ig,
	    /\b(Got)(ta)\b/ig,
	    /\b(Lem)(me)\b/ig,
	    /\b(Mor)('n)\b/ig,
	    /\b(T)(is)\b/ig,
	    /\b(T)(was)\b/ig,
	    /\b(Wan)(na)\b/ig];

	var contractions3 = [
	    /\b(Whad)(dd)(ya)\b/ig,
	    /\b(Wha)(t)(cha)\b/ig
	];

	var TreebankWordTokenizer = function() {
	};

	util.inherits(TreebankWordTokenizer, Tokenizer);

	TreebankWordTokenizer.prototype.tokenize = function(text) {
	    contractions2.forEach(function(regexp) {
		text = text.replace(regexp,"$1 $2");
	    });
	    
	    contractions3.forEach(function(regexp) {
		text = text.replace(regexp,"$1 $2 $3");
	    });

	    // most punctuation
	    text = text.replace(/([^\w\.\'\-\/\+\<\>,&])/g, " $1 ");

	    // commas if followed by space
	    text = text.replace(/(,\s)/g, " $1");

	    // single quotes if followed by a space
	    text = text.replace(/('\s)/g, " $1");

	    // periods before newline or end of string
	    text = text.replace(/\. *(\n|$)/g, " . ");
	    
	    return  _.without(text.split(/\s+/), '');	
	};

	module.exports = TreebankWordTokenizer;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Tokenizer = __webpack_require__(9),
	    util = __webpack_require__(10);

	var SentenceTokenizer = function() {
	    Tokenizer.call(this);
	};
	util.inherits(SentenceTokenizer, Tokenizer);

	SentenceTokenizer.prototype.tokenize = function(text) {
	    // break string up in to sentences based on punctation and quotation marks
	    var tokens = text.match(/([\"\'\‘\“\'\"\[\(\{\⟨][^\.\?\!]+[\.\?\!][\"\'\’\”\'\"\]\)\}\⟩]|[^\.\?\!]+[\.\?\!])\s?/g);

	    // remove unecessary white space
	    tokens = tokens.map(Function.prototype.call, String.prototype.trim);

	    return this.trim(tokens);
	};

	module.exports = SentenceTokenizer;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(10),
	    Classifier = __webpack_require__(66),
	    ApparatusBayesClassifier = __webpack_require__(69).BayesClassifier;

	var BayesClassifier = function(stemmer, smoothing) {
	    var abc = new ApparatusBayesClassifier();
	    if (smoothing && isFinite(smoothing)) {
	        abc = new ApparatusBayesClassifier(smoothing);
	    }
	    Classifier.call(this, abc, stemmer);
	};

	util.inherits(BayesClassifier, Classifier);

	function restore(classifier, stemmer) {
	    classifier = Classifier.restore(classifier, stemmer);
	    classifier.__proto__ = BayesClassifier.prototype;
	    classifier.classifier = ApparatusBayesClassifier.restore(classifier.classifier);

	    return classifier;
	}

	function load(filename, stemmer, callback) {
	    Classifier.load(filename, function(err, classifier) {
	        if (err) {
	            callback(err);
	        }
	        else {
	            callback(err, restore(classifier, stemmer));
	        }
	    });
	}

	BayesClassifier.restore = restore;
	BayesClassifier.load = load;

	module.exports = BayesClassifier;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var PorterStemmer = __webpack_require__(17),
	util = __webpack_require__(10),
	events = __webpack_require__(67);

	var Classifier = function(classifier, stemmer) {
	    this.classifier = classifier;
	    this.docs = [];
	    this.features = {};
	    this.stemmer = stemmer || PorterStemmer;
	    this.lastAdded = 0;
	    this.events = new events.EventEmitter();
	};

	function addDocument(text, classification) {
	    if(typeof text === 'string')
		text = this.stemmer.tokenizeAndStem(text);

	    if(text.length === 0) {
	        // ignore empty documents
	        return;
	    }

	    this.docs.push({
		label: classification,
		text: text
	    });

	    for (var i = 0; i < text.length; i++) {
	        var token = text[i];
	        this.features[token] = (this.features[token] || 0) + 1;
	    }
	}

	function removeDocument(text, classification) {
	  var docs = this.docs
	    , doc
	    , pos;

	  if (typeof text === 'string') {
	    text = this.stemmer.tokenizeAndStem(text);
	  }

	  for (var i = 0, ii = docs.length; i < ii; i++) {
	    doc = docs[i];
	    if (doc.text.join(' ') == text.join(' ') &&
	        doc.label == classification) {
	      pos = i;
	    }
	  }

	  // Remove if there's a match
	  if (!isNaN(pos)) {
	    this.docs.splice(pos, 1);

	    for (var i = 0, ii = text.length; i < ii; i++) {
	      delete this.features[text[i]];
	    }
	  }
	}

	function textToFeatures(observation) {
	    var features = [];

	    if(typeof observation === 'string')
		observation = this.stemmer.tokenizeAndStem(observation);

	    for(var feature in this.features) {
	        if(observation.indexOf(feature) > -1)
	            features.push(1);
	        else
	            features.push(0);
	    }

	    return features;
	}

	function train() {
	    var totalDocs = this.docs.length;
	    for(var i = this.lastAdded; i < totalDocs; i++) {
	        var features = this.textToFeatures(this.docs[i].text);
	        this.classifier.addExample(features, this.docs[i].label);
	        this.events.emit('trainedWithDocument', {index: i, total: totalDocs, doc: this.docs[i]});
	        this.lastAdded++;
	    }
	    this.events.emit('doneTraining', true);
	    this.classifier.train();
	}

	function retrain() {
	  this.classifier = new (this.classifier.constructor)();
	  this.lastAdded = 0;
	  this.train();
	}

	function getClassifications(observation) {
	    return this.classifier.getClassifications(this.textToFeatures(observation));
	}

	function classify(observation) {
	    return this.classifier.classify(this.textToFeatures(observation));
	}

	function restore(classifier, stemmer) {
	    classifier.stemmer = stemmer || PorterStemmer;
	    classifier.events = new events.EventEmitter();
	    return classifier;
	}

	function save(filename, callback) {
	    var data = JSON.stringify(this);
	    var fs = __webpack_require__(68);
	    var classifier = this;
	    fs.writeFile(filename, data, 'utf8', function(err) {
	        if(callback) {
	            callback(err, err ? null : classifier);
	        }
	    });
	}

	function load(filename, callback) {
	    var fs = __webpack_require__(68);

	    fs.readFile(filename, 'utf8', function(err, data) {
	        var classifier;
	          
	        if(!err) {
	            classifier = JSON.parse(data);
	        }

	        if(callback)
	            callback(err, classifier);
	    });
	}

	Classifier.prototype.addDocument = addDocument;
	Classifier.prototype.removeDocument = removeDocument;
	Classifier.prototype.train = train;
	Classifier.prototype.retrain = retrain;
	Classifier.prototype.classify = classify;
	Classifier.prototype.textToFeatures = textToFeatures;
	Classifier.prototype.save = save;
	Classifier.prototype.getClassifications = getClassifications;
	Classifier.restore = restore;
	Classifier.load = load;

	module.exports = Classifier;


/***/ },
/* 67 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 68 */
/***/ function(module, exports) {

	

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	
	exports.BayesClassifier = __webpack_require__(70);
	exports.LogisticRegressionClassifier = __webpack_require__(72);
	exports.KMeans = __webpack_require__(80);


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(10),
	Classifier = __webpack_require__(71);

	var BayesClassifier = function(smoothing) {
	    Classifier.call(this);
	    this.classFeatures = {};
	    this.classTotals = {};
	    this.totalExamples = 1; // start at one to smooth
	    this.smoothing = smoothing === undefined ? 1.0 : smoothing;
	};

	util.inherits(BayesClassifier, Classifier);

	function addExample(observation, label) {
	    if(!this.classFeatures[label]) {
	        this.classFeatures[label] = {};
	        this.classTotals[label] = 1; // give an extra for smoothing
	    }

	    if(observation instanceof Array) {
	        var i = observation.length;
	        this.totalExamples++;
	        this.classTotals[label]++;

	        while(i--) {
	            if(observation[i]) {
	                if(this.classFeatures[label][i]) {
	                    this.classFeatures[label][i]++;
	                } else {
	                    // give an extra for smoothing
	                    this.classFeatures[label][i] = 1 + this.smoothing;
	                }
	            }
	        }
	    } else {
	        // sparse observation
	        for(var key in observation){
	            value = observation[key];

	            if(this.classFeatures[label][value]) {
	               this.classFeatures[label][value]++;
	            } else {
	                // give an extra for smoothing
	               this.classFeatures[label][value] = 1 + this.smoothing;
	            }
	        }
	    }
	}

	function train() {

	}

	function probabilityOfClass(observation, label) {
	    var prob = 0;

	    if(observation instanceof Array){
	        var i = observation.length;

	        while(i--) {
	            if(observation[i]) {
	                var count = this.classFeatures[label][i] || this.smoothing;
	                // numbers are tiny, add logs rather than take product
	                prob += Math.log(count / this.classTotals[label]);
	            }
	        }
	    } else {
	        // sparse observation
	        for(var key in observation){
	            var count = this.classFeatures[label][observation[key]] || this.smoothing;
	            // numbers are tiny, add logs rather than take product
	            prob += Math.log(count / this.classTotals[label]);
	        }
	    }

	    // p(C) * unlogging the above calculation P(X|C)
	    prob = (this.classTotals[label] / this.totalExamples) * Math.exp(prob);

	    return prob;
	}

	function getClassifications(observation) {
	    var classifier = this;
	    var labels = [];

	    for(var className in this.classFeatures) {
	        labels.push({label: className,
	        value: classifier.probabilityOfClass(observation, className)});
	    }

	    return labels.sort(function(x, y) {
	        return y.value - x.value;
	    });
	}

	function restore(classifier) {
	     classifier = Classifier.restore(classifier);
	     classifier.__proto__ = BayesClassifier.prototype;

	     return classifier;
	}

	BayesClassifier.prototype.addExample = addExample;
	BayesClassifier.prototype.train = train;
	BayesClassifier.prototype.getClassifications = getClassifications;
	BayesClassifier.prototype.probabilityOfClass = probabilityOfClass;

	BayesClassifier.restore = restore;

	module.exports = BayesClassifier;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function Classifier() {
	}

	function restore(classifier) {
	    classifier = typeof classifier == 'string' ?  JSON.parse(classifier) : classifier;

	    return classifier;
	}

	function addExample(observation, classification) {
	    throw 'Not implemented';
	}

	function classify(observation) {
		var classifications = this.getClassifications(observation);
		if(!classifications || classifications.length === 0) {
			throw "Not Trained";
		} 
	    return this.getClassifications(observation)[0].label;
	}

	function train() {
	    throw 'Not implemented';
	}

	Classifier.prototype.addExample = addExample;
	Classifier.prototype.train = train;
	Classifier.prototype.classify = classify;

	Classifier.restore = restore;

	module.exports = Classifier;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(10),
	     Classifier = __webpack_require__(71);

	var sylvester = __webpack_require__(73),
	Matrix = sylvester.Matrix,
	Vector = sylvester.Vector;

	function sigmoid(z) {
	    return 1 / (1 + Math.exp(0 - z));
	}

	function hypothesis(theta, Observations) {
	    return Observations.x(theta).map(sigmoid);
	}

	function cost(theta, Examples, classifications) {
	    var hypothesisResult = hypothesis(theta, Examples);

	    var ones = Vector.One(Examples.rows());
	    var cost_1 = Vector.Zero(Examples.rows()).subtract(classifications).elementMultiply(hypothesisResult.log());
	    var cost_0 = ones.subtract(classifications).elementMultiply(ones.subtract(hypothesisResult).log());

	    return (1 / Examples.rows()) * cost_1.subtract(cost_0).sum();
	}

	function descendGradient(theta, Examples, classifications) {
	    var maxIt = 500 * Examples.rows();
	    var last;
	    var current;
	    var learningRate = 3;
	    var learningRateFound = false;

	    Examples = Matrix.One(Examples.rows(), 1).augment(Examples);
	    theta = theta.augment([0]);

	    while(!learningRateFound) {
	        var i = 0;
	        last = null;

	        while(true) {
	            var hypothesisResult = hypothesis(theta, Examples);
	            theta = theta.subtract(Examples.transpose().x(
	            hypothesisResult.subtract(classifications)).x(1 / Examples.rows()).x(learningRate));
	            current = cost(theta, Examples, classifications);

	            i++;

	            if(last) {
	            if(current < last)
	                learningRateFound = true;
	            else
	                break;

	            if(last - current < 0.0001)
	                break;
	            }

	            if(i >= maxIt) {
	                throw 'unable to find minimum';
	            }

	            last = current;
	        }

	        learningRate /= 3;
	    }

	    return theta.chomp(1);
	}

	var LogisticRegressionClassifier = function() {
	    Classifier.call(this);
	    this.examples = {};
	    this.features = [];
	    this.featurePositions = {};
	    this.maxFeaturePosition = 0;
	    this.classifications = [];
	    this.exampleCount = 0;
	};

	util.inherits(LogisticRegressionClassifier, Classifier);

	function createClassifications() {
	    var classifications = [];

	    for(var i = 0; i < this.exampleCount; i++) {
	        var classification = [];

	        for(var _ in this.examples) {
	            classification.push(0);
	        }

	       classifications.push(classification);
	    }

	    return classifications;
	}

	function computeThetas(Examples, Classifications) {
	    this.theta = [];

	    // each class will have it's own theta.
	    var zero = function() { return 0; };
	    for(var i = 1; i <= this.classifications.length; i++) {
	        var theta = Examples.row(1).map(zero);
	        this.theta.push(descendGradient(theta, Examples, Classifications.column(i)));
	    }
	}

	function train() {
	    var examples = [];
	    var classifications = this.createClassifications();
	    var d = 0, c = 0;

	    for(var classification in this.examples) {
	        for(var i = 0; i < this.examples[classification].length; i++) {
	            var doc = this.examples[classification][i];
	            var example = doc;

	            examples.push(example);
	            classifications[d][c] = 1;
	            d++;
	        }

	        c++;
	    }

	    this.computeThetas($M(examples), $M(classifications));
	}

	function addExample(data, classification) {
	    if(!this.examples[classification]) {
		this.examples[classification] = [];
		this.classifications.push(classification);
	    }

	    this.examples[classification].push(data);
	    this.exampleCount++;
	}

	function getClassifications(observation) {
	    observation = $V(observation);
	    var classifications = [];

	    for(var i = 0; i < this.theta.length; i++) {
	        classifications.push({label: this.classifications[i], value: sigmoid(observation.dot(this.theta[i])) });
	    }

	    return classifications.sort(function(x, y) {
	        return y.value - x.value;
	    });
	}

	function restore(classifier) {
	    classifier = Classifier.restore(classifier);
	    classifier.__proto__ = LogisticRegressionClassifier.prototype;

	    return classifier;
	}

	LogisticRegressionClassifier.prototype.addExample = addExample;
	LogisticRegressionClassifier.prototype.restore = restore;
	LogisticRegressionClassifier.prototype.train = train;
	LogisticRegressionClassifier.prototype.createClassifications = createClassifications;
	LogisticRegressionClassifier.prototype.computeThetas = computeThetas;
	LogisticRegressionClassifier.prototype.getClassifications = getClassifications;

	LogisticRegressionClassifier.restore = restore;

	module.exports = LogisticRegressionClassifier;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// Copyright (c) 2011, Chris Umbel

	exports.Vector = __webpack_require__(74);
	global.$V = exports.Vector.create;
	exports.Matrix = __webpack_require__(76);
	global.$M = exports.Matrix.create;
	exports.Line = __webpack_require__(77);
	global.$L = exports.Line.create;
	exports.Plane = __webpack_require__(78);
	global.$P = exports.Plane.create;
	exports.Line.Segment = __webpack_require__(79);
	exports.Sylvester = __webpack_require__(75);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// This file is required in order for any other classes to work. Some Vector methods work with the
	// other Sylvester classes and are useless unless they are included. Other classes such as Line and
	// Plane will not function at all without Vector being loaded first.

	var Sylvester = __webpack_require__(75),
	Matrix = __webpack_require__(76);

	function Vector() {}
	Vector.prototype = {

	    norm: function() {
		var n = this.elements.length;
		var sum = 0;

		while (n--) {
		    sum += Math.pow(this.elements[n], 2);
		}

		return Math.sqrt(sum);
	    },

	    // Returns element i of the vector
	    e: function(i) {
	      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
	    },

	    // Returns the number of rows/columns the vector has
	    dimensions: function() {
	      return {rows: 1, cols: this.elements.length};
	    },

	    // Returns the number of rows in the vector
	    rows: function() {
	      return 1;
	    },

	    // Returns the number of columns in the vector
	    cols: function() {
	      return this.elements.length;
	    },

	    // Returns the modulus ('length') of the vector
	    modulus: function() {
	      return Math.sqrt(this.dot(this));
	    },

	    // Returns true iff the vector is equal to the argument
	    eql: function(vector) {
	    	var n = this.elements.length;
	    	var V = vector.elements || vector;
	    	if (n != V.length) { return false; }
	    	while (n--) {
	    	    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }
	    	}
	    	return true;
	    },

	    // Returns a copy of the vector
	    dup: function() {
		    return Vector.create(this.elements);
	    },

	    // Maps the vector to another vector according to the given function
	    map: function(fn) {
		var elements = [];
		this.each(function(x, i) {
		    elements.push(fn(x, i));
		});
		return Vector.create(elements);
	    },

	    // Calls the iterator for each element of the vector in turn
	    each: function(fn) {
		var n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    fn(this.elements[i], i + 1);
		}
	    },

	    // Returns a new vector created by normalizing the receiver
	    toUnitVector: function() {
		var r = this.modulus();
		if (r === 0) { return this.dup(); }
		return this.map(function(x) { return x / r; });
	    },

	    // Returns the angle between the vector and the argument (also a vector)
	    angleFrom: function(vector) {
		var V = vector.elements || vector;
		var n = this.elements.length, k = n, i;
		if (n != V.length) { return null; }
		var dot = 0, mod1 = 0, mod2 = 0;
		// Work things out in parallel to save time
		this.each(function(x, i) {
		    dot += x * V[i - 1];
		    mod1 += x * x;
		    mod2 += V[i - 1] * V[i - 1];
		});
		mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);
		if (mod1 * mod2 === 0) { return null; }
		var theta = dot / (mod1 * mod2);
		if (theta < -1) { theta = -1; }
		if (theta > 1) { theta = 1; }
		return Math.acos(theta);
	    },

	    // Returns true iff the vector is parallel to the argument
	    isParallelTo: function(vector) {
		var angle = this.angleFrom(vector);
		return (angle === null) ? null : (angle <= Sylvester.precision);
	    },

	    // Returns true iff the vector is antiparallel to the argument
	    isAntiparallelTo: function(vector) {
		var angle = this.angleFrom(vector);
		return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
	    },

	    // Returns true iff the vector is perpendicular to the argument
	    isPerpendicularTo: function(vector) {
		var dot = this.dot(vector);
		return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
	    },

	    // Returns the result of adding the argument to the vector
	    add: function(value) {
		var V = value.elements || value;

		if (this.elements.length != V.length) 
		    return this.map(function(v) { return v + value });
		else
		    return this.map(function(x, i) { return x + V[i - 1]; });
	    },

	    // Returns the result of subtracting the argument from the vector
	    subtract: function(v) {
		if (typeof(v) == 'number')
		    return this.map(function(k) { return k - v; });

		var V = v.elements || v;
		if (this.elements.length != V.length) { return null; }
		return this.map(function(x, i) { return x - V[i - 1]; });
	    },

	    // Returns the result of multiplying the elements of the vector by the argument
	    multiply: function(k) {
		return this.map(function(x) { return x * k; });
	    },

	    elementMultiply: function(v) {
		return this.map(function(k, i) {
		    return v.e(i) * k;
		});
	    },

	    sum: function() {
		var sum = 0;
		this.map(function(x) { sum += x;});
		return sum;
	    },

	    chomp: function(n) {
		var elements = [];

		for (var i = n; i < this.elements.length; i++) {
		    elements.push(this.elements[i]);
		}

		return Vector.create(elements);
	    },

	    top: function(n) {
		var elements = [];

		for (var i = 0; i < n; i++) {
		    elements.push(this.elements[i]);
		}

		return Vector.create(elements);
	    },

	    augment: function(elements) {
		var newElements = this.elements;

		for (var i = 0; i < elements.length; i++) {
		    newElements.push(elements[i]);
		}

		return Vector.create(newElements);
	    },

	    x: function(k) { return this.multiply(k); },

	    log: function() {
		return Vector.log(this);
	    },

	    elementDivide: function(vector) {
		return this.map(function(v, i) {
		    return v / vector.e(i);
		});
	    },

	    product: function() {
		var p = 1;

		this.map(function(v) {
		    p *= v;
		});

		return p;
	    },

	    // Returns the scalar product of the vector with the argument
	    // Both vectors must have equal dimensionality
	    dot: function(vector) {
		var V = vector.elements || vector;
		var i, product = 0, n = this.elements.length;	
		if (n != V.length) { return null; }
		while (n--) { product += this.elements[n] * V[n]; }
		return product;
	    },

	    // Returns the vector product of the vector with the argument
	    // Both vectors must have dimensionality 3
	    cross: function(vector) {
		var B = vector.elements || vector;
		if (this.elements.length != 3 || B.length != 3) { return null; }
		var A = this.elements;
		return Vector.create([
		    (A[1] * B[2]) - (A[2] * B[1]),
		    (A[2] * B[0]) - (A[0] * B[2]),
		    (A[0] * B[1]) - (A[1] * B[0])
		]);
	    },

	    // Returns the (absolute) largest element of the vector
	    max: function() {
		var m = 0, i = this.elements.length;
		while (i--) {
		    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }
		}
		return m;
	    },


	    maxIndex: function() {
		var m = 0, i = this.elements.length;
		var maxIndex = -1;

		while (i--) {
		    if (Math.abs(this.elements[i]) > Math.abs(m)) { 
			m = this.elements[i]; 
			maxIndex = i + 1;
		    }
		}

		return maxIndex;
	    },


	    // Returns the index of the first match found
	    indexOf: function(x) {
		var index = null, n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    if (index === null && this.elements[i] == x) {
			index = i + 1;
		    }
		}
		return index;
	    },

	    // Returns a diagonal matrix with the vector's elements as its diagonal elements
	    toDiagonalMatrix: function() {
		return Matrix.Diagonal(this.elements);
	    },

	    // Returns the result of rounding the elements of the vector
	    round: function() {
		return this.map(function(x) { return Math.round(x); });
	    },

	    // Transpose a Vector, return a 1xn Matrix
	    transpose: function() {
		var rows = this.elements.length;
		var elements = [];

		for (var i = 0; i < rows; i++) {
		    elements.push([this.elements[i]]);
		}
		return Matrix.create(elements);
	    },

	    // Returns a copy of the vector with elements set to the given value if they
	    // differ from it by less than Sylvester.precision
	    snapTo: function(x) {
		return this.map(function(y) {
		    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;
		});
	    },

	    // Returns the vector's distance from the argument, when considered as a point in space
	    distanceFrom: function(obj) {
		if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }
		var V = obj.elements || obj;
		if (V.length != this.elements.length) { return null; }
		var sum = 0, part;
		this.each(function(x, i) {
		    part = x - V[i - 1];
		    sum += part * part;
		});
		return Math.sqrt(sum);
	    },

	    // Returns true if the vector is point on the given line
	    liesOn: function(line) {
		return line.contains(this);
	    },

	    // Return true iff the vector is a point in the given plane
	    liesIn: function(plane) {
		return plane.contains(this);
	    },

	    // Rotates the vector about the given object. The object should be a
	    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!
	    rotate: function(t, obj) {
		var V, R = null, x, y, z;
		if (t.determinant) { R = t.elements; }
		switch (this.elements.length) {
		case 2:
	            V = obj.elements || obj;
	            if (V.length != 2) { return null; }
	            if (!R) { R = Matrix.Rotation(t).elements; }
	            x = this.elements[0] - V[0];
	            y = this.elements[1] - V[1];
	            return Vector.create([
			V[0] + R[0][0] * x + R[0][1] * y,
			V[1] + R[1][0] * x + R[1][1] * y
	            ]);
	            break;
		case 3:
	            if (!obj.direction) { return null; }
	            var C = obj.pointClosestTo(this).elements;
	            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }
	            x = this.elements[0] - C[0];
	            y = this.elements[1] - C[1];
	            z = this.elements[2] - C[2];
	            return Vector.create([
			C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,
			C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,
			C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z
	            ]);
	            break;
		default:
	            return null;
		}
	    },

	    // Returns the result of reflecting the point in the given point, line or plane
	    reflectionIn: function(obj) {
		if (obj.anchor) {
		    // obj is a plane or line
		    var P = this.elements.slice();
		    var C = obj.pointClosestTo(P).elements;
		    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);
		} else {
		    // obj is a point
		    var Q = obj.elements || obj;
		    if (this.elements.length != Q.length) { return null; }
		    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });
		}
	    },

	    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added
	    to3D: function() {
		var V = this.dup();
		switch (V.elements.length) {
		case 3: break;
		case 2: V.elements.push(0); break;
		default: return null;
		}
		return V;
	    },

	    // Returns a string representation of the vector
	    inspect: function() {
		return '[' + this.elements.join(', ') + ']';
	    },

	    // Set vector's elements from an array
	    setElements: function(els) {
		this.elements = (els.elements || els).slice();
		return this;
	    }
	};

	// Constructor function
	Vector.create = function(elements) {
	    var V = new Vector();
	    return V.setElements(elements);
	};

	// i, j, k unit vectors
	Vector.i = Vector.create([1, 0, 0]);
	Vector.j = Vector.create([0, 1, 0]);
	Vector.k = Vector.create([0, 0, 1]);

	// Random vector of size n
	Vector.Random = function(n) {
	    var elements = [];
	    while (n--) { elements.push(Math.random()); }
	    return Vector.create(elements);
	};

	Vector.Fill = function(n, v) {
	    var elements = [];
	    while (n--) { elements.push(v); }
	    return Vector.create(elements);
	};

	// Vector filled with zeros
	Vector.Zero = function(n) {
	    return Vector.Fill(n, 0);
	};

	Vector.One = function(n) {
	    return Vector.Fill(n, 1);
	};

	Vector.log = function(v) {
	    return v.map(function(x) {
		return Math.log(x);
	    });
	};

	module.exports = Vector;


/***/ },
/* 75 */
/***/ function(module, exports) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// This file is required in order for any other classes to work. Some Vector methods work with the
	// other Sylvester classes and are useless unless they are included. Other classes such as Line and
	// Plane will not function at all without Vector being loaded first.           

	Math.sign = function(x) {
	    return x < 0 ? -1: 1;
	}
	                                              
	var Sylvester = {
	    precision: 1e-6,
	    approxPrecision: 1e-5
	};

	module.exports = Sylvester;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Matrix class - depends on Vector.

	var fs = __webpack_require__(68);
	var Sylvester = __webpack_require__(75);
	var Vector = __webpack_require__(74);

	// augment a matrix M with identity rows/cols
	function identSize(M, m, n, k) {
	    var e = M.elements;
	    var i = k - 1;

	    while(i--) {
		var row = [];
		
		for(var j = 0; j < n; j++)
		    row.push(j == i ? 1 : 0);
		
	        e.unshift(row);
	    }
	    
	    for(var i = k - 1; i < m; i++) {
	        while(e[i].length < n)
	            e[i].unshift(0);
	    }

	    return $M(e);
	}

	function pca(X) {
	    var Sigma = X.transpose().x(X).x(1 / X.rows());
	    var svd = Sigma.svd();
	    return {U: svd.U, S: svd.S};
	}

	// singular value decomposition in pure javascript
	function svdJs() {
	    var A = this;
	    var V = Matrix.I(A.rows());
	    var S = A.transpose();
	    var U = Matrix.I(A.cols());
	    var err = Number.MAX_VALUE;
	    var i = 0;
	    var maxLoop = 100;

	    while(err > 2.2737e-13 && i < maxLoop) {
	        var qr = S.transpose().qrJs();
	        S = qr.R;
	        V = V.x(qr.Q);
	        qr = S.transpose().qrJs();
	        U = U.x(qr.Q);
	        S = qr.R;

	        var e = S.triu(1).unroll().norm();
	        var f = S.diagonal().norm();

	        if(f == 0)
	            f = 1;

	        err = e / f;

	        i++;
	    }

	    var ss = S.diagonal();
	    var s = [];

	    for(var i = 1; i <= ss.cols(); i++) {
	        var ssn = ss.e(i);
	        s.push(Math.abs(ssn));

	        if(ssn < 0) {
	            for(var j = 0; j < U.rows(); j++) {
	                V.elements[j][i - 1] = -(V.elements[j][i - 1]);
	            }
	        }
	    }

	    return {U: U, S: $V(s).toDiagonalMatrix(), V: V};
	}

	// singular value decomposition using LAPACK
	function svdPack() {
	    var result = lapack.sgesvd('A', 'A', this.elements);

	    return {
	        U: $M(result.U),
	        S: $M(result.S).column(1).toDiagonalMatrix(),
		V: $M(result.VT).transpose()
	    };
	}

	// QR decomposition in pure javascript
	function qrJs() {
	    var m = this.rows();
	    var n = this.cols();
	    var Q = Matrix.I(m);
	    var A = this;
	    
	    for(var k = 1; k < Math.min(m, n); k++) {
		var ak = A.slice(k, 0, k, k).col(1);
		var oneZero = [1];
		
		while(oneZero.length <=  m - k)
		    oneZero.push(0);
		
		oneZero = $V(oneZero);
		var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));
		var Vk = $M(vk);
		var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));
		var Qk = identSize(Hk, m, n, k);
		A = Qk.x(A);
		// slow way to compute Q
		Q = Q.x(Qk);
	    }
	    
	    return {Q: Q, R: A};
	}

	// QR decomposition using LAPACK
	function qrPack() {
	    var qr = lapack.qr(this.elements);

	    return {
		Q: $M(qr.Q),
		R: $M(qr.R)
	    };
	}

	function Matrix() {}
	Matrix.prototype = {
	    // solve a system of linear equations (work in progress)
	    solve: function(b) {
		var lu = this.lu();
		b = lu.P.x(b);
		var y = lu.L.forwardSubstitute(b);
		var x = lu.U.backSubstitute(y);
		return lu.P.x(x);
		//return this.inv().x(b);
	    },

	    // project a matrix onto a lower dim
	    pcaProject: function(k, U) {
		var U = U || pca(this).U;
		var Ureduce= U.slice(1, U.rows(), 1, k);
		return {Z: this.x(Ureduce), U: U};
	    },

	    // recover a matrix to a higher dimension
	    pcaRecover: function(U) {
		var k = this.cols();
		var Ureduce = U.slice(1, U.rows(), 1, k);
		return this.x(Ureduce.transpose());
	    },    

	    // grab the upper triangular part of the matrix
	    triu: function(k) {
		if(!k)
		    k = 0;
		
		return this.map(function(x, i, j) {
		    return j - i >= k ? x : 0;
		});
	    },

	    // unroll a matrix into a vector
	    unroll: function() {
		var v = [];
		
		for(var i = 1; i <= this.cols(); i++) {
		    for(var j = 1; j <= this.rows(); j++) {
			v.push(this.e(j, i));
		    }
		}

		return $V(v);
	    },

	    // return a sub-block of the matrix
	    slice: function(startRow, endRow, startCol, endCol) {
		var x = [];
		
		if(endRow == 0)
		    endRow = this.rows();
		
		if(endCol == 0)
		    endCol = this.cols();

		for(i = startRow; i <= endRow; i++) {
		    var row = [];

		    for(j = startCol; j <= endCol; j++) {
			row.push(this.e(i, j));
		    }

		    x.push(row);
		}

		return $M(x);
	    },

	    // Returns element (i,j) of the matrix
	    e: function(i,j) {
		if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
		return this.elements[i - 1][j - 1];
	    },

	    // Returns row k of the matrix as a vector
	    row: function(i) {
		if (i > this.elements.length) { return null; }
		return $V(this.elements[i - 1]);
	    },

	    // Returns column k of the matrix as a vector
	    col: function(j) {
		if (j > this.elements[0].length) { return null; }
		var col = [], n = this.elements.length;
		for (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }
		return $V(col);
	    },

	    // Returns the number of rows/columns the matrix has
	    dimensions: function() {
		return {rows: this.elements.length, cols: this.elements[0].length};
	    },

	    // Returns the number of rows in the matrix
	    rows: function() {
		return this.elements.length;
	    },

	    // Returns the number of columns in the matrix
	    cols: function() {
		return this.elements[0].length;
	    },

	    approxEql: function(matrix) {
		return this.eql(matrix, Sylvester.approxPrecision);
	    },

	    // Returns true iff the matrix is equal to the argument. You can supply
	    // a vector as the argument, in which case the receiver must be a
	    // one-column matrix equal to the vector.
	    eql: function(matrix, precision) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		if (this.elements.length != M.length ||
	            this.elements[0].length != M[0].length) { return false; }
		var i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) { j = nj;
			      while (j--) {
				  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) { return false; }
			      }
			    }
		return true;
	    },

	    // Returns a copy of the matrix
	    dup: function() {
		return Matrix.create(this.elements);
	    },

	    // Maps the matrix to another matrix (of the same dimensions) according to the given function
	    map: function(fn) {
	    var els = [], i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) { j = nj;
			      els[i] = [];
			      while (j--) {
				  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);
			      }
			    }
		return Matrix.create(els);
	    },

	    // Returns true iff the argument has the same dimensions as the matrix
	    isSameSizeAs: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		return (this.elements.length == M.length &&
			this.elements[0].length == M[0].length);
	    },

	    // Returns the result of adding the argument to the matrix
	    add: function(matrix) {
		if(typeof(matrix) == 'number') {
		    return this.map(function(x, i, j) { return x + matrix});
		} else {
		    var M = matrix.elements || matrix;
		    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		    if (!this.isSameSizeAs(M)) { return null; }
		    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });
		}
	    },

	    // Returns the result of subtracting the argument from the matrix
	    subtract: function(matrix) {
		if(typeof(matrix) == 'number') {
		    return this.map(function(x, i, j) { return x - matrix});
		} else {
		    var M = matrix.elements || matrix;
		    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		    if (!this.isSameSizeAs(M)) { return null; }
		    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });
		}
	    },

	    // Returns true iff the matrix can multiply the argument from the left
	    canMultiplyFromLeft: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		// this.columns should equal matrix.rows
		return (this.elements[0].length == M.length);
	    },

	    // Returns the result of a multiplication-style operation the matrix from the right by the argument.
	    // If the argument is a scalar then just operate on all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    mulOp: function(matrix, op) {
		if (!matrix.elements) {
		    return this.map(function(x) { return op(x, matrix); });
		}

		var returnVector = matrix.modulus ? true : false;
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') 
		    M = Matrix.create(M).elements;
		if (!this.canMultiplyFromLeft(M)) 
		    return null; 
		var e = this.elements, rowThis, rowElem, elements = [],
	        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;

		while (i--) {
	            rowElem = [];
	            rowThis = e[i];
	            j = n;

	            while (j--) {
			sum = 0;
			k = o;

			while (k--) {
	                    sum += op(rowThis[k], M[k][j]);
			}

			rowElem[j] = sum;
	            }

	            elements[i] = rowElem;
		}

		var M = Matrix.create(elements);
		return returnVector ? M.col(1) : M;
	    },

	    // Returns the result of dividing the matrix from the right by the argument.
	    // If the argument is a scalar then just divide all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    div: function(matrix) {
		return this.mulOp(matrix, function(x, y) { return x / y});
	    },

	    // Returns the result of multiplying the matrix from the right by the argument.
	    // If the argument is a scalar then just multiply all the elements. If the argument is
	    // a vector, a vector is returned, which saves you having to remember calling
	    // col(1) on the result.
	    multiply: function(matrix) {
		return this.mulOp(matrix, function(x, y) { return x * y});
	    },

	    x: function(matrix) { return this.multiply(matrix); },

	    elementMultiply: function(v) {
	        return this.map(function(k, i, j) {
	            return v.e(i, j) * k;
	        });
	    },

	    // sum all elements in the matrix
	    sum: function() {
	        var sum = 0;

	        this.map(function(x) { sum += x;});

	        return sum;
	    },

	    // Returns a Vector of each colum averaged.
	    mean: function() {
	      var dim = this.dimensions();
	      var r = [];
	      for (var i = 1; i <= dim.cols; i++) {
	        r.push(this.col(i).sum() / dim.rows);
	      }
	      return $V(r);
	    },

	    column: function(n) {
		return this.col(n);
	    },

	    // element-wise log
	    log: function() {
		return this.map(function(x) { return Math.log(x); });
	    },

	    // Returns a submatrix taken from the matrix
	    // Argument order is: start row, start col, nrows, ncols
	    // Element selection wraps if the required index is outside the matrix's bounds, so you could
	    // use this to perform row/column cycling or copy-augmenting.
	    minor: function(a, b, c, d) {
		var elements = [], ni = c, i, nj, j;
		var rows = this.elements.length, cols = this.elements[0].length;
		while (ni--) {
		    i = c - ni - 1;
		    elements[i] = [];
		    nj = d;
		    while (nj--) {
			j = d - nj - 1;
			elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];
		    }
		}
		return Matrix.create(elements);
	    },

	    // Returns the transpose of the matrix
	    transpose: function() {
	    var rows = this.elements.length, i, cols = this.elements[0].length, j;
		var elements = [], i = cols;
		while (i--) {
		    j = rows;
		    elements[i] = [];
		    while (j--) {
			elements[i][j] = this.elements[j][i];
		    }
		}
		return Matrix.create(elements);
	    },

	    // Returns true iff the matrix is square
	    isSquare: function() {
		return (this.elements.length == this.elements[0].length);
	    },

	    // Returns the (absolute) largest element of the matrix
	    max: function() {
		var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) {
		    j = nj;
		    while (j--) {
			if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
		    }
		}
		return m;
	    },

	    // Returns the indeces of the first match found by reading row-by-row from left to right
	    indexOf: function(x) {
		var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;
		for (i = 0; i < ni; i++) {
		    for (j = 0; j < nj; j++) {
			if (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }
		    }
		}
		return null;
	    },

	    // If the matrix is square, returns the diagonal elements as a vector.
	    // Otherwise, returns null.
	    diagonal: function() {
		if (!this.isSquare) { return null; }
		var els = [], n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    els.push(this.elements[i][i]);
		}
		return $V(els);
	    },

	    // Make the matrix upper (right) triangular by Gaussian elimination.
	    // This method only adds multiples of rows to other rows. No rows are
	    // scaled up or switched, and the determinant is preserved.
	    toRightTriangular: function() {
		var M = this.dup(), els;
		var n = this.elements.length, i, j, np = this.elements[0].length, p;
		for (i = 0; i < n; i++) {
		    if (M.elements[i][i] == 0) {
			for (j = i + 1; j < n; j++) {
			    if (M.elements[j][i] != 0) {
				els = [];
				for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }
				M.elements[i] = els;
				break;
			    }
			}
		    }
		    if (M.elements[i][i] != 0) {
			for (j = i + 1; j < n; j++) {
			    var multiplier = M.elements[j][i] / M.elements[i][i];
			    els = [];
			    for (p = 0; p < np; p++) {
				// Elements with column numbers up to an including the number
				// of the row that we're subtracting can safely be set straight to
				// zero, since that's the point of this routine and it avoids having
				// to loop over and correct rounding errors later
				els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
			    }
			    M.elements[j] = els;
			}
		    }
		}
		return M;
	    },

	    toUpperTriangular: function() { return this.toRightTriangular(); },

	    // Returns the determinant for square matrices
	    determinant: function() {
		if (!this.isSquare()) { return null; }
		if (this.cols == 1 && this.rows == 1) { return this.row(1); }
		if (this.cols == 0 && this.rows == 0) { return 1; }
		var M = this.toRightTriangular();
		var det = M.elements[0][0], n = M.elements.length;
		for (var i = 1; i < n; i++) {
		    det = det * M.elements[i][i];
		}
		return det;
	    },
	    det: function() { return this.determinant(); },

	    // Returns true iff the matrix is singular
	    isSingular: function() {
		return (this.isSquare() && this.determinant() === 0);
	    },

	    // Returns the trace for square matrices
	    trace: function() {
		if (!this.isSquare()) { return null; }
		var tr = this.elements[0][0], n = this.elements.length;
		for (var i = 1; i < n; i++) {
		    tr += this.elements[i][i];
		}
		return tr;
	    },

	    tr: function() { return this.trace(); },

	    // Returns the rank of the matrix
	    rank: function() {
		var M = this.toRightTriangular(), rank = 0;
		var i = this.elements.length, nj = this.elements[0].length, j;
		while (i--) {
		    j = nj;
		    while (j--) {
			if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }
		    }
		}
		return rank;
	    },

	    rk: function() { return this.rank(); },

	    // Returns the result of attaching the given argument to the right-hand side of the matrix
	    augment: function(matrix) {
		var M = matrix.elements || matrix;
		if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
		var T = this.dup(), cols = T.elements[0].length;
		var i = T.elements.length, nj = M[0].length, j;
		if (i != M.length) { return null; }
		while (i--) {
		    j = nj;
		    while (j--) {
			T.elements[i][cols + j] = M[i][j];
		    }
		}
		return T;
	    },

	    // Returns the inverse (if one exists) using Gauss-Jordan
	    inverse: function() {
		if (!this.isSquare() || this.isSingular()) { return null; }
		var n = this.elements.length, i = n, j;
		var M = this.augment(Matrix.I(n)).toRightTriangular();
		var np = M.elements[0].length, p, els, divisor;
		var inverse_elements = [], new_element;
		// Matrix is non-singular so there will be no zeros on the diagonal
		// Cycle through rows from last to first
		while (i--) {
		    // First, normalise diagonal elements to 1
		    els = [];
		    inverse_elements[i] = [];
		    divisor = M.elements[i][i];
		    for (p = 0; p < np; p++) {
	        new_element = M.elements[i][p] / divisor;
			els.push(new_element);
			// Shuffle off the current row of the right hand side into the results
			// array as it will not be modified by later runs through this loop
			if (p >= n) { inverse_elements[i].push(new_element); }
		    }
		    M.elements[i] = els;
		    // Then, subtract this row from those above it to
		    // give the identity matrix on the left hand side
		    j = i;
		    while (j--) {
			els = [];
			for (p = 0; p < np; p++) {
			    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
			}
			M.elements[j] = els;
		    }
		}
		return Matrix.create(inverse_elements);
	    },

	    inv: function() { return this.inverse(); },

	    // Returns the result of rounding all the elements
	    round: function() {
		return this.map(function(x) { return Math.round(x); });
	    },

	    // Returns a copy of the matrix with elements set to the given value if they
	    // differ from it by less than Sylvester.precision
	    snapTo: function(x) {
		return this.map(function(p) {
		    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;
		});
	    },

	    // Returns a string representation of the matrix
	    inspect: function() {
		var matrix_rows = [];
		var n = this.elements.length;
		for (var i = 0; i < n; i++) {
		    matrix_rows.push($V(this.elements[i]).inspect());
		}
		return matrix_rows.join('\n');
	    },

	    // Returns a array representation of the matrix
	    toArray: function() {
	    	var matrix_rows = [];
	    	var n = this.elements.length;
	    	for (var i = 0; i < n; i++) {
	        matrix_rows.push(this.elements[i]);
	    	}
	      return matrix_rows;
	    },


	    // Set the matrix's elements from an array. If the argument passed
	    // is a vector, the resulting matrix will be a single column.
	    setElements: function(els) {
		var i, j, elements = els.elements || els;
		if (typeof(elements[0][0]) != 'undefined') {
		    i = elements.length;
		    this.elements = [];
		    while (i--) {
			j = elements[i].length;
			this.elements[i] = [];
			while (j--) {
			    this.elements[i][j] = elements[i][j];
			}
		    }
		    return this;
		}
		var n = elements.length;
		this.elements = [];
		for (i = 0; i < n; i++) {
		    this.elements.push([elements[i]]);
		}
		return this;
	    },

	    // return the indexes of the columns with the largest value
	    // for each row
	    maxColumnIndexes: function() {
		var maxes = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var max = null;
		    var maxIndex = -1;

		    for(var j = 1; j <= this.cols(); j++) {
			if(max === null || this.e(i, j) > max) {
			    max = this.e(i, j);
			    maxIndex = j;
			}
		    }

		    maxes.push(maxIndex);
		}

		return $V(maxes);
	    },

	    // return the largest values in each row
	    maxColumns: function() {
		var maxes = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var max = null;

		    for(var j = 1; j <= this.cols(); j++) {
			if(max === null || this.e(i, j) > max) {
			    max = this.e(i, j);
			}
		    }

		    maxes.push(max);
		}

		return $V(maxes);
	    },

	    // return the indexes of the columns with the smallest values
	    // for each row
	    minColumnIndexes: function() {
		var mins = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var min = null;
		    var minIndex = -1;

		    for(var j = 1; j <= this.cols(); j++) {
			if(min === null || this.e(i, j) < min) {
			    min = this.e(i, j);
			    minIndex = j;
			}
		    }

		    mins.push(minIndex);
		}

		return $V(mins);
	    },

	    // return the smallest values in each row
	    minColumns: function() {
		var mins = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var min = null;

		    for(var j = 1; j <= this.cols(); j++) {
			if(min === null || this.e(i, j) < min) {
			    min = this.e(i, j);
			}
		    }

		    mins.push(min);
		}

		return $V(mins);
	    },
	    
	    // perorm a partial pivot on the matrix. essentially move the largest
	    // row below-or-including the pivot and replace the pivot's row with it.
	    // a pivot matrix is returned so multiplication can perform the transform.
	    partialPivot: function(k, j, P, A, L) {
		var maxIndex = 0;
		var maxValue = 0;

		for(var i = k; i <= A.rows(); i++) {
		    if(Math.abs(A.e(i, j)) > maxValue) {
			maxValue = Math.abs(A.e(k, j));
			maxIndex = i;
		    }
		}

		if(maxIndex != k) {
		    var tmp = A.elements[k - 1];
		    A.elements[k - 1] = A.elements[maxIndex - 1];
		    A.elements[maxIndex - 1] = tmp;
		    
		    P.elements[k - 1][k - 1] = 0;
		    P.elements[k - 1][maxIndex - 1] = 1;
		    P.elements[maxIndex - 1][maxIndex - 1] = 0;
		    P.elements[maxIndex - 1][k - 1] = 1;
		}
		
		return P;
	    },

	    // solve lower-triangular matrix * x = b via forward substitution
	    forwardSubstitute: function(b) {
		var xa = [];

		for(var i = 1; i <= this.rows(); i++) {
		    var w = 0;

		    for(var j = 1; j < i; j++) {
			w += this.e(i, j) * xa[j - 1];
		    }

		    xa.push((b.e(i) - w) / this.e(i, i));
		}

		return $V(xa);
	    },

	    // solve an upper-triangular matrix * x = b via back substitution
	    backSubstitute: function(b) {
		var xa = [];

		for(var i = this.rows(); i > 0; i--) {
		    var w = 0;

		    for(var j = this.cols(); j > i; j--) {
			w += this.e(i, j) * xa[this.rows() - j];
		    }

		    xa.push((b.e(i) - w) / this.e(i, i));
		}

		return $V(xa.reverse());
	    },
	    
	    luPack: luPack,
	    luJs: luJs,
	    svdJs: svdJs,
	    svdPack: svdPack,
	    qrJs: qrJs,
	    qrPack: qrPack
	};

	// LU factorization from LAPACK
	function luPack() {
	    var lu = lapack.lu(this.elements);
	    return {
		L: $M(lu.L),
		U: $M(lu.U),
		P: $M(lu.P)
		// don't pass back IPIV
	    };
	}

	var tolerance =  1.4901e-08;

	// pure Javascript LU factorization
	function luJs() {
	    var A = this.dup();
	    var L = Matrix.I(A.rows());
	    var P = Matrix.I(A.rows());
	    var U = Matrix.Zeros(A.rows(), A.cols());
	    var p = 1;

	    for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {
		P = A.partialPivot(k, p, P, A, L);
		
		for(var i = k + 1; i <= A.rows(); i++) {
		    var l = A.e(i, p) / A.e(k, p);
		    L.elements[i - 1][k - 1] = l;
		    
		    for(var j = k + 1 ; j <= A.cols(); j++) {
			A.elements[i - 1][j - 1] -= A.e(k, j) * l;
		    }
		}
		
		for(var j = k; j <= A.cols(); j++) {
		    U.elements[k - 1][j - 1] = A.e(k, j);
		}

		if(p < A.cols())
		    p++;
	    }    
	    
	    return {L: L, U: U, P: P};
	}

	function getLapack() {
	    try {
		return __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"lapack\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    } catch(e) {}
	}

	var lapack;

	// if node-lapack is installed use the fast, native fortran routines
	if(lapack = getLapack()) {
	    Matrix.prototype.svd = svdPack;
	    Matrix.prototype.qr = qrPack;
	    Matrix.prototype.lu = luPack;
	} else {
	    // otherwise use the slower pure Javascript versions
	    Matrix.prototype.svd = svdJs;
	    Matrix.prototype.qr = qrJs;
	    Matrix.prototype.lu = luJs;
	}

	// Constructor function
	Matrix.create = function(aElements, ignoreLapack) {
	    var M = new Matrix().setElements(aElements);
	    return M;
	};

	// Identity matrix of size n
	Matrix.I = function(n) {
	    var els = [], i = n, j;
	    while (i--) {
		j = n;
		els[i] = [];
		while (j--) {
		    els[i][j] = (i == j) ? 1 : 0;
		}
	    }
	    return Matrix.create(els);
	};

	Matrix.loadFile = function(file) {
	    var contents = fs.readFileSync(file, 'utf-8');
	    var matrix = [];

	    var rowArray = contents.split('\n');
	    for (var i = 0; i < rowArray.length; i++) {
		var d = rowArray[i].split(',');
		if (d.length > 1) {
		    matrix.push(d);
		}
	    }

	    var M = new Matrix();
	    return M.setElements(matrix);
	};

	// Diagonal matrix - all off-diagonal elements are zero
	Matrix.Diagonal = function(elements) {
	    var i = elements.length;
	    var M = Matrix.I(i);
	    while (i--) {
		M.elements[i][i] = elements[i];
	    }
	    return M;
	};

	// Rotation matrix about some axis. If no axis is
	// supplied, assume we're after a 2D transform
	Matrix.Rotation = function(theta, a) {
	    if (!a) {
		return Matrix.create([
		    [Math.cos(theta), -Math.sin(theta)],
		    [Math.sin(theta), Math.cos(theta)]
		]);
	    }
	    var axis = a.dup();
	    if (axis.elements.length != 3) { return null; }
	    var mod = axis.modulus();
	    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;
	    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;
	    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp
	    // That proof rotates the co-ordinate system so theta
	    // becomes -theta and sin becomes -sin here.
	    return Matrix.create([
		[t * x * x + c, t * x * y - s * z, t * x * z + s * y],
		[t * x * y + s * z, t * y * y + c, t * y * z - s * x],
		[t * x * z - s * y, t * y * z + s * x, t * z * z + c]
	    ]);
	};

	// Special case rotations
	Matrix.RotationX = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[1, 0, 0],
		[0, c, -s],
		[0, s, c]
	    ]);
	};

	Matrix.RotationY = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[c, 0, s],
		[0, 1, 0],
		[-s, 0, c]
	    ]);
	};

	Matrix.RotationZ = function(t) {
	    var c = Math.cos(t), s = Math.sin(t);
	    return Matrix.create([
		[c, -s, 0],
		[s, c, 0],
		[0, 0, 1]
	    ]);
	};

	// Random matrix of n rows, m columns
	Matrix.Random = function(n, m) {
	    if (arguments.length === 1) m = n;
	    return Matrix.Zero(n, m).map(
		function() { return Math.random(); }
	  );
	};

	Matrix.Fill = function(n, m, v) {
	    if (arguments.length === 2) {
		v = m;
		m = n;
	    }

	    var els = [], i = n, j;

	    while (i--) {
		j = m;
		els[i] = [];

		while (j--) {
		    els[i][j] = v;
		}
	    }

	    return Matrix.create(els);
	};

	// Matrix filled with zeros
	Matrix.Zero = function(n, m) {
	    return Matrix.Fill(n, m, 0);
	};

	// Matrix filled with zeros
	Matrix.Zeros = function(n, m) {
	    return Matrix.Zero(n, m);
	};

	// Matrix filled with ones
	Matrix.One = function(n, m) {
	    return Matrix.Fill(n, m, 1);
	};

	// Matrix filled with ones
	Matrix.Ones = function(n, m) {
	    return Matrix.One(n, m);
	};

	module.exports = Matrix;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	var Vector = __webpack_require__(74);
	var Matrix = __webpack_require__(76);
	var Plane = __webpack_require__(78);
	var Sylvester = __webpack_require__(75);

	// Line class - depends on Vector, and some methods require Matrix and Plane.

	function Line() {}
	Line.prototype = {

	  // Returns true if the argument occupies the same space as the line
	  eql: function(line) {
	    return (this.isParallelTo(line) && this.contains(line.anchor));
	  },

	  // Returns a copy of the line
	  dup: function() {
	    return Line.create(this.anchor, this.direction);
	  },

	  // Returns the result of translating the line by the given vector/array
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    return Line.create([
	      this.anchor.elements[0] + V[0],
	      this.anchor.elements[1] + V[1],
	      this.anchor.elements[2] + (V[2] || 0)
	    ], this.direction);
	  },

	  // Returns true if the line is parallel to the argument. Here, 'parallel to'
	  // means that the argument's direction is either parallel or antiparallel to
	  // the line's own direction. A line is parallel to a plane if the two do not
	  // have a unique intersection.
	  isParallelTo: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }
	    var theta = this.direction.angleFrom(obj.direction);
	    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);
	  },

	  // Returns the line's perpendicular distance from the argument,
	  // which can be a point, a line or a plane
	  distanceFrom: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }
	    if (obj.direction) {
	      // obj is a line
	      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }
	      var N = this.direction.cross(obj.direction).toUnitVector().elements;
	      var A = this.anchor.elements, B = obj.anchor.elements;
	      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, D = this.direction.elements;
	      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];
	      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);
	      if (modPA === 0) return 0;
	      // Assumes direction vector is normalized
	      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;
	      var sin2 = 1 - cosTheta*cosTheta;
	      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));
	    }
	  },

	  // Returns true iff the argument is a point on the line, or if the argument
	  // is a line segment lying within the receiver
	  contains: function(obj) {
	    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
	    var dist = this.distanceFrom(obj);
	    return (dist !== null && dist <= Sylvester.precision);
	  },

	  // Returns the distance from the anchor of the given point. Negative values are
	  // returned for points that are in the opposite direction to the line's direction from
	  // the line's anchor point.
	  positionOf: function(point) {
	    if (!this.contains(point)) { return null; }
	    var P = point.elements || point;
	    var A = this.anchor.elements, D = this.direction.elements;
	    return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];
	  },

	  // Returns true iff the line lies in the given plane
	  liesIn: function(plane) {
	    return plane.contains(this);
	  },

	  // Returns true iff the line has a unique point of intersection with the argument
	  intersects: function(obj) {
	    if (obj.normal) { return obj.intersects(this); }
	    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);
	  },

	  // Returns the unique intersection point with the argument, if one exists
	  intersectionWith: function(obj) {
	    if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }
	    if (!this.intersects(obj)) { return null; }
	    var P = this.anchor.elements, X = this.direction.elements,
	        Q = obj.anchor.elements, Y = obj.direction.elements;
	    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];
	    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];
	    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;
	    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;
	    var XdotX = X1*X1 + X2*X2 + X3*X3;
	    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;
	    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;
	    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);
	    return Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);
	  },

	  // Returns the point on the line that is closest to the given point or line/line segment
	  pointClosestTo: function(obj) {
	    if (obj.start && obj.end) {
	      // obj is a line segment
	      var P = obj.pointClosestTo(this);
	      return (P === null) ? null : this.pointClosestTo(P);
	    } else if (obj.direction) {
	      // obj is a line
	      if (this.intersects(obj)) { return this.intersectionWith(obj); }
	      if (this.isParallelTo(obj)) { return null; }
	      var D = this.direction.elements, E = obj.direction.elements;
	      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];
	      // Create plane containing obj and the shared normal and intersect this with it
	      // Thank you: http://www.cgafaq.info/wiki/Line-line_distance
	      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);
	      var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];
	      var P = Plane.create(obj.anchor, N);
	      return P.intersectionWith(this);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      if (this.contains(P)) { return Vector.create(P); }
	      var A = this.anchor.elements, D = this.direction.elements;
	      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];
	      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),
	          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);
	      var V = Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);
	      var k = this.distanceFrom(P) / V.modulus();
	      return Vector.create([
	        P[0] + V.elements[0] * k,
	        P[1] + V.elements[1] * k,
	        (P[2] || 0) + V.elements[2] * k
	      ]);
	    }
	  },

	  // Returns a copy of the line rotated by t radians about the given line. Works by
	  // finding the argument's closest point to this line's anchor point (call this C) and
	  // rotating the anchor about C. Also rotates the line's direction about the argument's.
	  // Be careful with this - the rotation axis' direction affects the outcome!
	  rotate: function(t, line) {
	    // If we're working in 2D
	    if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), Vector.k); }
	    var R = Matrix.Rotation(t, line.direction).elements;
	    var C = line.pointClosestTo(this.anchor).elements;
	    var A = this.anchor.elements, D = this.direction.elements;
	    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
	    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
	    return Line.create([
	      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
	      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
	      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
	    ], [
	      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],
	      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],
	      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]
	    ]);
	  },

	  // Returns a copy of the line with its direction vector reversed.
	  // Useful when using lines for rotations.
	  reverse: function() {
	    return Line.create(this.anchor, this.direction.x(-1));
	  },

	  // Returns the line's reflection in the given point or line
	  reflectionIn: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var A = this.anchor.elements, D = this.direction.elements;
	      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];
	      var newA = this.anchor.reflectionIn(obj).elements;
	      // Add the line's direction vector to its anchor, then mirror that in the plane
	      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;
	      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;
	      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];
	      return Line.create(newA, newD);
	    } else if (obj.direction) {
	      // obj is a line - reflection obtained by rotating PI radians about obj
	      return this.rotate(Math.PI, obj);
	    } else {
	      // obj is a point - just reflect the line's anchor in it
	      var P = obj.elements || obj;
	      return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);
	    }
	  },

	  // Set the line's anchor point and direction.
	  setVectors: function(anchor, direction) {
	    // Need to do this so that line's properties are not
	    // references to the arguments passed in
	    anchor = Vector.create(anchor);
	    direction = Vector.create(direction);
	    if (anchor.elements.length == 2) {anchor.elements.push(0); }
	    if (direction.elements.length == 2) { direction.elements.push(0); }
	    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }
	    var mod = direction.modulus();
	    if (mod === 0) { return null; }
	    this.anchor = anchor;
	    this.direction = Vector.create([
	      direction.elements[0] / mod,
	      direction.elements[1] / mod,
	      direction.elements[2] / mod
	    ]);
	    return this;
	  }
	};

	// Constructor function
	Line.create = function(anchor, direction) {
	  var L = new Line();
	  return L.setVectors(anchor, direction);
	};

	// Axes
	Line.X = Line.create(Vector.Zero(3), Vector.i);
	Line.Y = Line.create(Vector.Zero(3), Vector.j);
	Line.Z = Line.create(Vector.Zero(3), Vector.k);

	module.exports = Line;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Plane class - depends on Vector. Some methods require Matrix and Line.
	var Vector = __webpack_require__(74);
	var Matrix = __webpack_require__(76);
	var Line = __webpack_require__(77);

	var Sylvester = __webpack_require__(75);

	function Plane() {}
	Plane.prototype = {

	  // Returns true iff the plane occupies the same space as the argument
	  eql: function(plane) {
	    return (this.contains(plane.anchor) && this.isParallelTo(plane));
	  },

	  // Returns a copy of the plane
	  dup: function() {
	    return Plane.create(this.anchor, this.normal);
	  },

	  // Returns the result of translating the plane by the given vector
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    return Plane.create([
	      this.anchor.elements[0] + V[0],
	      this.anchor.elements[1] + V[1],
	      this.anchor.elements[2] + (V[2] || 0)
	    ], this.normal);
	  },

	  // Returns true iff the plane is parallel to the argument. Will return true
	  // if the planes are equal, or if you give a line and it lies in the plane.
	  isParallelTo: function(obj) {
	    var theta;
	    if (obj.normal) {
	      // obj is a plane
	      theta = this.normal.angleFrom(obj.normal);
	      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);
	    } else if (obj.direction) {
	      // obj is a line
	      return this.normal.isPerpendicularTo(obj.direction);
	    }
	    return null;
	  },

	  // Returns true iff the receiver is perpendicular to the argument
	  isPerpendicularTo: function(plane) {
	    var theta = this.normal.angleFrom(plane.normal);
	    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);
	  },

	  // Returns the plane's distance from the given object (point, line or plane)
	  distanceFrom: function(obj) {
	    if (this.intersects(obj) || this.contains(obj)) { return 0; }
	    if (obj.anchor) {
	      // obj is a plane or line
	      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;
	      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, N = this.normal.elements;
	      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);
	    }
	  },

	  // Returns true iff the plane contains the given point or line
	  contains: function(obj) {
	    if (obj.normal) { return null; }
	    if (obj.direction) {
	      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));
	    } else {
	      var P = obj.elements || obj;
	      var A = this.anchor.elements, N = this.normal.elements;
	      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));
	      return (diff <= Sylvester.precision);
	    }
	  },

	  // Returns true iff the plane has a unique point/line of intersection with the argument
	  intersects: function(obj) {
	    if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }
	    return !this.isParallelTo(obj);
	  },

	  // Returns the unique intersection with the argument, if one exists. The result
	  // will be a vector if a line is supplied, and a line if a plane is supplied.
	  intersectionWith: function(obj) {
	    if (!this.intersects(obj)) { return null; }
	    if (obj.direction) {
	      // obj is a line
	      var A = obj.anchor.elements, D = obj.direction.elements,
	          P = this.anchor.elements, N = this.normal.elements;
	      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);
	      return Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);
	    } else if (obj.normal) {
	      // obj is a plane
	      var direction = this.normal.cross(obj.normal).toUnitVector();
	      // To find an anchor point, we find one co-ordinate that has a value
	      // of zero somewhere on the intersection, and remember which one we picked
	      var N = this.normal.elements, A = this.anchor.elements,
	          O = obj.normal.elements, B = obj.anchor.elements;
	      var solver = Matrix.Zero(2,2), i = 0;
	      while (solver.isSingular()) {
	        i++;
	        solver = Matrix.create([
	          [ N[i%3], N[(i+1)%3] ],
	          [ O[i%3], O[(i+1)%3]  ]
	        ]);
	      }
	      // Then we solve the simultaneous equations in the remaining dimensions
	      var inverse = solver.inverse().elements;
	      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];
	      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];
	      var intersection = [
	        inverse[0][0] * x + inverse[0][1] * y,
	        inverse[1][0] * x + inverse[1][1] * y
	      ];
	      var anchor = [];
	      for (var j = 1; j <= 3; j++) {
	        // This formula picks the right element from intersection by
	        // cycling depending on which element we set to zero above
	        anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);
	      }
	      return Line.create(anchor, direction);
	    }
	  },

	  // Returns the point in the plane closest to the given point
	  pointClosestTo: function(point) {
	    var P = point.elements || point;
	    var A = this.anchor.elements, N = this.normal.elements;
	    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];
	    return Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);
	  },

	  // Returns a copy of the plane, rotated by t radians about the given line
	  // See notes on Line#rotate.
	  rotate: function(t, line) {
	    var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;
	    var C = line.pointClosestTo(this.anchor).elements;
	    var A = this.anchor.elements, N = this.normal.elements;
	    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
	    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
	    return Plane.create([
	      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
	      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
	      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
	    ], [
	      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],
	      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],
	      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]
	    ]);
	  },

	  // Returns the reflection of the plane in the given point, line or plane.
	  reflectionIn: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var A = this.anchor.elements, N = this.normal.elements;
	      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];
	      var newA = this.anchor.reflectionIn(obj).elements;
	      // Add the plane's normal to its anchor, then mirror that in the other plane
	      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;
	      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;
	      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];
	      return Plane.create(newA, newN);
	    } else if (obj.direction) {
	      // obj is a line
	      return this.rotate(Math.PI, obj);
	    } else {
	      // obj is a point
	      var P = obj.elements || obj;
	      return Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);
	    }
	  },

	  // Sets the anchor point and normal to the plane. If three arguments are specified,
	  // the normal is calculated by assuming the three points should lie in the same plane.
	  // If only two are sepcified, the second is taken to be the normal. Normal vector is
	  // normalised before storage.
	  setVectors: function(anchor, v1, v2) {
	    anchor = Vector.create(anchor);
	    anchor = anchor.to3D(); if (anchor === null) { return null; }
	    v1 = Vector.create(v1);
	    v1 = v1.to3D(); if (v1 === null) { return null; }
	    if (typeof(v2) == 'undefined') {
	      v2 = null;
	    } else {
	      v2 = Vector.create(v2);
	      v2 = v2.to3D(); if (v2 === null) { return null; }
	    }
	    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];
	    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];
	    var normal, mod;
	    if (v2 !== null) {
	      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];
	      normal = Vector.create([
	        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),
	        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),
	        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)
	      ]);
	      mod = normal.modulus();
	      if (mod === 0) { return null; }
	      normal = Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);
	    } else {
	      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);
	      if (mod === 0) { return null; }
	      normal = Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);
	    }
	    this.anchor = anchor;
	    this.normal = normal;
	    return this;
	  }
	};

	// Constructor function
	Plane.create = function(anchor, v1, v2) {
	  var P = new Plane();
	  return P.setVectors(anchor, v1, v2);
	};

	// X-Y-Z planes
	Plane.XY = Plane.create(Vector.Zero(3), Vector.k);
	Plane.YZ = Plane.create(Vector.Zero(3), Vector.i);
	Plane.ZX = Plane.create(Vector.Zero(3), Vector.j);
	Plane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;

	// Returns the plane containing the given points (can be arrays as
	// well as vectors). If the points are not coplanar, returns null.
	Plane.fromPoints = function(points) {
	  var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Vector.Zero(3);
	  for (i = 0; i < np; i++) {
	    P = Vector.create(points[i]).to3D();
	    if (P === null) { return null; }
	    list.push(P);
	    n = list.length;
	    if (n > 2) {
	      // Compute plane normal for the latest three points
	      A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;
	      N = Vector.create([
	        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
	        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
	        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
	      ]).toUnitVector();
	      if (n > 3) {
	        // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.
	        // This might be a slightly long-winded way of doing things, but we need the sum of all the normals
	        // to find which way the plane normal should point so that the points form an anticlockwise list.
	        theta = N.angleFrom(prevN);
	        if (theta !== null) {
	          if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) { return null; }
	        }
	      }
	      totalN = totalN.add(N);
	      prevN = N;
	    }
	  }
	  // We need to add in the normals at the start and end points, which the above misses out
	  A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;
	  totalN = totalN.add(Vector.create([
	    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
	    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
	    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
	  ]).toUnitVector()).add(Vector.create([
	    (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),
	    (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),
	    (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])
	  ]).toUnitVector());
	  return Plane.create(list[0], totalN);
	};

	module.exports = Plane;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2011, Chris Umbel, James Coglan
	// Line.Segment class - depends on Line and its dependencies.

	var Line = __webpack_require__(77);
	var Vector = __webpack_require__(74);

	Line.Segment = function() {};
	Line.Segment.prototype = {

	  // Returns true iff the line segment is equal to the argument
	  eql: function(segment) {
	    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||
	        (this.start.eql(segment.end) && this.end.eql(segment.start));
	  },

	  // Returns a copy of the line segment
	  dup: function() {
	    return Line.Segment.create(this.start, this.end);
	  },

	  // Returns the length of the line segment
	  length: function() {
	    var A = this.start.elements, B = this.end.elements;
	    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];
	    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);
	  },

	  // Returns the line segment as a vector equal to its
	  // end point relative to its endpoint
	  toVector: function() {
	    var A = this.start.elements, B = this.end.elements;
	    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);
	  },

	  // Returns the segment's midpoint as a vector
	  midpoint: function() {
	    var A = this.start.elements, B = this.end.elements;
	    return Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);
	  },

	  // Returns the plane that bisects the segment
	  bisectingPlane: function() {
	    return Plane.create(this.midpoint(), this.toVector());
	  },

	  // Returns the result of translating the line by the given vector/array
	  translate: function(vector) {
	    var V = vector.elements || vector;
	    var S = this.start.elements, E = this.end.elements;
	    return Line.Segment.create(
	      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],
	      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]
	    );
	  },

	  // Returns true iff the line segment is parallel to the argument. It simply forwards
	  // the method call onto its line property.
	  isParallelTo: function(obj) {
	    return this.line.isParallelTo(obj);
	  },

	  // Returns the distance between the argument and the line segment's closest point to the argument
	  distanceFrom: function(obj) {
	    var P = this.pointClosestTo(obj);
	    return (P === null) ? null : P.distanceFrom(obj);
	  },

	  // Returns true iff the given point lies on the segment
	  contains: function(obj) {
	    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
	    var P = (obj.elements || obj).slice();
	    if (P.length == 2) { P.push(0); }
	    if (this.start.eql(P)) { return true; }
	    var S = this.start.elements;
	    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);
	    var vect = this.toVector();
	    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();
	  },

	  // Returns true iff the line segment intersects the argument
	  intersects: function(obj) {
	    return (this.intersectionWith(obj) !== null);
	  },

	  // Returns the unique point of intersection with the argument
	  intersectionWith: function(obj) {
	    if (!this.line.intersects(obj)) { return null; }
	    var P = this.line.intersectionWith(obj);
	    return (this.contains(P) ? P : null);
	  },

	  // Returns the point on the line segment closest to the given object
	  pointClosestTo: function(obj) {
	    if (obj.normal) {
	      // obj is a plane
	      var V = this.line.intersectionWith(obj);
	      if (V === null) { return null; }
	      return this.pointClosestTo(V);
	    } else {
	      // obj is a line (segment) or point
	      var P = this.line.pointClosestTo(obj);
	      if (P === null) { return null; }
	      if (this.contains(P)) { return P; }
	      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();
	    }
	  },

	  // Set the start and end-points of the segment
	  setPoints: function(startPoint, endPoint) {
	    startPoint = Vector.create(startPoint).to3D();
	    endPoint = Vector.create(endPoint).to3D();
	    if (startPoint === null || endPoint === null) { return null; }
	    this.line = Line.create(startPoint, endPoint.subtract(startPoint));
	    this.start = startPoint;
	    this.end = endPoint;
	    return this;
	  }
	};

	// Constructor function
	Line.Segment.create = function(v1, v2) {
	  var S = new Line.Segment();
	  return S.setPoints(v1, v2);
	};

	module.exports = Line.Segment;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var Sylvester = __webpack_require__(73),
	Matrix = Sylvester.Matrix,
	Vector = Sylvester.Vector;

	function KMeans(Observations) {
	    if(!Observations.elements)
	    Observations = $M(Observations);

	    this.Observations = Observations;
	}

	// create an initial centroid matrix with initial values between
	// 0 and the max of feature data X.
	function createCentroids(k) {
	    var Centroid = [];
	    var maxes = this.Observations.maxColumns();
	    //console.log(maxes);

	    for(var i = 1; i <= k; i++) {
	        var centroid = [];
	        for(var j = 1; j <= this.Observations.cols(); j++) {
	            centroid.push(Math.random() * maxes.e(j));
	        }

	        Centroid.push(centroid);
	    }

	    //console.log(centroid)

	    return $M(Centroid);
	}

	// get the euclidian distance between the feature data X and
	// a given centroid matrix C.
	function distanceFrom(Centroids) {
	    var distances = [];

	    for(var i = 1; i <= this.Observations.rows(); i++) {
	        var distance = [];

	        for(var j = 1; j <= Centroids.rows(); j++) {
	            distance.push(this.Observations.row(i).distanceFrom(Centroids.row(j)));
	        }

	        distances.push(distance);
	    }

	    return $M(distances);
	}

	// categorize the feature data X into k clusters. return a vector
	// containing the results.
	function cluster(k) {
	    var Centroids = this.createCentroids(k);
	    var LastDistances = Matrix.Zero(this.Observations.rows(), this.Observations.cols());
	    var Distances = this.distanceFrom(Centroids);
	    var Groups;

	    while(!(LastDistances.eql(Distances))) {
	    Groups = Distances.minColumnIndexes();
	    LastDistances = Distances;

	    var newCentroids = [];

	    for(var i = 1; i <= Centroids.rows(); i++) {
	        var centroid = [];

	        for(var j = 1; j <= Centroids.cols(); j++) {
	        var sum = 0;
	        var count = 0;

	        for(var l = 1; l <= this.Observations.rows(); l++) {
	            if(Groups.e(l) == i) {
	            count++;
	            sum += this.Observations.e(l, j);
	            }
	        }

	        centroid.push(sum / count);
	        }

	        newCentroids.push(centroid);
	    }

	    Centroids = $M(newCentroids);
	    Distances = this.distanceFrom(Centroids);
	    }

	    return Groups;
	}

	KMeans.prototype.createCentroids = createCentroids;
	KMeans.prototype.distanceFrom = distanceFrom;
	KMeans.prototype.cluster = cluster;

	module.exports = KMeans;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(10),
	    Classifier = __webpack_require__(66),
	    ApparatusLogisticRegressionClassifier = __webpack_require__(69).LogisticRegressionClassifier;

	var LogisticRegressionClassifier = function(stemmer) {
	    Classifier.call(this, new ApparatusLogisticRegressionClassifier(), stemmer);
	};

	util.inherits(LogisticRegressionClassifier, Classifier);

	function restore(classifier, stemmer) {
	    classifier = Classifier.restore(classifier, stemmer);
	    classifier.__proto__ = LogisticRegressionClassifier.prototype;
	    classifier.classifier = ApparatusLogisticRegressionClassifier.restore(classifier.classifier);

	    return classifier;
	}

	function load(filename, stemmer, callback) {
	    Classifier.load(filename, function(err, classifier) {
	        if (err) {
	            callback(err);
	        }
	        else {
	            callback(err, restore(classifier, stemmer));
	        }
	    });
	}

	function train() {
	    // we need to reset the traning state because logistic regression
	    // needs its matricies to have their widths synced, etc.
	    this.lastAdded = 0;
	    this.classifier = new ApparatusLogisticRegressionClassifier();
	    Classifier.prototype.train.call(this);
	}

	LogisticRegressionClassifier.prototype.train = train;
	LogisticRegressionClassifier.restore = restore;
	LogisticRegressionClassifier.load = load;

	module.exports = LogisticRegressionClassifier;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var SingularPluralInflector = __webpack_require__(83),
	    util = __webpack_require__(10),
	    FormSet = __webpack_require__(84);

	function attach() {
	    var inflector = this;
	    
	    String.prototype.singularizeNoun = function() {
	        return inflector.singularize(this);
	    }
	    
	    String.prototype.pluralizeNoun = function() {
	        return inflector.pluralize(this);
	    }
	}

	var NounInflector = function() {
	    this.ambiguous = [
	        'bison', 'bream', 'carp', 'chassis', 'cod', 'corps', 'debris', 'deer',
	        'diabetes', 'equipment', 'elk', 'fish', 'flounder', 'gallows', 'graffiti',
	        'headquarters', 'herpes', 'highjinks', 'homework', 'information',
	        'mackerel', 'mews', 'money', 'news', 'rice', 'rabies', 'salmon', 'series',
	        'sheep', 'shrimp', 'species', 'swine', 'trout', 'tuna', 'whiting', 'wildebeest'
	    ];
	    
	    this.customPluralForms = [];
	    this.customSingularForms = [];    
	    this.singularForms = new FormSet();
	    this.pluralForms = new FormSet();

	    this.attach = attach;

	    this.addIrregular("child", "children");
	    this.addIrregular("man", "men");
	    this.addIrregular("person", "people");
	    this.addIrregular("sex", "sexes");
	    this.addIrregular("mouse", "mice");
	    this.addIrregular("ox", "oxen");
	    this.addIrregular("foot", "feet");
	    this.addIrregular("tooth", "teeth");
	    this.addIrregular("goose", "geese");
	    this.addIrregular("ephemeris", "ephemerides");
	    
	    // see if it is possible to unify the creation of both the singular and
	    // plural regexes or maybe even just have one list. with a complete list
	    // of rules it may only be possible for some regular forms, but worth a shot    
	    this.pluralForms.regularForms.push([/y$/i, 'ies']);
	    this.pluralForms.regularForms.push([/ife$/i, 'ives']);
	    this.pluralForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae']);    
	    this.pluralForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i']);    
	    this.pluralForms.regularForms.push([/(buffal|tomat|tornad)o$/i, '$1oes']);    
	    this.pluralForms.regularForms.push([/(sis)$/i, 'ses']);
	    this.pluralForms.regularForms.push([/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices']);
	    this.pluralForms.regularForms.push([/(x|ch|ss|sh|s|z)$/i, '$1es']);
	    this.pluralForms.regularForms.push([/^(?!talis|.*hu)(.*)man$/i, '$1men']);
	    this.pluralForms.regularForms.push([/(.*)/i, '$1s']);

	    this.singularForms.regularForms.push([/([^v])ies$/i, '$1y']);
	    this.singularForms.regularForms.push([/ives$/i, 'ife']);
	    this.singularForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a']);
	    this.singularForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us']);
	    this.singularForms.regularForms.push([/(buffal|tomat|tornad)(oes)$/i, '$1o']);
	    this.singularForms.regularForms.push([/(analy|naly|synop|parenthe|diagno|the)ses$/i, '$1sis']);
	    this.singularForms.regularForms.push([/(vert|ind|cort)(ices)$/i, '$1ex']);
	    // our pluralizer won''t cause this form of appendix (appendicies)
	    // but we should handle it
	    this.singularForms.regularForms.push([/(matr|append)(ices)$/i, '$1ix']);
	    this.singularForms.regularForms.push([/(x|ch|ss|sh|s|z)es$/i, '$1']);
	    this.singularForms.regularForms.push([/men$/i, 'man']);
	    this.singularForms.regularForms.push([/s$/i, '']);
	    
	    this.pluralize = function (token) {
	        return this.ize(token, this.pluralForms, this.customPluralForms);
	    };
	    
	    this.singularize = function(token) {
	        return this.ize(token, this.singularForms, this.customSingularForms);
	    };
	};

	util.inherits(NounInflector, SingularPluralInflector);
	    
	module.exports = NounInflector;


/***/ },
/* 83 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var TenseInflector = function () {
	};

	TenseInflector.prototype.addSingular = function(pattern, replacement) {
	    this.customSingularForms.push([pattern, replacement]);    
	};

	TenseInflector.prototype.addPlural = function(pattern, replacement) {
	    this.customPluralForms.push([pattern, replacement]);
	};

	TenseInflector.prototype.ize = function (token, formSet, customForms) {
	    var restoreCase = this.restoreCase(token);
	    return restoreCase(this.izeRegExps(token, customForms) || this.izeAbiguous(token) ||
	        this.izeRegulars(token, formSet) || this.izeRegExps(token, formSet.regularForms) ||
	        token);
	}

	TenseInflector.prototype.izeAbiguous = function (token) {
	    if(this.ambiguous.indexOf(token.toLowerCase()) > -1)
	        return token.toLowerCase();

	    return false;
	}

	TenseInflector.prototype.pluralize = function (token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	};

	TenseInflector.prototype.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	};    

	var uppercaseify = function(token) {
	    return token.toUpperCase();
	}
	var capitalize = function(token) {
	    return token[0].toUpperCase() + token.slice(1);
	}
	var lowercaseify = function(token) {
	    return token.toLowerCase();
	}

	TenseInflector.prototype.restoreCase = function(token) {
	    if (token[0] === token[0].toUpperCase()) {
	        if (token[1] && token[1] === token[1].toLowerCase()) {
	            return capitalize;
	        } else {
	            return uppercaseify;
	        }
	    } else {
	        return lowercaseify;
	    }
	}

	TenseInflector.prototype.izeRegulars = function(token, formSet) {
	    token = token.toLowerCase();
	    if(formSet.irregularForms.hasOwnProperty(token) && formSet.irregularForms[token])
	        return formSet.irregularForms[token];

	    return false;
	}

	TenseInflector.prototype.addForm = function(singularTable, pluralTable, singular, plural) {
	    singular = singular.toLowerCase();
	    plural = plural.toLowerCase();
	    pluralTable[singular] = plural;
	    singularTable[plural] = singular;
	};

	TenseInflector.prototype.addIrregular = function(singular, plural) {
	    this.addForm(this.singularForms.irregularForms, this.pluralForms.irregularForms, singular, plural);
	};

	TenseInflector.prototype.izeRegExps = function(token, forms) {
	        var i, form;
	        for(i = 0; i < forms.length; i++) {
	            form = forms[i];
	            
	            if(token.match(form[0]))
	                return token.replace(form[0], form[1]);
	        }
	        
	        return false;
	    }

	module.exports = TenseInflector;


/***/ },
/* 84 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var FormSet = function() {
	    this.regularForms = [];
	    this.irregularForms = {};
	}

	module.exports = FormSet;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A noun inflector for French.
	 * Compiled from:
	 * \@see http://fr.wiktionary.org/wiki/Annexe:Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
	 * \@see http://fr.wikipedia.org/wiki/Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
	 *
	 * \@todo Take compounded noun into account (eaux-fortes, pique-nique...).
	 * \@todo General note: French also requires AdjectiveInflector (femininize...).
	 */

	var SingularPluralInflector = __webpack_require__(83),
	    util = __webpack_require__(10),
	    FormSet = __webpack_require__(84);

	function attach() {
	  var inflector = this;

	  String.prototype.singularizeNoun = function() {
	    return inflector.singularize(this);
	  };

	  String.prototype.pluralizeNoun = function() {
	    return inflector.pluralize(this);
	  };
	}



	/**
	 * @constructor
	 */
	var NounInflector = function() {
	  // Ambiguous a.k.a. invariant.
	  // \@todo Expand this list to be as comprehensive as possible.
	  this.ambiguous = [
	    // Nouns ending by -s
	    'à-peu-près', 'à-propos', 'abattis', 'abcès', 'abois', 'abribus', 'abus',
	    'accès', 'acquis', 'adénovirus', 'adonis', 'ados', 'agrès', 'aguets',
	    'ailleurs', 'ais', 'albatros', 'albinos', 'alias', 'aloès', 'amaryllis',
	    'amas', 'ampélopsis', 'ananas', 'anchois', 'angélus', 'anis', 'anticorps',
	    'antihéros', 'antirides', 'anus', 'appas', 'appentis', 'appui-bras',
	    'appuie-bras', 'arcanes', 'argus', 'arrérages', 'arrière-pays', 'as',
	    'ascaris', 'asparagus', 'atlas', 'atours', 'aurochs', 'autobus',
	    'autofocus', 'avant-bras', 'avant-corps', 'avant-propos', 'avers', 'avis',
	    'axis', 'barbouillis', 'bas', 'beaujolais', 'beaux-arts', 'biais',
	    'bibliobus', 'biceps', 'bicross', 'bien-fonds', 'bloc-notes', 'blockhaus',
	    'blocus', 'blues', 'bois', 'bonus', 'bout-dehors', 'bouts-rimés',
	    'branle-bas', 'bras', 'brebis', 'bris', 'brise-lames', 'brise-mottes',
	    'brûlis', 'buis', 'burnous', 'bus', 'business', 'cabas', 'cacatoès',
	    'cacatois', 'cactus', 'cadenas', 'cafouillis', 'caillebotis', 'calvados',
	    'cambouis', 'campus', 'canevas', 'cannabis', 'carquois', 'cas',
	    'casse-noisettes', 'casse-pieds', 'cassis', 'caucus', 'cens', 'cervelas',
	    'chablis', 'chamois', 'chaos', 'chas', 'chasselas', 'châssis',
	    'chatouillis', 'chauffe-assiettes', 'chauve-souris', 'chorus', 'choucas',
	    'circoncis', 'cirrus', 'clafoutis', 'clapotis', 'cliquetis', 'clos',
	    'cochylis', 'colis', 'coloris', 'commis', 'compas', 'compromis',
	    'compte-chèques', 'compte-gouttes', 'compte-tours', 'concours', 'confins',
	    'congrès', 'consensus', 'contrepoids', 'contresens', 'contretemps',
	    'corn flakes', 'corps', 'corps-à-corps', 'corpus', 'cosinus', 'cosmos',
	    'coulis', 'coupe-ongles', 'cours', 'court-jus', 'couscous', 'coutelas',
	    'crocus', 'croquis', 'cross', 'cubitus', 'cumulus', 'cure-dents',
	    'cure-ongles', 'cure-pipes', 'cursus', 'cyclo-cross', 'cyprès', 'dais',
	    'damas', 'débarras', 'débours', 'débris', 'décès', 'dedans', 'dehors',
	    'delirium tremens', 'demi-gros', 'dépens', 'dessous', 'dessus', 'détritus',
	    'deux-mâts', 'deux-pièces', 'deux-points', 'deux-roues', 'deux-temps',
	    'dévers', 'devis', 'diplodocus', 'discours', 'dos', 'ébats', 'éboulis',
	    'échalas', 'edelweiss', 'élaeis', 'éleis', 'éléphantiasis', 'embarras',
	    'empois', 'en-cas', 'encens', 'enclos', 'endos', 'engrais', 'entrelacs',
	    'entremets', 'envers', 'épluche-légumes', 'ers', 'espace-temps',
	    'essuie-mains', 'eucalyptus', 'ex-libris', 'excès', 'express', 'extrados',
	    'faciès', 'fait-divers', 'fatras', 'faux-sens', 'favoris', 'ficus',
	    'fier-à-bras', 'finnois', 'florès', 'focus', 'fœtus', 'fois', 'forceps',
	    'fouillis', 'fracas', 'frais', 'français', 'franglais', 'frimas',
	    'friselis', 'frisottis', 'froncis', 'frottis', 'fucus', 'gâchis', 'galetas',
	    'galimatias', 'garde-à-vous', 'garde-corps', 'gargouillis', 'gars',
	    'gâte-bois', 'gazouillis', 'génois', 'gibus', 'glacis', 'glas', 'gneiss',
	    'gobe-mouches', 'grès', 'gribouillis', 'guet-apens', 'habeas corpus',
	    'hachis', 'haras', 'hardes', 'harnais', 'haut-le-corps', 'hautbois',
	    'herbe-aux-chats', 'héros', 'herpès', 'hiatus', 'hibiscus', 'hors-concours',
	    'hors-pistes', 'hourdis', 'huis-clos', 'humérus', 'humus', 'ibis', 'iléus',
	    'indique-fuites', 'infarctus', 'inlandsis', 'insuccès', 'intercours',
	    'intrados', 'intrus', 'iris', 'isatis', 'jais', 'jars', 'jeans',
	    'jeuconcours', 'judas', 'juliénas', 'jus', 'justaucorps', 'kakatoès',
	    'kermès', 'kriss', 'lacis', 'laïus', 'lambris', 'lapis', 'laps', 'lapsus',
	    'laquais', 'las', 'lattis', 'lave-mains', 'lavis', 'lèche-bottes',
	    'lèche-vitrines', 'legs', 'lias', 'liégeois', 'lilas', 'lis', 'lœss',
	    'logis', 'loris', 'lotus', 'louis', 'lupus', 'lys', 'mâchicoulis', 'madras',
	    'maïs', 'malappris', 'malus', 'mânes', 'maquis', 'marais', 'maroilles',
	    'marquis', 'mas', 'mass-médias', 'matelas', 'matois', 'médius', 'mépris',
	    'mérinos', 'mess', 'mets', 'mi-bas', 'micro-ondes', 'mille-pattes',
	    'millepertuis', 'minibus', 'minois', 'minus', 'mirabilis', 'mois',
	    'monocorps', 'monte-plats', 'mors', 'motocross', 'mots-croisés', 'motus',
	    'mouchetis', 'mucus', 'myosotis', 'nævus', 'négus', 'niais',
	    'nimbo-stratus', 'nimbus', 'norois', 'nounours', 'nu-pieds', 'oasis',
	    'obus', 'olibrius', 'omnibus', 'opus', 'os', 'ours', 'ouvre-boîtes',
	    'ouvre-bouteilles', 'palais', 'palis', 'palmarès', 'palus', 'panais',
	    'panaris', 'pancréas', 'papyrus', 'par-dehors', 'paradis', 'parcours',
	    'pardessus', 'pare-balles', 'pare-chocs', 'parvis', 'pas', 'passe-temps',
	    'pataquès', 'pathos', 'patois', 'pavois', 'pays', 'permis',
	    'petit-bourgeois', 'petit-gris', 'petit-pois', 'phallus', 'phimosis',
	    'pickles', 'pilotis', 'pique-fleurs', 'pis', 'pithiviers', 'pityriasis',
	    'plateau-repas', 'plâtras', 'plein-temps', 'plexiglas', 'plexus', 'plus',
	    'poids', 'pois', 'pont-levis', 'porte-avions', 'porte-bagages',
	    'porte-billets', 'porte-bouteilles', 'porte-clés', 'porte-hélicoptères',
	    'porte-jarretelles', 'porte-revues', 'pouls', 'préavis', 'presse-fruits',
	    'presse-papiers', 'princeps', 'printemps', 'procès', 'processus', 'progrès',
	    'propos', 'prospectus', 'protège-dents', 'psoriasis', 'pubis', 'puits',
	    'pus', 'putois', 'quatre-épices', 'quatre-feuilles', 'quatre-heures',
	    'quatre-mâts', 'quatre-quarts', 'quatre-temps', 'quitus', 'rabais',
	    'rachis', 'radis', 'radius', 'raïs', 'ramassis', 'rébus', 'reclus',
	    'recours', 'refus', 'relais', 'remords', 'remous', 'remue-méninges',
	    'rendez-vous', 'repas', 'répons', 'repos', 'repris', 'reps', 'rétrovirus',
	    'revers', 'rhinocéros', 'rictus', 'rince-doigts', 'ris', 'rollmops',
	    'rosé-des-prés', 'roulis', 'rubis', 'salmigondis', 'salsifis', 'sans-logis',
	    'sas', 'sassafras', 'sauternes', 'schnaps', 'schuss', 'secours', 'semis',
	    'sens', 'serre-fils', 'serre-livres', 'sévices', 'sinus', 'skunks',
	    'souris', 'sournois', 'sous-bois', 'stradivarius', 'stras', 'strass',
	    'strato-cumulus', 'stratus', 'stress', 'succès', 'surdos', 'surplus',
	    'surpoids', 'sursis', 'suspens', 'synopsis', 'syphilis', 'taffetas',
	    'taillis', 'talus', 'tamaris', 'tamis', 'tapis', 'tas', 'taudis', 'temps',
	    'tennis', 'terminus', 'terre-neuvas', 'tétanos', 'tétras', 'thalamus',
	    'thermos', 'thesaurus', 'thésaurus', 'thymus', 'tire-fesses', 'tonus',
	    'torchis', 'torticolis', 'tournedos', 'tournevis', 'tournis', 'tracas',
	    'traîne-savates', 'travers', 'tréfonds', 'treillis', 'trépas', 'trias',
	    'triceps', 'trichomonas', 'trois-étoiles', 'trois-mâts', 'trois-quarts',
	    'trolleybus', 'tumulus', 'typhus', 'univers', 'us', 'utérus', 'vasistas',
	    'vélocross', 'velours', 'verglas', 'verjus', 'vernis', 'vers',
	    'vert-de-gris', 'vide-ordures', 'vide-poches', 'villageois', 'virus',
	    'vis-à-vis', 'volubilis', 'vulgum pecus', 'waters', 'williams', 'xérès',

	    // Nouns ending by -x
	    'abat-voix', 'afflux', 'alpax', 'anthrax', 'apex', 'aptéryx',
	    'archéoptéryx', 'arrière-faix', 'bombyx', 'borax', 'bordeaux', 'bouseux',
	    'box', 'carex', 'casse-noix', 'cedex', 'céphalothorax', 'cérambyx', 'chaux',
	    'choix', 'coccyx', 'codex', 'contumax', 'coqueleux', 'cortex', 'courroux',
	    'croix', 'crucifix', 'culex', 'demodex', 'duplex', 'entre-deux', 'époux',
	    'équivaux', 'eux', 'ex', 'faix', 'faucheux', 'faux', 'fax', 'ferreux',
	    'flux', 'fox', 'freux', 'furax', 'hapax', 'harengueux', 'hélix',
	    'horse-pox', 'houx', 'index', 'influx', 'inox', 'juke-box', 'kleenex',
	    'lagothrix', 'larynx', 'lastex', 'latex', 'lux', 'lynx', 'macareux', 'max',
	    'mésothorax', 'mi-voix', 'mirepoix', 'motteux', 'multiplex', 'murex',
	    'narthex', 'noix', 'onyx', 'opopanax', 'oropharynx', 'paix', 'panax',
	    'perdrix', 'pharynx', 'phénix', 'phlox', 'phoenix', 'pneumothorax', 'poix',
	    'portefaix', 'pousse-cailloux', 'preux', 'prix', 'prothorax', 'pucheux',
	    'pyrex', 'pyroligneux', 'quadruplex', 'queux', 'redoux', 'reflex', 'reflux',
	    'relax', 'rhinopharynx', 'rose-croix', 'rouvieux', 'roux', 'rumex',
	    'saindoux', 'sardonyx', 'scolex', 'sèche-cheveux', 'silex', 'simplex',
	    'sioux', 'sirex', 'smilax', 'solex', 'songe-creux', 'spalax', 'sphex',
	    'sphinx', 'storax', 'strix', 'styrax', 'surfaix', 'surtaux', 'syrinx',
	    'tamarix', 'taux', 'télex', 'thorax', 'tord-boyaux', 'toux', 'trionyx',
	    'tripoux', 'tubifex', 'vertex', 'vidéotex', 'vielleux', 'vieux',
	    'violoneux', 'voix', 'volvox', 'vortex',

	    // Nouns ending by -z
	    'allume-gaz', 'assez', 'biogaz', 'cache-nez', 'camping-gaz', 'chez',
	    'chintz', 'ersatz', 'fez', 'free-jazz', 'fritz', 'gaz', 'gin-fizz', 'hertz',
	    'jazz', 'jerez', 'kibboutz', 'kilohertz', 'kolkhoz', 'kronprinz', 'lapiaz',
	    'lez', 'mégahertz', 'merguez', 'nez', 'pince-nez', 'quartz', 'quiz', 'ranz',
	    'raz', 'recez', 'rémiz', 'rez', 'riz', 'ruolz', 'seltz', 'serre-nez'
	  ];

	  this.customPluralForms = [];
	  this.customSingularForms = [];
	  this.singularForms = new FormSet();
	  this.pluralForms = new FormSet();

	  this.attach = attach;

	  this.addIrregular('ail', 'aulx');
	  this.addIrregular('bétail', 'bestiaux');
	  this.addIrregular('bonhomme', 'bonshommes');
	  this.addIrregular('ciel', 'cieux');
	  this.addIrregular('monsieur', 'messieurs');
	  this.addIrregular('mafioso', 'mafiosi');
	  this.addIrregular('œil', 'yeux');
	  this.addIrregular('putto', 'putti');
	  this.addIrregular('targui', 'touareg'); // touareg -> touaregs is also OK.

	  // Pluralize
	  this.pluralForms.regularForms.push([/^(av|b|c|carnav|cérémoni|chac|corr|emment|emmenth|festiv|fut|gavi|gra|narv|p|récit|rég|rit|rorqu|st)al$/i, '$1als']);
	  this.pluralForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)ail$/i, '$1aux']);
	  this.pluralForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)ou$/i, '$1oux']);
	  this.pluralForms.regularForms.push([/^(gr|berimb|don|karb|land|pil|rest|sarr|un)au$/i, '$1aus']);
	  this.pluralForms.regularForms.push([/^(bl|ém|enf|pn)eu$/i, '$1eus']);
	  this.pluralForms.regularForms.push([/(au|eau|eu|œu)$/i, '$1x']);
	  this.pluralForms.regularForms.push([/al$/i, 'aux']);
	  this.pluralForms.regularForms.push([/(s|x)$/i, '$1']);
	  this.pluralForms.regularForms.push([/(.*)$/i, '$1s']);

	  // Singularize
	  this.singularForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)aux$/i, '$1ail']);
	  this.singularForms.regularForms.push([/^(aloy|b|bouc|boy|burg|conoy|coy|cr|esquim|ét|fabli|flé|flûti|glu|gr|gru|hoy|joy|kérab|matéri|nobli|noy|pré|sen|sén|t|touch|tuss|tuy|v|ypré)aux$/i, '$1au']);
	  this.singularForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)oux$/i, '$1ou']);
	  this.singularForms.regularForms.push([/^(bis)?aïeux$/i, '$1aïeul']);
	  this.singularForms.regularForms.push([/^apparaux$/i, 'appareil']); // One way transform, don't put on irregular list.
	  this.singularForms.regularForms.push([/^ciels$/i, 'ciel']);
	  this.singularForms.regularForms.push([/^œils$/i, 'œil']);
	  this.singularForms.regularForms.push([/(eau|eu|œu)x$/i, '$1']);
	  this.singularForms.regularForms.push([/aux$/i, 'al']);
	  this.singularForms.regularForms.push([/(.*)s$/i, '$1']);

	  this.pluralize = function(token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	  };

	  this.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	  };
	};

	util.inherits(NounInflector, SingularPluralInflector);

	module.exports = NounInflector;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A noun inflector for Japanese.
	 * Compiled from several sources including:
	 * \@see http://answers.yahoo.com/question/index?qid=20080528201740AASBWy6
	 * \@see http://www.excite.co.jp/dictionary/english_japanese/
	 *
	 * This script assumes input is normalized using normalizer_ja().
	 * Pluralizing Japanese has a very limited interest.
	 * Japanese don't usually distinct plural from singular, so even a word looking
	 * like a singular might actually be a plural.
	 *
	 * Singularization of nouns ending by -tachi or -ra is achieved using a
	 * comprehensive black list, while nouns ending by -domo or -gata use a white
	 * list because there are too many exceptions.
	 *
	 * \@todo Singularize nouns ending by -ら, but there are too many exceptions.
	 * \@todo Expand the list of common plurals ending by -domo and -gata.
	 */

	var SingularPluralInflector = __webpack_require__(83),
	    util = __webpack_require__(10),
	    FormSet = __webpack_require__(84);

	function attach() {
	  var inflector = this;

	  String.prototype.singularizeNoun = function() {
	    return inflector.singularize(this);
	  };

	  String.prototype.pluralizeNoun = function() {
	    return inflector.pluralize(this);
	  };
	}



	/**
	 * @constructor
	 */
	var NounInflector = function() {
	  // Ambiguous a.k.a. invariant.
	  this.ambiguous = [
	    'ともだち', '友だち', '友達', '遊び友達', '飲み友達', '酒飲み友達', '茶飲み友達',
	    '学校友達', '女友達', '男友達', '幼友達'
	  ];

	  this.customPluralForms = [];
	  this.customSingularForms = [];
	  this.singularForms = new FormSet();
	  this.pluralForms = new FormSet();

	  this.attach = attach;

	  this.addIrregular('神', '神神');
	  this.addIrregular('人', '人人');
	  this.addIrregular('年', '年年');
	  this.addIrregular('月', '月月');
	  this.addIrregular('日', '日日');
	  this.addIrregular('星', '星星');
	  this.addIrregular('島', '島島');
	  this.addIrregular('我', '我我');
	  this.addIrregular('山', '山山');
	  this.addIrregular('国', '国国');
	  this.addIrregular('所', '所所');
	  this.addIrregular('隅', '隅隅');

	  /**
	   * Notes:
	   * -たち exceptions: いたち, おいたち, ついたち, かたち, かおかたち, なりかたち, いでたち, はたち, からたち, なりたち
	   * -達 exceptions: 伊達, 男伊達, 栄達, 上意下達, 熟達, 上達, 下意上達, 先達, 送達, 速達, 即日速達, 書留速達, 調達, 通達, 伝達, 到達, 配達, 牛乳配達, 新聞配達, 無料配達, 四通八達, 発達, 未発達, 御用達, 宮内庁御用達, 練達, 闊達
	   * -等 exceptions: 一等, 下等, 何等, 均等, 勲等, 高等, 三等, 初等, 上等, 親等, 二親等, 数等, 対等, 中等, 同等, 特等, 二等, 品等, 不等, 平等, 悪平等, 男女平等, 不平等, 優等, 劣等
	   */

	  // Pluralize
	  this.pluralForms.regularForms.push([/^(.+)$/i, '$1たち']);

	  // Singularize
	  this.singularForms.regularForms.push([/^(.+)たち$/i, function(a, mask) {
	    if (['い', 'おい', 'つい', 'か', 'かおか', 'なりか', 'いで', 'は', 'から',
	      'なり'].indexOf(mask) >= 0)
	      return mask + 'たち';
	    return mask;
	  }]);
	  this.singularForms.regularForms.push([/^(.+)達$/i, function(a, mask) {
	    if (['伊', '伊', '栄', '上意下', '熟', '上', '下意上', '先', '送', '速',
	      '即日速', '書留速', '調', '通', '伝', '到', '配', '牛乳配', '新聞配', '無料配',
	      '四通八', '発', '未発', '御用', '宮内庁御用', '練', '闊'].indexOf(mask) >= 0)
	      return mask + '達';
	    return mask;
	  }]);  // Singularize nouns ending by -等, but not exceptions.
	  this.singularForms.regularForms.push([/^(.+)等$/i, function(a, mask) {
	    if (['一', '下', '何', '均', '勲', '高', '三', '初', '親', '二親', '数', '対',
	      '中', '同', '特', '二', '品', '不', '平', '悪平', '男女平', '不平', '優',
	      '劣'].indexOf(mask) >= 0)
	      return mask + '等';
	    return mask;
	  }]);
	  this.singularForms.regularForms.push([/^(人間|わたくし|私|てまえ|手前|野郎|やろう|勇者|がき|ガキ|餓鬼|あくとう|悪党|猫|家来)(共|ども)$/i, '$1']);
	  this.singularForms.regularForms.push([/^(神様|先生|あなた|大名|女中|奥様)(方|がた)$/i, '$1']);

	  this.pluralize = function(token) {
	    return this.ize(token, this.pluralForms, this.customPluralForms);
	  };

	  this.singularize = function(token) {
	    return this.ize(token, this.singularForms, this.customSingularForms);
	  };
	};

	util.inherits(NounInflector, SingularPluralInflector);

	module.exports = NounInflector;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var util = __webpack_require__(10),
	    SingularPluralInflector = __webpack_require__(83),
	    FormSet = __webpack_require__(84);

	function attach() {
	    var inflector = this;
	    
	    String.prototype.singularizePresentVerb = function() {
	        return inflector.singularize(this);
	    }
	    
	    String.prototype.pluralizePresentVerb = function() {
	        return inflector.pluralize(this);
	    }
	}

	var VerbInflector = function() {
	    this.ambiguous = [
	        'will'
	    ];
	    
	    this.attach = attach;
	        
	    this.customPluralForms = [];
	    this.customSingularForms = [];    
	    this.singularForms = new FormSet();
	    this.pluralForms = new FormSet();

	    this.addIrregular("am", "are");    
	    this.addIrregular("is", "are");
	    this.addIrregular("was", "were");
	    this.addIrregular("has", "have");
	    
	    this.singularForms.regularForms.push([/ed$/i, 'ed']);
	    this.singularForms.regularForms.push([/ss$/i, 'sses']);
	    this.singularForms.regularForms.push([/x$/i, 'xes']);    
	    this.singularForms.regularForms.push([/(h|z|o)$/i, '$1es']);
	    this.singularForms.regularForms.push([/$zz/i, 'zzes']);
	    this.singularForms.regularForms.push([/([^a|e|i|o|u])y$/i, '$1ies']);
	    this.singularForms.regularForms.push([/$/i, 's']);

	    this.pluralForms.regularForms.push([/sses$/i, 'ss']);
	    this.pluralForms.regularForms.push([/xes$/i, 'x']);
	    this.pluralForms.regularForms.push([/([cs])hes$/i, '$1h']);
	    this.pluralForms.regularForms.push([/zzes$/i, 'zz']);
	    this.pluralForms.regularForms.push([/([^h|z|o|i])es$/i, '$1e']);
	    this.pluralForms.regularForms.push([/ies$/i, 'y']);//flies->fly
	    this.pluralForms.regularForms.push([/e?s$/i, '']); 
	};

	util.inherits(VerbInflector, SingularPluralInflector);

	module.exports = VerbInflector;


/***/ },
/* 88 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function nthForm(i) {
	    var teenth = (i % 100);

	    if(teenth > 10 && teenth < 14)
	        return 'th';
	    else {
	        switch(i % 10) {
	            case 1:
	                return 'st';
	                break;
	            case 2:
	                return 'nd';
	                break;            
	            case 3:
	                return 'rd';
	                break;
	            default:
	                return 'th';
	        }
	    }
	}

	function nth(i) {
	    return i.toString() + nthForm(i);
	}

	var CountInflector = function() {
	};

	CountInflector.nth = nth;

	module.exports = CountInflector;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var IndexFile = __webpack_require__(90),
	  DataFile = __webpack_require__(97);

	function pushResults(data, results, offsets, callback) {
	  var wordnet = this;

	  if(offsets.length == 0) {
	    callback(results);
	  } else {
	    data.get(offsets.pop(), function(record) {
	      results.push(record);
	      wordnet.pushResults(data, results, offsets, callback);
	    });
	  }
	}

	function lookupFromFiles(files, results, word, callback) {
	  var wordnet = this;

	  if(files.length == 0)
	    callback(results);
	  else {
	    var file = files.pop();

	    file.index.lookup(word, function(record) {
	      if(record) {
	        wordnet.pushResults(file.data, results, record.synsetOffset, function() {
	          wordnet.lookupFromFiles(files, results, word, callback);
	        });
	      } else {
	        wordnet.lookupFromFiles(files, results, word, callback);
	      }
	    });
	  }
	}

	function lookup(word, callback) {
	  word = word.toLowerCase().replace(/\s+/g, '_');

	  this.lookupFromFiles([
	    {index: this.nounIndex, data: this.nounData},
	    {index: this.verbIndex, data: this.verbData},
	    {index: this.adjIndex, data: this.adjData},
	    {index: this.advIndex, data: this.advData},
	  ], [], word, callback);
	}

	function get(synsetOffset, pos, callback) {
	  var dataFile = this.getDataFile(pos);
	  var wordnet = this;

	  dataFile.get(synsetOffset, function(result) {
	    callback(result);
	  });
	}

	function getDataFile(pos) {
	    switch(pos) {
	      case 'n':
	        return this.nounData;
	      case 'v':
	        return this.verbData;
	      case 'a': case 's':
	        return this.adjData;
	      case 'r':
	        return this.advData;
	    }
	}

	function loadSynonyms(synonyms, results, ptrs, callback) {
	  var wordnet = this;

	  if(ptrs.length > 0) {
	    var ptr = ptrs.pop();

	    this.get(ptr.synsetOffset, ptr.pos, function(result) {
	      synonyms.push(result);
	      wordnet.loadSynonyms(synonyms, results, ptrs, callback);
	    });
	  } else {
	    wordnet.loadResultSynonyms(synonyms, results, callback);
	  }
	}

	function loadResultSynonyms(synonyms, results, callback) {
	  var wordnet = this;

	  if(results.length > 0) {
	    var result = results.pop();
	    wordnet.loadSynonyms(synonyms, results, result.ptrs, callback);
	  } else
	    callback(synonyms);
	}

	function lookupSynonyms(word, callback) {
	  var wordnet = this;

	  wordnet.lookup(word, function(results) {
	    wordnet.loadResultSynonyms([], results, callback);
	  });
	}

	function getSynonyms() {
	  var wordnet = this;
	  var callback = arguments[2] ? arguments[2] : arguments[1];
	  var pos = arguments[0].pos ? arguments[0].pos : arguments[1];
	  var synsetOffset = arguments[0].synsetOffset ? arguments[0].synsetOffset : arguments[0];

	  this.get(synsetOffset, pos, function(result) {
	    wordnet.loadSynonyms([], [], result.ptrs, callback);
	  });
	}

	function WordNet(dataDir) {

	  if (!dataDir) {
	    try {
	      var WNdb = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"wordnet-db\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    } catch(e) {
	      console.error("Please 'npm install wordnet-db' before using WordNet module or specify a dict directory.");
	      throw e;
	    }
	    dataDir = WNdb.path;
	  }

	  this.nounIndex = new IndexFile(dataDir, 'noun');
	  this.verbIndex = new IndexFile(dataDir, 'verb');
	  this.adjIndex = new IndexFile(dataDir, 'adj');
	  this.advIndex = new IndexFile(dataDir, 'adv');

	  this.nounData = new DataFile(dataDir, 'noun');
	  this.verbData = new DataFile(dataDir, 'verb');
	  this.adjData = new DataFile(dataDir, 'adj');
	  this.advData = new DataFile(dataDir, 'adv');

	  this.get = get;
	  this.lookup = lookup;
	  this.lookupFromFiles = lookupFromFiles;
	  this.pushResults = pushResults;
	  this.loadResultSynonyms = loadResultSynonyms;
	  this.loadSynonyms = loadSynonyms;
	  this.lookupSynonyms = lookupSynonyms;
	  this.getSynonyms = getSynonyms;
	  this.getDataFile = getDataFile;
	}

	module.exports = WordNet;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var WordNetFile = __webpack_require__(95),
	  fs = __webpack_require__(68),
	  util = __webpack_require__(10);

	function getFileSize(path) {
	  var stat = fs.statSync(path);
	  return stat.size;
	}

	function findPrevEOL(fd, pos, callback) {
	  var buff = new Buffer(1024);
	  if(pos == 0)
	    callback(0);
	  else {
	    fs.read(fd, buff, 0, 1, pos, function(err, count) {
	      if(buff[0] == 10)
	        callback(pos + 1);
	      else
	        findPrevEOL(fd, pos - 1, callback);
	    });
	  }
	}

	function readLine(fd, pos, callback) {
	  var buff = new Buffer(1024);
	  findPrevEOL(fd, pos, function(pos) {
	    WordNetFile.appendLineChar(fd, pos, 0, buff, callback);
	  });
	}

	function miss(callback) {
	  callback({status: 'miss'});
	}

	function findAt(fd, size, pos, lastPos, adjustment, searchKey, callback, lastKey) {
	  if (lastPos == pos || pos >= size) {
	    miss(callback);
	  } else {
	    readLine(fd, pos, function(line) {
	      var tokens = line.split(/\s+/);
	      var key = tokens[0];

	    if(key == searchKey) {
	        callback({status: 'hit', key: key, 'line': line, tokens: tokens});
	      } else if(adjustment == 1 || key == lastKey)  {
	        miss(callback);
	      } else {
	        adjustment = Math.ceil(adjustment * 0.5);

	        if (key < searchKey) {
	          findAt(fd, size, pos + adjustment, pos, adjustment, searchKey, callback, key);
	        } else {
	          findAt(fd, size, pos - adjustment, pos, adjustment, searchKey, callback, key);
	        }
	      }
	    });
	  }
	}

	function find(searchKey, callback) {
	  var indexFile = this;

	  indexFile.open(function(err, fd, done) {
	    if(err) {
	      console.log(err);
	    } else {
	      var size = getFileSize(indexFile.filePath) - 1;
	      var pos = Math.ceil(size / 2);
	      findAt(fd, size, pos, null, pos, searchKey,
	        function(result) { callback(result); done(); });
	    }
	  });
	}

	function lookupFromFile(word, callback) {
	  this.find(word, function(record) {
	    var indexRecord = null;

	    if(record.status == 'hit') {
	      var ptrs = [], offsets = [];

	      for(var i = 0; i < parseInt(record.tokens[3]); i++)
	        ptrs.push(record.tokens[i]);

	      for(var i = 0; i < parseInt(record.tokens[2]); i++)
	        offsets.push(parseInt(record.tokens[ptrs.length + 6 + i], 10));

	      indexRecord = {
	        lemma: record.tokens[0],
	        pos: record.tokens[1],
	        ptrSymbol: ptrs,
	        senseCnt:  parseInt(record.tokens[ptrs.length + 4], 10),
	        tagsenseCnt:  parseInt(record.tokens[ptrs.length + 5], 10),
	        synsetOffset:  offsets
	      };
	    }

	    callback(indexRecord);
	  });
	}

	function lookup(word, callback) {
	  this.lookupFromFile(word, callback);
	}

	var IndexFile = function(dataDir, name) {
	  WordNetFile.call(this, dataDir, 'index.' + name);
	};

	util.inherits(IndexFile, WordNetFile);

	IndexFile.prototype.lookupFromFile = lookupFromFile;
	IndexFile.prototype.lookup = lookup;
	IndexFile.prototype.find = find;

	IndexFile.prototype._findAt = findAt;

	module.exports = IndexFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(92)
	var ieee754 = __webpack_require__(93)
	var isArray = __webpack_require__(94)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 92 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 93 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 94 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var  fs = __webpack_require__(68),
	  path = __webpack_require__(96),
	  util = __webpack_require__(10);


	function appendLineChar(fd, pos, buffPos, buff, callback) {
	  if(buffPos >= buff.length) {
	    var newBuff = new Buffer(buff.length * 2);
	    buff.copy(newBuff, 0, 0, buff.length);
	    buff = newBuff;
	  }

	  fs.read(fd, buff, buffPos, 1, pos, function(err, count) {
	    if(err)
	      console.log(err);
	    else {
	      if(buff[buffPos] == 10 || buffPos == buff.length)
	        callback(buff.slice(0, buffPos).toString('UTF-8'));
	      else {
	        appendLineChar(fd, pos + 1, buffPos + 1, buff, callback);
	      }
	    }
	  });
	}

	function open(callback) {
	  var filePath = this.filePath;

	  fs.open(filePath, 'r', null, function(err, fd) {
	    if (err) {
	        console.log('Unable to open %s', filePath);
	        return;
	    }
	    callback(err, fd, function() {fs.close(fd)});
	  });
	}

	var WordNetFile = function(dataDir, fileName) {
	  this.dataDir = dataDir;
	  this.fileName = fileName;
	  this.filePath = __webpack_require__(96).join(this.dataDir, this.fileName);
	};

	WordNetFile.prototype.open = open;
	WordNetFile.appendLineChar = appendLineChar;

	module.exports = WordNetFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var WordNetFile = __webpack_require__(95),
	  fs = __webpack_require__(68),
	  util = __webpack_require__(10);

	function get(location, callback) {
	  var buff = new Buffer(4096);

	  this.open(function(err, fd, done) {
	    WordNetFile.appendLineChar(fd, location, 0, buff, function(line) {
	      done();
	      var data = line.split('| ');
	      var tokens = data[0].split(/\s+/);
	      var ptrs = [];
	      var wCnt = parseInt(tokens[3], 16);
	      var synonyms = [];

	      for(var i = 0; i < wCnt; i++) {
	        synonyms.push(tokens[4 + i * 2]);
	      }

	      var ptrOffset = (wCnt - 1) * 2 + 6;
	      for(var i = 0; i < parseInt(tokens[ptrOffset], 10); i++) {
	        ptrs.push({
	          pointerSymbol: tokens[ptrOffset + 1 + i * 4],
	          synsetOffset: parseInt(tokens[ptrOffset + 2 + i * 4], 10),
	          pos: tokens[ptrOffset + 3 + i * 4],
	          sourceTarget: tokens[ptrOffset + 4 + i * 4]
	        });
	      }

	      // break "gloss" into definition vs. examples
	      var glossArray = data[1].split("; ");
	      var definition = glossArray[0];
	      var examples = glossArray.slice(1);    

	      for (var k=0; k < examples.length; k++) {
	        examples[k] = examples[k].replace(/\"/g,'').replace(/\s\s+/g,'');
	      }
	      
	      callback({
	        synsetOffset: parseInt(tokens[0], 10),
	        lexFilenum: parseInt(tokens[1], 10),
	        pos: tokens[2],
	        wCnt: wCnt,
	        lemma: tokens[4],
	        synonyms: synonyms,
	        lexId: tokens[5],
	        ptrs: ptrs,
	        gloss: data[1],
	        def: definition,
	        exp: examples
	      });
	    });
	  });
	}

	var DataFile = function(dataDir, name) {
	  WordNetFile.call(this, dataDir, 'data.' + name);
	};

	util.inherits(DataFile, WordNetFile);
	DataFile.prototype.get = get;

	module.exports = DataFile;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(62)._,
	    Tokenizer = __webpack_require__(61).WordTokenizer,
	    tokenizer = new Tokenizer(),
	    stopwords = __webpack_require__(7).words,
	    fs = __webpack_require__(68);

	function buildDocument(text, key) {
	    var stopOut;

	    if(typeof text === 'string') {
	        text = tokenizer.tokenize(text.toLowerCase());
	        stopOut = true;
	    } else if(!_.isArray(text)) {
	        stopOut = false;
	        return text;
	    }

	    return text.reduce(function(document, term) {
	        // next line solves https://github.com/NaturalNode/natural/issues/119
	        if(typeof document[term] === 'function') document[term] = 0;
	        if(!stopOut || stopwords.indexOf(term) < 0)
	            document[term] = (document[term] ? document[term] + 1 : 1);
	        return document;
	    }, {__key: key});
	}

	function tf(term, document) {
	    return document[term] ? document[term]: 0;
	}

	function documentHasTerm(term, document) {
	    return document[term] && document[term] > 0;
	}

	function TfIdf(deserialized) {
	    if(deserialized)
	        this.documents = deserialized.documents;
	    else
	        this.documents = [];

	    this._idfCache = {};
	}

	// backwards compatibility for < node 0.10
	function isEncoding(encoding) {
	    if (typeof Buffer.isEncoding !== 'undefined')
	        return Buffer.isEncoding(encoding);
	    switch ((encoding + '').toLowerCase()) {
	        case 'hex':
	        case 'utf8':
	        case 'utf-8':
	        case 'ascii':
	        case 'binary':
	        case 'base64':
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	        case 'raw':
	            return true;
	    }
	    return false;
	}

	module.exports = TfIdf;
	TfIdf.tf = tf;

	TfIdf.prototype.idf = function(term, force) {

	    // Lookup the term in the New term-IDF caching,
	    // this will cut search times down exponentially on large document sets.
	    if(this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true)
	        return this._idfCache[term];

	    var docsWithTerm = this.documents.reduce(function(count, document) {
	        return count + (documentHasTerm(term, document) ? 1 : 0);
	    }, 0);

	    var idf = 1 + Math.log((this.documents.length) / ( 1 + docsWithTerm ));

	    // Add the idf to the term cache and return it
	    this._idfCache[term] = idf;
	    return idf;
	};

	// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
	// Otherwise, the cache will just be wiped clean
	TfIdf.prototype.addDocument = function(document, key, restoreCache) {
	    this.documents.push(buildDocument(document, key));

	    // make sure the cache is invalidated when new documents arrive
	    if(restoreCache === true) {
	        for(var term in this._idfCache) {
	            // invoking idf with the force option set will
	            // force a recomputation of the idf, and it will
	            // automatically refresh the cache value.
	            this.idf(term, true);
	        }
	    }   else {
	        this._idfCache = {};
	    }
	};

	// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
	// Otherwise, the cache will just be wiped clean
	TfIdf.prototype.addFileSync = function(path, encoding, key, restoreCache) {
	    if(!encoding)
	        encoding = 'utf8';
	    if(!isEncoding(encoding))
	        throw new Error('Invalid encoding: ' + encoding);

	    var document = fs.readFileSync(path, encoding);
	    this.documents.push(buildDocument(document, key));

	    // make sure the cache is invalidated when new documents arrive
	    if(restoreCache === true) {
	        for(var term in this._idfCache) {
	            // invoking idf with the force option set will
	            // force a recomputation of the idf, and it will
	            // automatically refresh the cache value.
	            this.idf(term, true);
	        }
	    }
	    else {
	        this._idfCache = {};
	    }
	};

	TfIdf.prototype.tfidf = function(terms, d) {
	    var _this = this;

	    if(!_.isArray(terms))
	        terms = tokenizer.tokenize(terms.toString().toLowerCase());

	    return terms.reduce(function(value, term) {
	        var idf = _this.idf(term);
	        idf = idf === Infinity ? 0 : idf;
	        return value + (tf(term, _this.documents[d]) * idf);
	    }, 0.0);
	};

	TfIdf.prototype.listTerms = function(d) {
	    var terms = [];

	    for(var term in this.documents[d]) {
	        if(term != '__key')
	           terms.push({term: term, tfidf: this.tfidf(term, d)});
	    }

	    return terms.sort(function(x, y) { return y.tfidf - x.tfidf; });
	};

	TfIdf.prototype.tfidfs = function(terms, callback) {
	    var tfidfs = new Array(this.documents.length);

	    for(var i = 0; i < this.documents.length; i++) {
	        tfidfs[i] = this.tfidf(terms, i);

	        if(callback)
	            callback(i, tfidfs[i], this.documents[i].__key);
	    }

	    return tfidfs;
	};

	// Define a tokenizer other than the default "WordTokenizer"
	TfIdf.prototype.setTokenizer = function(t) {
	    if(!_.isFunction(t.tokenize))
	        throw new Error('Expected a valid Tokenizer');
	    tokenizer = t;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 99 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014 Ken Koch

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/** 
	 * The basis of the TRIE structure.
	 **/
	function Trie(caseSensitive) {
		this.dictionary = {};
		this.$ = false;

		if(typeof caseSensitive === "undefined") {
			caseSensitive = true;
		}

		this.cs = caseSensitive;
	}

	/**
	 * Add a single string to the TRIE, returns true if the word was already in the 
	 * trie.
	 **/
	Trie.prototype.addString = function(string) {
		if(this.cs === false) {
			string = string.toLowerCase();
		}

		// If the string has only one letter, mark this as a word.
		if(string.length === 0) {
			var wasWord = this.$;
			this.$ = true;
			return wasWord;
		}

		// Make sure theres a Trie node in our dictionary
		var next = this.dictionary[string[0]];

		if(!next) {
			this.dictionary[string[0]] = new Trie(this.cs);
			next = this.dictionary[string[0]];
		}

		// Continue adding the string
		return next.addString(string.substring(1));
	};

	/**
	 * Add multiple strings to the TRIE
	 **/
	Trie.prototype.addStrings = function(list) {
		for(var i in list) {
			this.addString(list[i]);
		}
	};

	/**
	 * A function to search the TRIE and return an array of
	 * words which have same prefix <prefix>
	 * for example if we had the following words in our database:
	 * a, ab, bc, cd, abc, abd
	 * and we search the string: a
	 * we will get :
	 * [a, ab, abc, abd]
	 **/
	Trie.prototype.keysWithPrefix = function(prefix) {
	    if(this.caseSensitive === false) {
	        prefix = prefix.toLowerCase();
	    }

	    function isEmpty (object) {
	        for (var key in object) if (object.hasOwnProperty(key)) return false;
	        return true;
	    }

	    function get (node, word) {
	        if(!node) return null;
	        if(word.length == 0) return node;
	        return get(node.dictionary[word[0]], word.substring(1));
	    }

	    function recurse ( node, stringAgg, resultsAgg) {
	        if (!node) return;

	        // Check if this is a word
	        if (node.$) {
	            resultsAgg.push(stringAgg);
	        }

	        if (isEmpty(node.dictionary)) {
	            return ;
	        }

	        for (var c in node.dictionary) {
	            recurse (node.dictionary[c],stringAgg + c, resultsAgg);
	        }
	    }

	    var results = [];
	    recurse (get(this, prefix), prefix, results);
	    return results;
	};

	/** 
	 * A function to search the given string and return true if it lands
	 * on on a word. Essentially testing if the word exists in the database.
	 **/
	Trie.prototype.contains = function(string) {
		if(this.cs === false) {
			string = string.toLowerCase();
		}

		if(string.length === 0) {
			return this.$;
		}

		// Otherwise, we need to continue searching
		var firstLetter = string[0];
		var next = this.dictionary[firstLetter];		

		// If we don't have a node, this isn't a word
		if(!next) {
			return false;
		}

		// Otherwise continue the search at the next node
		return next.contains(string.substring(1));
	}

	/**
	 * A function to search the TRIE and return an array of words which were encountered along the way.
	 * This will only return words with full prefix matches.
	 * for example if we had the following words in our database:
	 * a, ab, bc, cd, abc
	 * and we searched the string: abcd
	 * we would get only:
	 * [a, ab, abc]
	 **/
	Trie.prototype.findMatchesOnPath = function(search) {
		if(this.cs === false) {
			search = search.toLowerCase();
		}

		function recurse(node, search, stringAgg, resultsAgg) {
			// Check if this is a word.
			if(node.$) {
				resultsAgg.push(stringAgg);
			}

			// Check if the have completed the seearch
			if(search.length === 0) {
				return resultsAgg;
			}

			// Otherwise, continue searching
			var next = node.dictionary[search[0]];
			if(!next) {
				return resultsAgg;
			}
			return recurse(next, search.substring(1), stringAgg + search[0], resultsAgg);
		};

		return recurse(this, search, "", []);
	};

	/**
	 * Returns the longest match and the remaining part that could not be matched.
	 * inspired by [NLTK containers.trie.find_prefix](http://nltk.googlecode.com/svn-/trunk/doc/api/nltk.containers.Trie-class.html).
	 **/
	Trie.prototype.findPrefix = function(search) {
		if(this.cs === false) {
			search = search.toLowerCase();
		}
		
		function recurse(node, search, stringAgg, lastWord) {
			// Check if this is a word
			if(node.$) {
				lastWord = stringAgg;
			}

			// Check if we have no more to search
			if(search.length === 0) {
				return [lastWord, search];
			}

			// Continue searching
			var next = node.dictionary[search[0]];
			if(!next) {
				return [lastWord, search];
			}
			return recurse(next, search.substring(1), stringAgg + search[0], lastWord);
		};

		return recurse(this, search, "", null);
	};

	/**
	 * Computes the number of actual nodes from this node to the end.
	 * Note: This involves traversing the entire structure and may not be
	 * good for frequent use.
	 **/
	Trie.prototype.getSize = function() { 
		var total = 1;
		for(var c in this.dictionary) {
			total += this.dictionary[c].getSize();
		}
		return total;
	};

	/**
	 * EXPORT THE TRIE
	 **/
	module.exports = Trie;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(62)._;

	/*
	 Sentences Analizer Class
	 From http://www.writingcentre.uottawa.ca/hypergrammar/sntpurps.html

	 Take a POS input and analyse it for
	  - Type of Sentense
	     - Interrogative
	       - Tag Questions
	       - 
	     - Declarative
	     - Exclamatory 
	     - Imperative

	  - Parts of a Sentense
	     - Subject
	     - Predicate

	  - Show Preposition Phrases
	*/

	var Sentences = function(pos, callback) {
	    this.posObj = pos;
	    this.senType = null;
	    callback(this);
	};

	Sentences.prototype.part = function(callback) {
	    var subject = [],
		predicat = [],
		verbFound = false;
		
	    this.prepositionPhrases();
		
	    for (var i = 0; i < this.posObj.tags.length; i++) {
	        if (this.posObj.tags[i].pos == "VB") {
	            if (i === 0) {
	                verbFound = true;
	            } else {
	                // We need to Test for any EX before the VB
	                if (this.posObj.tags[i - 1].pos != "EX") {
	                    verbFound = true;
	                } else {
	                    predicat.push(this.posObj.tags[i].token);
	                }					
	            }
	        }

	        // Add Pronoun Phrase (pp) Or Subject Phrase (sp)
	        if (!verbFound) {
	            if (this.posObj.tags[i].pp != true)
	                this.posObj.tags[i].spos = "SP";
	            
	            subject.push(this.posObj.tags[i].token);
	        } else {
	            if (this.posObj.tags[i].pp != true)
	                this.posObj.tags[i].spos = "PP";
	            
	            predicat.push(this.posObj.tags[i].token)
	        }
	    }
		
	    if (subject.length == 0) {
		this.posObj.tags.push({token:"You",spos:"SP",pos:"PRP",added:true});
	    }
	    
	    callback(this);	
	};

	// Takes POS and removes IN to NN or NNS
	// Adds a PP for each prepositionPhrases
	Sentences.prototype.prepositionPhrases = function() {
	    var remove = false;

	    for (var i = 0; i < this.posObj.tags.length; i++) {
	        if (this.posObj.tags[i].pos.match("IN")) {
	            remove = true;
	        }
	    
	        if (remove) {
	            this.posObj.tags[i].pp = true;
	        }
	    
	        if (this.posObj.tags[i].pos.match("NN")) {
	            remove = false;
	        }
	    }	
	};

	Sentences.prototype.subjectToString = function() {
	    return this.posObj.tags.map(function(t){ if (t.spos == "SP" || t.spos == "S" ) return t.token }).join(' ');
	};

	Sentences.prototype.predicateToString = function() {
	    return this.posObj.tags.map(function(t){ if (t.spos == "PP" || t.spos == "P" ) return t.token }).join(' ');
	};

	Sentences.prototype.implicitYou = function() {
	    for (var i = 0; i < this.posObj.tags.length;i++) {
	        if (this.posObj.tags[i].added) {
	            return true;
	        }
	    }
	    
	    return false;
	};

	Sentences.prototype.toString = function() {
	    return this.posObj.tags.map(function(t){return t.token}).join(' ');
	};

	// This is quick and incomplete.
	Sentences.prototype.type = function(callback) {
	    var callback = callback || false;

	    // Check for implicit you before popping a tag.
	    var implicitYou = this.implicitYou();

	    // FIXME - punct seems useless
	    var lastElement = this.posObj.punct();
	    lastElement = (lastElement.length != 0) ? lastElement.pop() : this.posObj.tags.pop();

	    if (lastElement.pos !== ".") {
	        if (implicitYou) {
	            this.senType = "COMMAND";
	        } else if (_(["WDT","WP","WP$","WRB"]).contains(this.posObj.tags[0].pos)) {
	            // Sentences that start with: who, what where when why and how, then they are questions
	            this.senType = "INTERROGATIVE";
	        } else if (_(["PRP"]).contains(lastElement.pos)) {
	            // Sentences that end in a Personal pronoun are most likely questions
	            // eg. We should run away, should we [?]
	            // eg. You want to see that again, do you [?]
	            this.senType = "INTERROGATIVE";
	        } else {
	            this.senType = "UNKNOWN";
	        }
	            
	    } else {
	        switch(lastElement.token) {
	            case "?": this.senType = "INTERROGATIVE"; break;
	            case "!": this.senType = (implicitYou) ? "COMMAND":"EXCLAMATORY"; break;
	            case ".": this.senType = (implicitYou) ? "COMMAND":"DECLARATIVE";	break;
	        }
	    }
	    
	    if (callback && _(callback).isFunction()) {
	        callback(this);
	    } else {
	        return this.senType;
	    }
	};

	module.exports = Sentences;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var EdgeWeightedDigraph = __webpack_require__(102),
	    Topological = __webpack_require__(104);

	/**
	  *  The ShortestPathTree represents a data type for solving the
	  *  single-source shortest paths problem in edge-weighted directed
	  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
	  *  This implementation uses a topological-sort based algorithm.
	  *  the distTo() and hasPathTo() methods take
	  *  constant time and the pathTo() method takes time proportional to the
	  *  number of edges in the longest path returned.
	  */
	var ShortestPathTree = function(digraph, start) {
	    var _this = this;
	    this.edgeTo = [];
	    this.distTo = [];
	    this.distTo[start] = 0.0;
	    this.start = start;
	    this.top = new Topological(digraph);
	    this.top.order().forEach(function(vertex){
	        _this.relaxVertex(digraph, vertex, _this);
	    });
	};

	ShortestPathTree.prototype.relaxEdge = function(e) {
	    var distTo = this.distTo,
	        edgeTo = this.edgeTo;
	    var v = e.from(), w = e.to();
	    if (distTo[w] > distTo[v] + e.weight) {
	        distTo[w] = distTo[v] + e.weight;
	        edgeTo[w] = e;
	    }
	};

	/**
	 * relax a vertex v in the specified digraph g
	 * @param {EdgeWeightedDigraph} the apecified digraph
	 * @param {Vertex} v vertex to be relaxed
	 */
	ShortestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
	    var distTo = tree.distTo;
	    var edgeTo = tree.edgeTo;
	    digraph.getAdj(vertex).forEach(function(edge){
	        var w = edge.to();
	        distTo[w] = /\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;
	        distTo[vertex] = distTo[vertex] || 0;
	        if (distTo[w] > distTo[vertex] + edge.weight) {
	            // in case of the result of 0.28+0.34 is 0.62000001
	            distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
	            edgeTo[w] = edge;
	        }
	    });

	};

	ShortestPathTree.prototype.getDistTo = function(v) {
	    return this.distTo[v];
	};

	ShortestPathTree.prototype.hasPathTo = function(v) {
	    var dist = this.distTo[v];
	    if(v == this.start) return false;
	    return /\d/.test(dist) ? dist != Number.MAX_VALUE : false;
	};

	ShortestPathTree.prototype.pathTo = function(v) {
	    if (!this.hasPathTo(v) || v == this.start) return [];
	    var path = [];
	    var edgeTo = this.edgeTo;
	    for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
	        path.push(e.to());
	    }
	    path.push(this.start);
	    return path.reverse();
	};

	module.exports = ShortestPathTree;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var util = __webpack_require__(10),
	    Bag = __webpack_require__(103);

	var DirectedEdge = function(start, end, weight) {
	    this.start = start;
	    this.end = end;
	    this.weight = weight;
	};

	DirectedEdge.prototype.weight = function() {
	    return this.weight;
	};

	DirectedEdge.prototype.from = function() {
	    return this.start;
	};

	DirectedEdge.prototype.to = function() {
	    return this.end;
	};

	DirectedEdge.prototype.toString = function() {
	    return util.format('%s -> %s, %s', this.start, this.end, this.weight);
	};

	var EdgeWeightedDigraph = function() {
	    this.edgesNum = 0;
	    this.adj = []; // adjacency list
	};

	/**
	 * the number of vertexs saved.
	 */
	EdgeWeightedDigraph.prototype.v = function() {
	    return this.adj.length;
	};

	/**
	 * the number of edges saved.
	 */
	EdgeWeightedDigraph.prototype.e = function() {
	    return this.edgesNum;
	};

	EdgeWeightedDigraph.prototype.add = function(start, end, weight) {
	    var e = new DirectedEdge(start, end, weight);
	    this.addEdge(e);
	};

	EdgeWeightedDigraph.prototype.addEdge = function(e) {
	    if(!this.adj[e.from()]) {
	        this.adj[e.from()] = new Bag();
	    }
	    this.adj[e.from()].add(e);
	    this.edgesNum++;
	};

	/**
	 * use callback on all edges from v.
	 */
	EdgeWeightedDigraph.prototype.getAdj = function(v) {
	    if(!this.adj[v]) return [];
	    return this.adj[v].unpack();
	};

	/**
	 * use callback on all edges.
	 */
	EdgeWeightedDigraph.prototype.edges = function() {
	    var adj = this.adj;
	    var list = new Bag();
	    for(var i in adj) {
	        adj[i].unpack().forEach(function(item) {
	            list.add(item);
	        });
	    }
	    return list.unpack();
	};

	EdgeWeightedDigraph.prototype.toString = function() {
	    var result = [];
	    var list = this.edges();
	    list.forEach(function(edge) {
	        result.push(edge.toString());
	    });
	    return result.join('\n');
	};

	module.exports = EdgeWeightedDigraph;


/***/ },
/* 103 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	function Bag() {
	    this.dictionary = [];
	    this.nElement = 0;
	};

	Bag.prototype.add = function(element) {
	    this.dictionary.push(element);
	    this.nElement++;
	    return this;
	};

	Bag.prototype.isEmpty = function() {
	    return this.nElement > 0;
	};

	Bag.prototype.contains = function(item) {
	    return this.dictionary.indexOf(item) >= 0;
	};

	/**
	 * unpack the bag , and get all items
	 */
	Bag.prototype.unpack = function() {
	    // return a copy is better than original
	    return this.dictionary.slice();
	};

	module.exports = Bag;


/***/ },
/* 104 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	/**
	 * a topo sort for a digraph
	 * @param {Digraph}
	 */
	var Topological = function(g) {
	    this.isDag = true;
	    this.sorted = topoSort(uniqueVertexs(g.edges()), g.edges());
	};

	Topological.prototype.isDAG = function() {
	    return this.isDag;
	};

	/**
	 * get ordered vertexs of digraph
	 */
	Topological.prototype.order = function() {
	    return this.sorted.slice();
	};

	/**
	 * @param {Array} all vertex in digraph
	 * @param {Object} all edges in the digraph
	 */
	function topoSort(vertexs, edges) {
	    var sorted = [];
	    var cursor = vertexs.length,
	        visited = {},
	        i = cursor;
	    while (i--) {
	        if (!visited[i]) visit(vertexs[i], i, []);
	    }

	    return sorted.reverse();

	    function visit(vertex, i, predecessors) {
	        if(predecessors.indexOf(vertex) >= 0) {
	            throw new Error('Cyclic dependency:' + JSON.stringify(vertex));
	        }

	        if(visited[i]) return;
	        visited[i] = true;

	        var outgoing = edges.filter(function(edge) {
	            return edge.to() === vertex;
	        });

	        var preds = [];
	        if(outgoing.length > 0) {
	            preds = predecessors.concat(vertex);
	        }
	        var from;
	        outgoing.forEach(function(edge) {
	            from = edge.from();
	            visit(from, vertexs.indexOf(from), preds);
	        });

	        sorted[--cursor] = vertex;
	    };
	};


	function uniqueVertexs(edges) {
	    var vertexs = [];
	    var from, to;
	    edges.forEach(function(edge) {
	        from = edge.from();
	        to = edge.to();
	        if (vertexs.indexOf(from) < 0) vertexs.push(from);
	        if (vertexs.indexOf(to) < 0) vertexs.push(to);
	    });
	    return vertexs;
	};

	module.exports = Topological;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	
	var Trie = __webpack_require__(99);

	// Probabilistic spellchecker based on http://norvig.com/spell-correct.html
	// The general idea is simple. Given a word, the spellchecker calculates all strings that are some user-defined edit distance away. Of those many candidates, it filters the ones that are not words and then returns an array of possible corrections in order of decreasing probability, based on the edit distance and the candidate's frequency in the input corpus
	// Words that are an edit distance of n away from the mispelled word are considered infinitely more probable than words that are of an edit distance >n

	// wordlist is a corpus (an array) from which word probabilities are calculated (so something like /usr/share/dict/words (on OSX) will work okay, but real world text will work better)
	function Spellcheck(wordlist) {
	    this.trie = new Trie();
	    this.trie.addStrings(wordlist);
	    this.word2frequency = {};
	    for(var i in wordlist) {
	        if(!this.word2frequency[wordlist[i]]) {
	            this.word2frequency[wordlist[i]] = 0;
	        }
	        this.word2frequency[wordlist[i]]++;
	    }
	}

	Spellcheck.prototype.isCorrect = function(word) {
	    return this.trie.contains(word);
	}

	// Returns a list of suggested corrections, from highest to lowest probability 
	// maxDistance is the maximum edit distance 
	// According to Norvig, literature suggests that 80% to 95% of spelling errors are an edit distance of 1 away from the correct word. This is good, because there are roughly 54n+25 strings 1 edit distance away from any given string of length n. So after maxDistance = 2, this becomes very slow.
	Spellcheck.prototype.getCorrections = function(word, maxDistance) {
	    var self = this;
	    if(!maxDistance) maxDistance = 1;
	    var edits = this.editsWithMaxDistance(word, maxDistance);
	    edits = edits.slice(1,edits.length);
	    edits = edits.map(function(editList) {
	       return editList.filter(function(word) { return self.isCorrect(word); })
	                      .map(function(word) { return [word, self.word2frequency[word]]; })
	                      .sort(function(a,b) { return a[1] > b[1] ? -1 : 1; })
	                      .map(function(wordscore) { return wordscore[0]; });
	    });
	    var flattened = [];
	    for(var i in edits) {
	        if(edits[i].length) flattened = flattened.concat(edits[i]);
	    }
	    return flattened.filter(function (v, i, a) { return a.indexOf(v) == i });
	}

	// Returns all edits that are 1 edit-distance away from the input word
	Spellcheck.prototype.edits = function(word) {
	    var alphabet = 'abcdefghijklmnopqrstuvwxyz';
	    var edits = [];
	    for(var i=0; i<word.length+1; i++) {
	        if(i>0) edits.push(word.slice(0,i-1)+word.slice(i,word.length)); // deletes
	        if(i>0 && i<word.length+1) edits.push(word.slice(0,i-1) + word.slice(i,i+1) + word.slice(i-1, i) + word.slice(i+1,word.length)); // transposes
	        for(var k=0; k<alphabet.length; k++) {
	            if(i>0) edits.push(word.slice(0,i-1)+alphabet[k]+word.slice(i,word.length)); // replaces
	            edits.push(word.slice(0,i)+alphabet[k]+word.slice(i,word.length)); // inserts
	        }
	    }
	    // Deduplicate edits
	    edits = edits.filter(function (v, i, a) { return a.indexOf(v) == i });
	    return edits;
	}

	// Returns all edits that are up to "distance" edit distance away from the input word
	Spellcheck.prototype.editsWithMaxDistance = function(word, distance) { 
	    return this.editsWithMaxDistanceHelper(distance, [[word]]);
	}

	Spellcheck.prototype.editsWithMaxDistanceHelper = function(distanceCounter, distance2edits) {
	    if(distanceCounter == 0) return distance2edits;
	    var currentDepth = distance2edits.length-1;
	    var words = distance2edits[currentDepth];
	    var edits = this.edits(words[0]);
	    distance2edits[currentDepth+1] = [];
	    for(var i in words) {
	        distance2edits[currentDepth+1] = distance2edits[currentDepth+1].concat(this.edits(words[i]));
	    }
	    return this.editsWithMaxDistanceHelper(distanceCounter-1, distance2edits);
	}

	module.exports = Spellcheck;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2014, Lee Wenzhu

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */
	'use strict';

	var EdgeWeightedDigraph = __webpack_require__(102),
	    Topological = __webpack_require__(104);

	/**
	  *  The LongestPathTree represents a data type for solving the
	  *  single-source longest paths problem in edge-weighted directed
	  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
	  *  This implementation uses a topological-sort based algorithm.
	  *  the distTo() and hasPathTo() methods take
	  *  constant time and the pathTo() method takes time proportional to the
	  *  number of edges in the longest path returned.
	  */
	var LongestPathTree = function(digraph, start) {
	    var _this = this;
	    this.edgeTo = [];
	    this.distTo = [];
	    this.distTo[start] = 0.0;
	    this.start = start;
	    this.top = new Topological(digraph);
	    this.top.order().forEach(function(vertex){
	        _this.relaxVertex(digraph, vertex, _this);
	    });
	};

	LongestPathTree.prototype.relaxEdge = function(e) {
	    var distTo = this.distTo,
	        edgeTo = this.edgeTo;
	    var v = e.from(), w = e.to();
	    if (distTo[w] < distTo[v] + e.weight) {
	        distTo[w] = distTo[v] + e.weight;
	        edgeTo[w] = e;
	    }
	};

	/**
	 * relax a vertex v in the specified digraph g
	 * @param {EdgeWeightedDigraph} the apecified digraph
	 * @param {Vertex} v vertex to be relaxed
	 */
	LongestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
	    var distTo = tree.distTo;
	    var edgeTo = tree.edgeTo;

	    digraph.getAdj(vertex).forEach(function(edge){
	        var w = edge.to();
	        distTo[w] = distTo[w] || 0.0;
	        distTo[vertex] = distTo[vertex] || 0.0;
	        if (distTo[w] < distTo[vertex] + edge.weight) {
	            // in case of the result of 0.28+0.34 is 0.62000001
	            distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
	            edgeTo[w] = edge;
	        }
	    });

	};

	LongestPathTree.prototype.getDistTo = function(v) {
	    return this.distTo[v];
	};

	LongestPathTree.prototype.hasPathTo = function(v) {
	    return !!this.distTo[v];
	};

	LongestPathTree.prototype.pathTo = function(v) {
	    if (!this.hasPathTo(v)) return [];
	    var path = [];
	    var edgeTo = this.edgeTo;
	    for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
	        path.push(e.to());
	    }
	    path.push(this.start);
	    return path.reverse();
	};

	module.exports = LongestPathTree;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2011, Rob Ellis, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(62)._,
	    Tokenizer = __webpack_require__(61).WordTokenizer,
	    tokenizer = new Tokenizer();

	exports.setTokenizer = function(t) {
	    if(!_.isFunction(t.tokenize))
	        throw new Error('Expected a valid Tokenizer');
	    tokenizer = t;
	}

	exports.ngrams = function(sequence, n, startSymbol, endSymbol) {
	    return ngrams(sequence, n, startSymbol, endSymbol);
	}

	exports.bigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 2, startSymbol, endSymbol);
	}

	exports.trigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 3, startSymbol, endSymbol);
	}

	exports.multrigrams = function(sequence, n, startSymbol, endSymbol) {
	    return ngrams(sequence, n, startSymbol, endSymbol);
	}

	var ngrams = function(sequence, n, startSymbol, endSymbol) {
	    var result = [];
	    
	    if (!_(sequence).isArray()) {
	        sequence = tokenizer.tokenize(sequence);
	    }

	    var count = _.max([0, sequence.length - n + 1]);

	    // Check for left padding    
	    if(typeof startSymbol !== "undefined" && startSymbol !== null) {
	        // Create an array of (n) start symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(startSymbol);
	        }

	        // Create the left padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
	        }
	    }

	    // Build the complete ngrams
	    for (var i = 0; i < count; i++) {
	        result.push(sequence.slice(i, i + n));
	    }

	    // Check for right padding
	    if(typeof endSymbol !== "undefined" && endSymbol !== null) {
	        // Create an array of (n) end symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(endSymbol);
	        }

	        // create the right padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
	        }
	    }
	    
	    return result;
	}



/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Lee Wenzhu

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	var _ = __webpack_require__(62)._;

	exports.ngrams = function(sequence, n, startSymbol, endSymbol) {
	    return ngrams(sequence, n, startSymbol, endSymbol);
	}

	exports.bigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 2, startSymbol, endSymbol);
	}

	exports.trigrams = function(sequence, startSymbol, endSymbol) {
	    return ngrams(sequence, 3, startSymbol, endSymbol);
	}

	var ngrams = function(sequence, n, startSymbol, endSymbol) {
	    var result = [], i;
	    
	    if (!_(sequence).isArray()) {
	        sequence = sequence.split('');
	    }

	    var count = _.max([0, sequence.length - n + 1]);

	    // Check for left padding    
	    if(typeof startSymbol !== "undefined" && startSymbol !== null) {
	        // Create an array of (n) start symbols
	        var blanks = [];
	        for(i = 0 ; i < n ; i++) {
	            blanks.push(startSymbol);
	        }

	        // Create the left padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
	        }
	    }

	    // Build the complete ngrams
	    for (i = 0; i < count; i++) {
	        result.push(sequence.slice(i, i + n));
	    }

	    // Check for right padding
	    if(typeof endSymbol !== "undefined" && endSymbol !== null) {
	        // Create an array of (n) end symbols
	        var blanks = [];
	        for(var i = 0 ; i < n ; i++) {
	            blanks.push(endSymbol);
	        }

	        // create the right padding
	        for(var p = n - 1 ; p > 0 ; p--) {
	            // Create a tuple of (p) start symbols and (n - p) words
	            result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
	        }
	    }
	    
	    return result;
	};



/***/ },
/* 109 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2012, Adam Phillabaum, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	Unless otherwise stated by a specific section of code

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// Computes the Jaro distance between two string -- intrepreted from:
	// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
	// s1 is the first string to compare
	// s2 is the second string to compare
	function distance(s1, s2) {
	    if (typeof(s1) != "string" || typeof(s2) != "string") return 0;
	    if (s1.length == 0 || s2.length == 0) 
	        return 0;
	    s1 = s1.toLowerCase(), s2 = s2.toLowerCase();
	    var matchWindow = (Math.floor(Math.max(s1.length, s2.length) / 2.0)) - 1;
	    var matches1 = new Array(s1.length);
	    var matches2 = new Array(s2.length);
	    var m = 0; // number of matches
	    var t = 0; // number of transpositions

	    //debug helpers
	    //console.log("s1: " + s1 + "; s2: " + s2);
	    //console.log(" - matchWindow: " + matchWindow);

	    // find matches
	    for (var i = 0; i < s1.length; i++) {
		var matched = false;

		// check for an exact match
		if (s1[i] ==  s2[i]) {
			matches1[i] = matches2[i] = matched = true;
			m++
		}

		// check the "match window"
		else {
	        	// this for loop is a little brutal
	        	for (k = (i <= matchWindow) ? 0 : i - matchWindow;
	        		(k <= i + matchWindow) && k < s2.length && !matched;
				k++) {
	            		if (s1[i] == s2[k]) {
	                		if(!matches1[i] && !matches2[k]) {
	                	    		m++;
	               		}

	        	        matches1[i] = matches2[k] = matched = true;
	        	    }
	        	}
		}
	    }

	    if(m == 0)
	        return 0.0;

	    // count transpositions
	    var k = 0;

	    for(var i = 0; i < s1.length; i++) {
	    	if(matches1[k]) {
	    	    while(!matches2[k] && k < matches2.length)
	                k++;
		        if(s1[i] != s2[k] &&  k < matches2.length)  {
	                t++;
	            }

	    	    k++;
	    	}
	    }
	    
	    //debug helpers:
	    //console.log(" - matches: " + m);
	    //console.log(" - transpositions: " + t);
	    t = t / 2.0;
	    return (m / s1.length + m / s2.length + (m - t) / m) / 3;
	}

	// Computes the Winkler distance between two string -- intrepreted from:
	// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
	// s1 is the first string to compare
	// s2 is the second string to compare
	// dj is the Jaro Distance (if you've already computed it), leave blank and the method handles it
	function JaroWinklerDistance(s1, s2, dj) {
			if (s1 == s2) {
					return 1 
			}
			else {
			    var jaro;
			    (typeof(dj) == 'undefined')? jaro = distance(s1,s2) : jaro = dj;
			    var p = 0.1; //
			    var l = 0 // length of the matching prefix
			    while(s1[l] == s2[l] && l < 4)
			        l++;
			    
			    return jaro + l * p * (1 - jaro);
			}
	}
	module.exports = JaroWinklerDistance;


/***/ },
/* 110 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2012, Sid Nallu, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	 * contribution by sidred123
	 */

	/*
	 * Compute the Levenshtein distance between two strings.
	 * Algorithm based from Speech and Language Processing - Daniel Jurafsky and James H. Martin.
	 */

	function LevenshteinDistance (source, target, options) {
	    options = options || {};
	    if(isNaN(options.insertion_cost)) options.insertion_cost = 1;
	    if(isNaN(options.deletion_cost)) options.deletion_cost = 1;
	    if(isNaN(options.substitution_cost)) options.substitution_cost = 1;

	    var sourceLength = source.length;
	    var targetLength = target.length;
	    var distanceMatrix = [[0]];

	    for (var row =  1; row <= sourceLength; row++) {
	        distanceMatrix[row] = [];
	        distanceMatrix[row][0] = distanceMatrix[row-1][0] + options.deletion_cost;
	    }

	    for (var column = 1; column <= targetLength; column++) {
	        distanceMatrix[0][column] = distanceMatrix[0][column-1] + options.insertion_cost;
	    }

	    for (var row = 1; row <= sourceLength; row++) {
	        for (var column = 1; column <= targetLength; column++) {
	            var costToInsert = distanceMatrix[row][column-1] + options.insertion_cost;
	            var costToDelete = distanceMatrix[row-1][column] + options.deletion_cost;

	            var sourceElement = source[row-1];
	            var targetElement = target[column-1];
	            var costToSubstitute = distanceMatrix[row-1][column-1];
	            if (sourceElement !== targetElement) {
	                costToSubstitute = costToSubstitute + options.substitution_cost;
	            }
	            distanceMatrix[row][column] = Math.min(costToInsert, costToDelete, costToSubstitute);
	        }
	    }
	    return distanceMatrix[sourceLength][targetLength];
	}

	module.exports = LevenshteinDistance;


/***/ },
/* 111 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2011, John Crepezzi, Chris Umbel

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	// Get all of the pairs of letters for a string
	var letterPairs = function (str) {
	  var numPairs = str.length - 1;
	  var pairs = new Array(numPairs);
	  for (var i = 0; i < numPairs; i++) {
	    pairs[i] = str.substring(i, i + 2);
	  }
	  return pairs;
	};

	// Get all of the pairs in all of the words for a string
	var wordLetterPairs = function (str) {
	  var allPairs = [], pairs;
	  var words = str.split(/\s+/);
	  for (var i = 0; i < words.length; i++) {
	    pairs = letterPairs(words[i]);
	    allPairs.push.apply(allPairs, pairs);
	  }
	  return allPairs;
	};

	// Perform some sanitization steps
	var sanitize = function (str) {
	  return str.toLowerCase().replace(/^\s+|\s+$/g, '');
	};

	// Compare two strings, and spit out a number from 0-1
	var compare = function (str1, str2) {
	  var sanitized_str1 = sanitize(str1);
	  var sanitized_str2 = sanitize(str2);
	  var pairs1 = wordLetterPairs(sanitized_str1);
	  var pairs2 = wordLetterPairs(sanitized_str2);
	  var intersection = 0, union = pairs1.length + pairs2.length;
	  if (union === 0) {
	      if (sanitized_str1 === sanitized_str2) {
	          return 1;
	      } else {
	          return 0;
	      }
	  } else {
	    var i, j, pair1, pair2;
	    for (i = 0; i < pairs1.length; i++) {
	      pair1 = pairs1[i];
	      for (j = 0; j < pairs2.length; j++) {
	        pair2 = pairs2[j];
	        if (pair1 == pair2) {
	          intersection ++;
	          delete pairs2[j];
	          break;
	        }
	      }
	    }
	    return 2 * intersection / union;
	  }
	};

	module.exports = compare;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2013, Kenneth Koch

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * The english normalizer will create a string in which all contractions are expanded to their 
	 * full meaning (i.e. "we'll" becomes "we will"). 
	 *
	 * It currently works off a conversion table and falls back to a set of rules.
	 * Since it is applied first, the conversion table provides an "override" for the rules.
	 **/
	var replacer = __webpack_require__(57).replacer;

	var conversionTable = {
		"can't":"can not",
		"won't":"will not",
		"couldn't've":"could not have",
		"i'm":"I am",
		"how'd":"how did"
	};

	var rules = [
		{ regex: /([azAZ]*)n\'[tT]/g, output: "$1 not" },
		{ regex: /([azAZ]*)\'[sS]/g, output: "$1 is" },
		{ regex: /([azAZ]*)\'[lL][lL]/g, output: "$1 will" },
		{ regex: /([azAZ]*)\'[rR][eE]/g, output: "$1 are" },
		{ regex: /([azAZ]*)\'[vV][eE]/g, output: "$1 have" },
		{ regex: /([azAZ]*)\'[dD]/g, output: "$1 would" }
	];

	// Accepts a list of tokens to expand.
	var normalize_tokens = function(tokens) {
		if(typeof tokens === "string") {
			tokens = [tokens];
		}
	        var results = [];
		var rule_count = rules.length;
		var num_tokens = tokens.length;
	        var i, token, r, rule;
	    
	        for (i = 0; i < num_tokens; i++) {
	            token = tokens[i];
	            // Check the conversion table
	            if (conversionTable[token.toLowerCase()]) {
	                results = results.concat(conversionTable[token.toLowerCase()].split(/\W+/));
	            }
	            
	            // Apply the rules
	            else {
	                var matched = false;
	                for ( r = 0; r < rule_count; r++) {
	                    rule = rules[r];
	                    if (token.match(rule.regex)) {
	                        results = results.concat(token.replace(rule.regex, rule.output).split(/\W+/));
	                        matched = true;
	                        break;
	                    }
	                }
	                if (!matched) {
	                    results.push(token);
	                }
	            }
	        }

		return results;
	};





	// export the relevant stuff.
	exports.normalize_tokens = normalize_tokens;






/***/ },
/* 113 */
/***/ function(module, exports) {

	/*
	 Copyright (c) 2012, Alexy Maslennikov

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * Script to remove diacritics. Original source was taken from
	 * http://lehelk.com/2011/05/06/script-to-remove-diacritics/
	 */
	var diacriticsRemovalMap = [
	    {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
	    {'base':'AA','letters':/[\uA732]/g},
	    {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
	    {'base':'AO','letters':/[\uA734]/g},
	    {'base':'AU','letters':/[\uA736]/g},
	    {'base':'AV','letters':/[\uA738\uA73A]/g},
	    {'base':'AY','letters':/[\uA73C]/g},
	    {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
	    {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
	    {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
	    {'base':'DZ','letters':/[\u01F1\u01C4]/g},
	    {'base':'Dz','letters':/[\u01F2\u01C5]/g},
	    {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
	    {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
	    {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
	    {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
	    {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
	    {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
	    {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
	    {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
	    {'base':'LJ','letters':/[\u01C7]/g},
	    {'base':'Lj','letters':/[\u01C8]/g},
	    {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
	    {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
	    {'base':'NJ','letters':/[\u01CA]/g},
	    {'base':'Nj','letters':/[\u01CB]/g},
	    {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
	    {'base':'OI','letters':/[\u01A2]/g},
	    {'base':'OO','letters':/[\uA74E]/g},
	    {'base':'OU','letters':/[\u0222]/g},
	    {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
	    {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
	    {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
	    {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
	    {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
	    {'base':'TZ','letters':/[\uA728]/g},
	    {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
	    {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
	    {'base':'VY','letters':/[\uA760]/g},
	    {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
	    {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
	    {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
	    {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
	    {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
	    {'base':'aa','letters':/[\uA733]/g},
	    {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
	    {'base':'ao','letters':/[\uA735]/g},
	    {'base':'au','letters':/[\uA737]/g},
	    {'base':'av','letters':/[\uA739\uA73B]/g},
	    {'base':'ay','letters':/[\uA73D]/g},
	    {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
	    {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
	    {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
	    {'base':'dz','letters':/[\u01F3\u01C6]/g},
	    {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
	    {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
	    {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
	    {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
	    {'base':'hv','letters':/[\u0195]/g},
	    {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
	    {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
	    {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
	    {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
	    {'base':'lj','letters':/[\u01C9]/g},
	    {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
	    {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
	    {'base':'nj','letters':/[\u01CC]/g},
	    {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
	    {'base':'oi','letters':/[\u01A3]/g},
	    {'base':'ou','letters':/[\u0223]/g},
	    {'base':'oo','letters':/[\uA74F]/g},
	    {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
	    {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
	    {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
	    {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
	    {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
	    {'base':'tz','letters':/[\uA729]/g},
	    {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
	    {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
	    {'base':'vy','letters':/[\uA761]/g},
	    {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
	    {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
	    {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
	    {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
	];


	module.exports = function(str) {
		var rules = diacriticsRemovalMap;
		for (var i = 0; i < rules.length; i++) {
			str = str.replace(rules[i].letters, rules[i].base);
		}
		return str;
	};


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 Copyright (c) 2012, Guillaume Marty

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 THE SOFTWARE.
	 */

	/**
	 * A transliteration of Katakana & Hiragana to roman characters using the
	 * modified Hepburn system.
	 * Rules based on CLDR transform rule set `Katakana-Latin-BGN.xml` but with
	 * several bugs fixed:
	 *  * Missing ū
	 *  * Missing tsu + voiced kana
	 *  * typos on my~ transliterations
	 *  * support for long vowel sign
	 *  * support for final small tsu
	 *  * support for u + small vowels
	 *  * support for su/shi/ji + small vowels
	 *  * support for tchi/tsu/te/to + small vowels
	 *  * support for fu + small vowels
	 *  * support for katakana middle dot
	 *
	 * \@todo Take iteration marks into account.
	 */

	var replacer = __webpack_require__(57).replacer;

	var transliterationTable1 = {
	  'ウァ': 'wa', // KATAKANA LETTER U + SMALL A
	  'ウィ': 'wi', // KATAKANA LETTER U + SMALL I
	  'ウェ': 'we', // KATAKANA LETTER U + SMALL E
	  'ウォ': 'wo', // KATAKANA LETTER U + SMALL O
	  'ウー': 'ū', // KATAKANA LETTER VU + PROLONGED SOUND MARK

	  'ヴァ': 'va', // KATAKANA LETTER VU + SMALL A
	  'ヴィ': 'vi', // KATAKANA LETTER VU + SMALL I
	  'ヴェ': 've', // KATAKANA LETTER VU + SMALL E
	  'ヴォ': 'vo', // KATAKANA LETTER VU + SMALL O
	  'ヴュ': 'vyu', // KATAKANA LETTER VU + SMALL YU

	  'うぁ': 'wa', // HIRAGANA LETTER U + SMALL A
	  'うぃ': 'wi', // HIRAGANA LETTER U + SMALL I
	  'うぇ': 'we', // HIRAGANA LETTER U + SMALL E
	  'うぉ': 'wo', // HIRAGANA LETTER U + SMALL O
	  'うー': 'ū', // HIRAGANA LETTER VU + PROLONGED SOUND MARK

	  'ゔぁ': 'va', // HIRAGANA LETTER VU + SMALL A
	  'ゔぃ': 'vi', // HIRAGANA LETTER VU + SMALL I
	  'ゔぇ': 've', // HIRAGANA LETTER VU + SMALL E
	  'ゔぉ': 'vo', // HIRAGANA LETTER VU + SMALL O
	  'ゔゅ': 'vyu' // HIRAGANA LETTER VU + SMALL YU
	};

	var transliterationTable2 = {
	  'イェ': 'ye', // KATAKANA LETTER I + SMALL E

	  'ア': 'a', // KATAKANA LETTER A
	  'イ': 'i', // KATAKANA LETTER I
	  'ウウ': 'ū', // KATAKANA LETTER U + U
	  'ウ': 'u', // KATAKANA LETTER U
	  'エ': 'e', // KATAKANA LETTER E
	  'オウ': 'ō', // KATAKANA LETTER O + U
	  'オ': 'o', // KATAKANA LETTER O

	  'クァ': 'kwa', // KATAKANA LETTER KU + SMALL A
	  'クィ': 'kwi', // KATAKANA LETTER KU + SMALL I
	  'クェ': 'kwe', // KATAKANA LETTER KU + SMALL E
	  'クォ': 'kwo', // KATAKANA LETTER KU + SMALL O

	  'カ': 'ka', // KATAKANA LETTER KA
	  'キョウ': 'kyō', // KATAKANA LETTER KI + SMALL YO + U
	  'キュウ': 'kyū', // KATAKANA LETTER KI + SMALL YU + U
	  'キャ': 'kya', // KATAKANA LETTER KI + SMALL YA
	  'キョ': 'kyo', // KATAKANA LETTER KI + SMALL YO
	  'キュ': 'kyu', // KATAKANA LETTER KI + SMALL YU
	  'キ': 'ki', // KATAKANA LETTER KI
	  'ク': 'ku', // KATAKANA LETTER KU
	  'ケ': 'ke', // KATAKANA LETTER KE
	  'コウ': 'kō', // KATAKANA LETTER KO + U
	  'コ': 'ko', // KATAKANA LETTER KO

	  'シェ': 'she', // KATAKANA LETTER SI + SMALL E
	  'スィ': 'si', // KATAKANA LETTER SU + SMALL I

	  'サ': 'sa', // KATAKANA LETTER SA
	  'ショウ': 'shō', // KATAKANA LETTER SI + SMALL YO + U
	  'シュウ': 'shū', // KATAKANA LETTER SI + SMALL YU + U
	  'シャ': 'sha', // KATAKANA LETTER SI + SMALL YA
	  'ショ': 'sho', // KATAKANA LETTER SI + SMALL YO
	  'シュ': 'shu', // KATAKANA LETTER SI + SMALL YU
	  'シ': 'shi', // KATAKANA LETTER SI
	  'スウ': 'sū', // KATAKANA LETTER SU + U
	  'ス': 'su', // KATAKANA LETTER SU
	  'セ': 'se', // KATAKANA LETTER SE
	  'ソウ': 'sō', // KATAKANA LETTER SO + U
	  'ソ': 'so', // KATAKANA LETTER SO

	  'チェ': 'che', // KATAKANA LETTER TI + SMALL E
	  'ツァ': 'tsa', // KATAKANA LETTER TU + SMALL A
	  'ツィ': 'tsi', // KATAKANA LETTER TU + SMALL I
	  'ツェ': 'tse', // KATAKANA LETTER TU + SMALL E
	  'ツォ': 'tso', // KATAKANA LETTER TU + SMALL O
	  'ティ': 'ti', // KATAKANA LETTER TE + SMALL I
	  'ディ': 'di', // KATAKANA LETTER DE + SMALL I
	  'テュ': 'tyu', // KATAKANA LETTER TE + SMALL YU
	  'デュ': 'dyu', // KATAKANA LETTER DE + SMALL YU
	  'トィ': 'twi', // KATAKANA LETTER TO + SMALL I
	  'トゥ': 'tu', // KATAKANA LETTER TO + SMALL U
	  'ドィ': 'dwi', // KATAKANA LETTER DO + SMALL I
	  'ドゥ': 'du', // KATAKANA LETTER DO + SMALL U

	  'タ': 'ta', // KATAKANA LETTER TA
	  'チョウ': 'chō', // KATAKANA LETTER TI + SMALL YO + U
	  'チュウ': 'chū', // KATAKANA LETTER TI + SMALL YU + U
	  'チャ': 'cha', // KATAKANA LETTER TI + SMALL YA
	  'チョ': 'cho', // KATAKANA LETTER TI + SMALL YO
	  'チュ': 'chu', // KATAKANA LETTER TI + SMALL YU
	  'チ': 'chi', // KATAKANA LETTER TI
	  'ツウ': 'tsū', // KATAKANA LETTER TU + U
	  'ツ': 'tsu', // KATAKANA LETTER TU
	  'テ': 'te', // KATAKANA LETTER TE
	  'トウ': 'tō', // KATAKANA LETTER TO + U
	  'ト': 'to', // KATAKANA LETTER TO

	  'ナ': 'na', // KATAKANA LETTER NA
	  'ニョウ': 'nyō', // KATAKANA LETTER NI + SMALL YO + U
	  'ニュウ': 'nyū', // KATAKANA LETTER NI + SMALL YU + U
	  'ニャ': 'nya', // KATAKANA LETTER NI + SMALL YA
	  'ニョ': 'nyo', // KATAKANA LETTER NI + SMALL YO
	  'ニュ': 'nyu', // KATAKANA LETTER NI + SMALL YU
	  'ニ': 'ni', // KATAKANA LETTER NI
	  'ヌウ': 'nū', // KATAKANA LETTER NU + U
	  'ヌ': 'nu', // KATAKANA LETTER NU
	  'ネ': 'ne', // KATAKANA LETTER NE
	  'ノウ': 'nō', // KATAKANA LETTER NO + U
	  'ノ': 'no', // KATAKANA LETTER NO

	  'ファ': 'fa', // KATAKANA LETTER HU + SMALL A
	  'フィ': 'fi', // KATAKANA LETTER HU + SMALL I
	  //'フゥ': 'fu', // KATAKANA LETTER HU + SMALL U
	  'フェ': 'fe', // KATAKANA LETTER HU + SMALL E
	  'フォ': 'fo', // KATAKANA LETTER HU + SMALL O
	  'フュ': 'fyu', // KATAKANA LETTER HU + SMALL YU
	  'ホェ': 'hwe', // KATAKANA LETTER HO + SMALL E

	  'ハ': 'ha', // KATAKANA LETTER HA
	  'ヒョウ': 'hyō', // KATAKANA LETTER HI + SMALL YO + U
	  'ヒュウ': 'hyū', // KATAKANA LETTER HI + SMALL YU + U
	  'ヒャ': 'hya', // KATAKANA LETTER HI + SMALL YA
	  'ヒョ': 'hyo', // KATAKANA LETTER HI + SMALL YO
	  'ヒュ': 'hyu', // KATAKANA LETTER HI + SMALL YU
	  'ヒ': 'hi', // KATAKANA LETTER HI
	  'フウ': 'fū', // KATAKANA LETTER HU + U
	  'フ': 'fu', // KATAKANA LETTER HU
	  'ヘ': 'he', // KATAKANA LETTER HE
	  'ホウ': 'hō', // KATAKANA LETTER HO + U
	  'ホ': 'ho', // KATAKANA LETTER HO

	  'マ': 'ma', // KATAKANA LETTER MA
	  'ミョウ': 'myō', // KATAKANA LETTER MI + SMALL YO + U
	  'ミュウ': 'myū', // KATAKANA LETTER MI + SMALL YU + U
	  'ミャ': 'mya', // KATAKANA LETTER MI + SMALL YA
	  'ミョ': 'myo', // KATAKANA LETTER MI + SMALL YO
	  'ミュ': 'myu', // KATAKANA LETTER MI + SMALL YU
	  'ミ': 'mi', // KATAKANA LETTER MI
	  'ムウ': 'mū', // KATAKANA LETTER MU + U
	  'ム': 'mu', // KATAKANA LETTER MU
	  'メ': 'me', // KATAKANA LETTER ME
	  'モウ': 'mō', // KATAKANA LETTER MO + U
	  'モ': 'mo', // KATAKANA LETTER MO

	  'ヤ': 'ya', // KATAKANA LETTER YA
	  'ユウ': 'yū', // KATAKANA LETTER YU + U
	  'ユ': 'yu', // KATAKANA LETTER YU
	  'ヨウ': 'yō', // KATAKANA LETTER YO + U
	  'ヨ': 'yo', // KATAKANA LETTER YO

	  'リェ': 'rye', // KATAKANA LETTER RI + SMALL E

	  'ラ': 'ra', // KATAKANA LETTER RA
	  'リョウ': 'ryō', // KATAKANA LETTER RI + SMALL YO + U
	  'リュウ': 'ryū', // KATAKANA LETTER RI + SMALL YU + U
	  'リャ': 'rya', // KATAKANA LETTER RI + SMALL YA
	  'リョ': 'ryo', // KATAKANA LETTER RI + SMALL YO
	  'リュ': 'ryu', // KATAKANA LETTER RI + SMALL YU
	  'リ': 'ri', // KATAKANA LETTER RI
	  'ルウ': 'rū', // KATAKANA LETTER RU + U
	  'ル': 'ru', // KATAKANA LETTER RU
	  'レ': 're', // KATAKANA LETTER RE
	  'ロウ': 'rō', // KATAKANA LETTER RO + U
	  'ロ': 'ro', // KATAKANA LETTER RO

	  'ワ': 'wa', // KATAKANA LETTER WA
	  'ヰ': 'i', // KATAKANA LETTER WI
	  'ヱ': 'e', // KATAKANA LETTER WE
	  'ヲ': 'o', // KATAKANA LETTER WO

	  'ン': 'n', // KATAKANA LETTER N

	  'グァ': 'gwa', // KATAKANA LETTER GU + SMALL A
	  'グィ': 'gwi', // KATAKANA LETTER GU + SMALL I
	  'グェ': 'gwe', // KATAKANA LETTER GU + SMALL E
	  'グォ': 'gwo', // KATAKANA LETTER GU + SMALL O

	  'ガ': 'ga', // KATAKANA LETTER GA
	  'ギョウ': 'gyō', // KATAKANA LETTER GI + SMALL YO + U
	  'ギュウ': 'gyū', // KATAKANA LETTER GI + SMALL YU + U
	  'ギャ': 'gya', // KATAKANA LETTER GI + SMALL YA
	  'ギョ': 'gyo', // KATAKANA LETTER GI + SMALL YO
	  'ギュ': 'gyu', // KATAKANA LETTER GI + SMALL YU
	  'ギ': 'gi', // KATAKANA LETTER GI
	  'グウ': 'gū', // KATAKANA LETTER GU + U
	  'グ': 'gu', // KATAKANA LETTER GU
	  'ゲ': 'ge', // KATAKANA LETTER GE
	  'ゴウ': 'gō', // KATAKANA LETTER GO + U
	  'ゴ': 'go', // KATAKANA LETTER GO

	  'ジェ': 'je', // KATAKANA LETTER ZI + SMALL E
	  'ズィ': 'zi', // KATAKANA LETTER ZU + SMALL I

	  'ザ': 'za', // KATAKANA LETTER ZA
	  'ジョウ': 'jō', // KATAKANA LETTER ZI + SMALL YO + U
	  'ジュウ': 'jū', // KATAKANA LETTER ZI + SMALL YU + U
	  'ジャ': 'ja', // KATAKANA LETTER ZI + SMALL YA
	  'ジョ': 'jo', // KATAKANA LETTER ZI + SMALL YO
	  'ジュ': 'ju', // KATAKANA LETTER ZI + SMALL YU
	  'ジ': 'ji', // KATAKANA LETTER ZI
	  'ズウ': 'zū', // KATAKANA LETTER ZU + U
	  'ズ': 'zu', // KATAKANA LETTER ZU
	  'ゼ': 'ze', // KATAKANA LETTER ZE
	  'ゾウ': 'zō', // KATAKANA LETTER ZO + U
	  'ゾ': 'zo', // KATAKANA LETTER ZO

	  'ダ': 'da', // KATAKANA LETTER DA
	  'ヂ': 'ji', // KATAKANA LETTER DI
	  'ヅウ': 'zū', // KATAKANA LETTER DU + U
	  'ヅ': 'zu', // KATAKANA LETTER DU
	  'デ': 'de', // KATAKANA LETTER DE
	  'ドウ': 'dō', // KATAKANA LETTER DO + U
	  'ド': 'do', // KATAKANA LETTER DO

	  'ブュ': 'byu', // KATAKANA LETTER BU + SMALL YU

	  'バ': 'ba', // KATAKANA LETTER BA
	  'ビョウ': 'byō', // KATAKANA LETTER BI + SMALL YO + U
	  'ビュウ': 'byū', // KATAKANA LETTER BI + SMALL YU + U
	  'ビャ': 'bya', // KATAKANA LETTER BI + SMALL YA
	  'ビョ': 'byo', // KATAKANA LETTER BI + SMALL YO
	  'ビュ': 'byu', // KATAKANA LETTER BI + SMALL YU
	  'ビ': 'bi', // KATAKANA LETTER BI
	  'ブウ': 'bū', // KATAKANA LETTER BU + U
	  'ブ': 'bu', // KATAKANA LETTER BU
	  'ベ': 'be', // KATAKANA LETTER BE
	  'ボウ': 'bō', // KATAKANA LETTER BO + U
	  'ボ': 'bo', // KATAKANA LETTER BO

	  'パ': 'pa', // KATAKANA LETTER PA
	  'ピョウ': 'pyō', // KATAKANA LETTER PI + SMALL YO + U
	  'ピュウ': 'pyū', // KATAKANA LETTER PI + SMALL YU + U
	  'ピャ': 'pya', // KATAKANA LETTER PI + SMALL YA
	  'ピョ': 'pyo', // KATAKANA LETTER PI + SMALL YO
	  'ピュ': 'pyu', // KATAKANA LETTER PI + SMALL YU
	  'ピ': 'pi', // KATAKANA LETTER PI
	  'プウ': 'pū', // KATAKANA LETTER PU + U
	  'プ': 'pu', // KATAKANA LETTER PU
	  'ペ': 'pe', // KATAKANA LETTER PE
	  'ポウ': 'pō', // KATAKANA LETTER PO + U
	  'ポ': 'po', // KATAKANA LETTER PO

	  'ヴ': 'v', // KATAKANA LETTER VU

	  '・': ' ', // KATAKANA MIDDLE DOT

	  'いぇ': 'ye', // HIRAGANA LETTER I + SMALL E

	  'あ': 'a', // HIRAGANA LETTER A
	  'い': 'i', // HIRAGANA LETTER I
	  'うう': 'ū', // HIRAGANA LETTER U + U
	  'う': 'u', // HIRAGANA LETTER U
	  'え': 'e', // HIRAGANA LETTER E
	  'おう': 'ō', // HIRAGANA LETTER O + U
	  'お': 'o', // HIRAGANA LETTER O

	  'くぁ': 'kwa', // HIRAGANA LETTER KU + SMALL A
	  'くぃ': 'kwi', // HIRAGANA LETTER KU + SMALL I
	  'くぇ': 'kwe', // HIRAGANA LETTER KU + SMALL E
	  'くぉ': 'kwo', // HIRAGANA LETTER KU + SMALL O

	  'か': 'ka', // HIRAGANA LETTER KA
	  'きょう': 'kyō', // HIRAGANA LETTER KI + SMALL YO + U
	  'きゅう': 'kyū', // HIRAGANA LETTER KI + SMALL YU + U
	  'きゃ': 'kya', // HIRAGANA LETTER KI + SMALL YA
	  'きょ': 'kyo', // HIRAGANA LETTER KI + SMALL YO
	  'きゅ': 'kyu', // HIRAGANA LETTER KI + SMALL YU
	  'き': 'ki', // HIRAGANA LETTER KI
	  'くう': 'kū', // HIRAGANA LETTER KU + U
	  'く': 'ku', // HIRAGANA LETTER KU
	  'け': 'ke', // HIRAGANA LETTER KE
	  'こう': 'kō', // HIRAGANA LETTER KO + U
	  'こ': 'ko', // HIRAGANA LETTER KO

	  'しぇ': 'she', // HIRAGANA LETTER SI + SMALL E
	  'すぃ': 'si', // HIRAGANA LETTER SU + SMALL I

	  'さ': 'sa', // HIRAGANA LETTER SA
	  'しょう': 'shō', // HIRAGANA LETTER SI + SMALL YO + U
	  'しゅう': 'shū', // HIRAGANA LETTER SI + SMALL YU + U
	  'しゃ': 'sha', // HIRAGANA LETTER SI + SMALL YA
	  'しょ': 'sho', // HIRAGANA LETTER SI + SMALL YO
	  'しゅ': 'shu', // HIRAGANA LETTER SI + SMALL YU
	  'し': 'shi', // HIRAGANA LETTER SI
	  'すう': 'sū', // HIRAGANA LETTER SU + U
	  'す': 'su', // HIRAGANA LETTER SU
	  'せ': 'se', // HIRAGANA LETTER SE
	  'そう': 'sō', // HIRAGANA LETTER SO + U
	  'そ': 'so', // HIRAGANA LETTER SO

	  'ちぇ': 'che', // HIRAGANA LETTER TI + SMALL E
	  'つぁ': 'tsa', // HIRAGANA LETTER TU + SMALL A
	  'つぃ': 'tsi', // HIRAGANA LETTER TU + SMALL I
	  'つぇ': 'tse', // HIRAGANA LETTER TU + SMALL E
	  'つぉ': 'tso', // HIRAGANA LETTER TU + SMALL O
	  'てぃ': 'ti', // HIRAGANA LETTER TE + SMALL I
	  'でぃ': 'di', // HIRAGANA LETTER DE + SMALL I
	  'てゅ': 'tyu', // HIRAGANA LETTER TE + SMALL YU
	  'でゅ': 'dyu', // HIRAGANA LETTER DE + SMALL YU
	  'とぃ': 'twi', // HIRAGANA LETTER TO + SMALL I
	  'とぅ': 'tu', // HIRAGANA LETTER TO + SMALL U
	  'どぃ': 'dwi', // HIRAGANA LETTER DO + SMALL I
	  'どぅ': 'du', // HIRAGANA LETTER DO + SMALL U

	  'た': 'ta', // HIRAGANA LETTER TA
	  'ちょう': 'chō', // HIRAGANA LETTER TI + SMALL YO + U
	  'ちゅう': 'chū', // HIRAGANA LETTER TI + SMALL YU + U
	  'ちゃ': 'cha', // HIRAGANA LETTER TI + SMALL YA
	  'ちょ': 'cho', // HIRAGANA LETTER TI + SMALL YO
	  'ちゅ': 'chu', // HIRAGANA LETTER TI + SMALL YU
	  'ち': 'chi', // HIRAGANA LETTER TI
	  'つう': 'tsū', // HIRAGANA LETTER TU + U
	  'つ': 'tsu', // HIRAGANA LETTER TU
	  'て': 'te', // HIRAGANA LETTER TE
	  'とう': 'tō', // HIRAGANA LETTER TO + U
	  'と': 'to', // HIRAGANA LETTER TO

	  'な': 'na', // HIRAGANA LETTER NA
	  'にょう': 'nyō', // HIRAGANA LETTER NI + SMALL YO + U
	  'にゅう': 'nyū', // HIRAGANA LETTER NI + SMALL YU + U
	  'にゃ': 'nya', // HIRAGANA LETTER NI + SMALL YA
	  'にょ': 'nyo', // HIRAGANA LETTER NI + SMALL YO
	  'にゅ': 'nyu', // HIRAGANA LETTER NI + SMALL YU
	  'に': 'ni', // HIRAGANA LETTER NI
	  'ぬう': 'nū', // HIRAGANA LETTER NU + U
	  'ぬ': 'nu', // HIRAGANA LETTER NU
	  'ね': 'ne', // HIRAGANA LETTER NE
	  'のう': 'nō', // HIRAGANA LETTER NO + U
	  'の': 'no', // HIRAGANA LETTER NO

	  'ふぁ': 'fa', // HIRAGANA LETTER HU + SMALL A
	  'ふぃ': 'fi', // HIRAGANA LETTER HU + SMALL I
	  //'ふぅ': 'fu', // HIRAGANA LETTER HU + SMALL U
	  'ふぇ': 'fe', // HIRAGANA LETTER HU + SMALL E
	  'ふぉ': 'fo', // HIRAGANA LETTER HU + SMALL O
	  'ふゅ': 'fyu', // HIRAGANA LETTER HU + SMALL YU
	  'ほぇ': 'hwe', // HIRAGANA LETTER HO + SMALL E

	  'は': 'ha', // HIRAGANA LETTER HA
	  'ひょう': 'hyō', // HIRAGANA LETTER HI + SMALL YO + U
	  'ひゅう': 'hyū', // HIRAGANA LETTER HI + SMALL YU + U
	  'ひゃ': 'hya', // HIRAGANA LETTER HI + SMALL YA
	  'ひょ': 'hyo', // HIRAGANA LETTER HI + SMALL YO
	  'ひゅ': 'hyu', // HIRAGANA LETTER HI + SMALL YU
	  'ひ': 'hi', // HIRAGANA LETTER HI
	  'ふう': 'fū', // HIRAGANA LETTER HU + U
	  'ふ': 'fu', // HIRAGANA LETTER HU
	  'へ': 'he', // HIRAGANA LETTER HE
	  'ほう': 'hō', // HIRAGANA LETTER HO + U
	  'ほ': 'ho', // HIRAGANA LETTER HO

	  'ま': 'ma', // HIRAGANA LETTER MA
	  'みょう': 'myō', // HIRAGANA LETTER MI + SMALL YO + U
	  'みゅう': 'myū', // HIRAGANA LETTER MI + SMALL YU + U
	  'みゃ': 'mya', // HIRAGANA LETTER MI + SMALL YA
	  'みょ': 'myo', // HIRAGANA LETTER MI + SMALL YO
	  'みゅ': 'myu', // HIRAGANA LETTER MI + SMALL YU
	  'み': 'mi', // HIRAGANA LETTER MI
	  'むう': 'mū', // HIRAGANA LETTER MU + U
	  'む': 'mu', // HIRAGANA LETTER MU
	  'め': 'me', // HIRAGANA LETTER ME
	  'もう': 'mō', // HIRAGANA LETTER MO + U
	  'も': 'mo', // HIRAGANA LETTER MO

	  'や': 'ya', // HIRAGANA LETTER YA
	  'ゆう': 'yū', // HIRAGANA LETTER YU + U
	  'ゆ': 'yu', // HIRAGANA LETTER YU
	  'よう': 'yō', // HIRAGANA LETTER YO + U
	  'よ': 'yo', // HIRAGANA LETTER YO

	  'りぇ': 'rye', // HIRAGANA LETTER RI + SMALL E

	  'ら': 'ra', // HIRAGANA LETTER RA
	  'りょう': 'ryō', // HIRAGANA LETTER RI + SMALL YO + U
	  'りゅう': 'ryū', // HIRAGANA LETTER RI + SMALL YU + U
	  'りゃ': 'rya', // HIRAGANA LETTER RI + SMALL YA
	  'りょ': 'ryo', // HIRAGANA LETTER RI + SMALL YO
	  'りゅ': 'ryu', // HIRAGANA LETTER RI + SMALL YU
	  'り': 'ri', // HIRAGANA LETTER RI
	  'るう': 'rū', // HIRAGANA LETTER RU + U
	  'る': 'ru', // HIRAGANA LETTER RU
	  'れ': 're', // HIRAGANA LETTER RE
	  'ろう': 'rō', // HIRAGANA LETTER RO + U
	  'ろ': 'ro', // HIRAGANA LETTER RO

	  'わ': 'wa', // HIRAGANA LETTER WA
	  'ゐ': 'i', // HIRAGANA LETTER WI
	  'ゑ': 'e', // HIRAGANA LETTER WE
	  'を': 'o', // HIRAGANA LETTER WO

	  'ん': 'n', // HIRAGANA LETTER N

	  'ぐぁ': 'gwa', // HIRAGANA LETTER GU + SMALL A
	  'ぐぃ': 'gwi', // HIRAGANA LETTER GU + SMALL I
	  'ぐぇ': 'gwe', // HIRAGANA LETTER GU + SMALL E
	  'ぐぉ': 'gwo', // HIRAGANA LETTER GU + SMALL O

	  'が': 'ga', // HIRAGANA LETTER GA
	  'ぎょう': 'gyō', // HIRAGANA LETTER GI + SMALL YO + U
	  'ぎゅう': 'gyū', // HIRAGANA LETTER GI + SMALL YU + U
	  'ぎゃ': 'gya', // HIRAGANA LETTER GI + SMALL YA
	  'ぎょ': 'gyo', // HIRAGANA LETTER GI + SMALL YO
	  'ぎゅ': 'gyu', // HIRAGANA LETTER GI + SMALL YU
	  'ぎ': 'gi', // HIRAGANA LETTER GI
	  'ぐう': 'gū', // HIRAGANA LETTER GU + U
	  'ぐ': 'gu', // HIRAGANA LETTER GU
	  'げ': 'ge', // HIRAGANA LETTER GE
	  'ごう': 'gō', // HIRAGANA LETTER GO + U
	  'ご': 'go', // HIRAGANA LETTER GO

	  'じぇ': 'je', // HIRAGANA LETTER ZI + SMALL E
	  'ずぃ': 'zi', // HIRAGANA LETTER ZU + SMALL I

	  'ざ': 'za', // HIRAGANA LETTER ZA
	  'じょう': 'jō', // HIRAGANA LETTER ZI + SMALL YO + U
	  'じゅう': 'jū', // HIRAGANA LETTER ZI + SMALL YU + U
	  'じゃ': 'ja', // HIRAGANA LETTER ZI + SMALL YA
	  'じょ': 'jo', // HIRAGANA LETTER ZI + SMALL YO
	  'じゅ': 'ju', // HIRAGANA LETTER ZI + SMALL YU
	  'じ': 'ji', // HIRAGANA LETTER ZI
	  'ずう': 'zū', // HIRAGANA LETTER ZU + U
	  'ず': 'zu', // HIRAGANA LETTER ZU
	  'ぜ': 'ze', // HIRAGANA LETTER ZE
	  'ぞう': 'zō', // HIRAGANA LETTER ZO + U
	  'ぞ': 'zo', // HIRAGANA LETTER ZO

	  'だ': 'da', // HIRAGANA LETTER DA
	  'ぢ': 'ji', // HIRAGANA LETTER DI
	  'づう': 'zū', // HIRAGANA LETTER DU + U
	  'づ': 'zu', // HIRAGANA LETTER DU
	  'で': 'de', // HIRAGANA LETTER DE
	  'どう': 'dō', // HIRAGANA LETTER DO + U
	  'ど': 'do', // HIRAGANA LETTER DO

	  'ぶゅ': 'byu', // HIRAGANA LETTER BU + SMALL YU

	  'ば': 'ba', // HIRAGANA LETTER BA
	  'びょう': 'byō', // HIRAGANA LETTER BI + SMALL YO + U
	  'びゅう': 'byū', // HIRAGANA LETTER BI + SMALL YU + U
	  'びゃ': 'bya', // HIRAGANA LETTER BI + SMALL YA
	  'びょ': 'byo', // HIRAGANA LETTER BI + SMALL YO
	  'びゅ': 'byu', // HIRAGANA LETTER BI + SMALL YU
	  'び': 'bi', // HIRAGANA LETTER BI
	  'ぶう': 'bū', // HIRAGANA LETTER BU + U
	  'ぶ': 'bu', // HIRAGANA LETTER BU
	  'べ': 'be', // HIRAGANA LETTER BE
	  'ぼう': 'bō', // HIRAGANA LETTER BO + U
	  'ぼ': 'bo', // HIRAGANA LETTER BO

	  'ぱ': 'pa', // HIRAGANA LETTER PA
	  'ぴょう': 'pyō', // HIRAGANA LETTER PI + SMALL YO + U
	  'ぴゅう': 'pyū', // HIRAGANA LETTER PI + SMALL YU + U
	  'ぴゃ': 'pya', // HIRAGANA LETTER PI + SMALL YA
	  'ぴょ': 'pyo', // HIRAGANA LETTER PI + SMALL YO
	  'ぴゅ': 'pyu', // HIRAGANA LETTER PI + SMALL YU
	  'ぴ': 'pi', // HIRAGANA LETTER PI
	  'ぷう': 'pū', // HIRAGANA LETTER PU + U
	  'ぷ': 'pu', // HIRAGANA LETTER PU
	  'ぺ': 'pe', // HIRAGANA LETTER PE
	  'ぽう': 'pō', // HIRAGANA LETTER PO + U
	  'ぽ': 'po', // HIRAGANA LETTER PO

	  'ゔ': 'v' // HIRAGANA LETTER VU
	};

	var transliterationTable3 = {
	  'aァ': 'ā',
	  'aぁ': 'ā',
	  'iィー': 'ī',
	  'iィ': 'ī',
	  'iぃー': 'ī',
	  'iぃ': 'ī',
	  'aー': 'ā',
	  'iー': 'ī',
	  'uー': 'ū',
	  'eー': 'ē',
	  'oー': 'ō',

	  // Fallback for small vowels
	  'ァ': 'a',
	  'ィ': 'i',
	  'ゥ': 'u',
	  'ェ': 'e',
	  'ォ': 'o',
	  'ぁ': 'a',
	  'ぃ': 'i',
	  'ぅ': 'u',
	  'ぇ': 'e',
	  'ぉ': 'o'
	};

	var replace1 = replacer(transliterationTable1);
	var replace2 = replacer(transliterationTable2);
	var replace3 = replacer(transliterationTable3);

	module.exports = function(str) {
	  str = replace1(str);

	  str = str
	    .replace(/ッ(?=[ン])/g, 'n')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ん])/g, 'n')// HIRAGANA LETTER SMALL TU
	    .replace(/ン(?=[バビブベボパピプペポマミムメモ])/g, 'm')// KATAKANA LETTER N
	    .replace(/ん(?=[ばびぶべぼぱぴぷぺぽまみむめも])/g, 'm')// HIRAGANA LETTER N
	    .replace(/ン(?=[ヤユヨアイウエオ])/g, "n'")// KATAKANA LETTER N
	    .replace(/ん(?=[やゆよあいうえお])/g, "n'");// HIRAGANA LETTER N
	  str = str
	    .replace(/ッ(?=[カキクケコ])/g, 'k')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[かきくけこ])/g, 'k')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ガギグゲゴ])/g, 'g')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[がぎぐげご])/g, 'g')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[サシスセソ])/g, 's')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[さしすせそ])/g, 's')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ザズゼゾ])/g, 'z')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ざずぜぞ])/g, 'z')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ジ])/g, 'j')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[じ])/g, 'j')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[タチツテト])/g, 't')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[たちつてと])/g, 't')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ダヂヅデド])/g, 't')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[だぢづでど])/g, 't')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ハヒヘホ])/g, 'h')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[はひへほ])/g, 'h')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[フ])/g, 'f')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ふ])/g, 'f')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[バビブベボ])/g, 'b')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ばびぶべぼ])/g, 'b')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[パピプペポ])/g, 'p')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[ぱぴぷぺぽ])/g, 'p')// HIRAGANA LETTER SMALL TU
	    .replace(/ッ(?=[ラリルレロ])/g, 'r')// KATAKANA LETTER SMALL TU
	    .replace(/っ(?=[らりるれろ])/g, 'r');// HIRAGANA LETTER SMALL TU

	  str = replace2(str);
	  str = replace3(str);

	  str = str
	    .replace(/(ッ|っ)\B/g, 't');// FINAL KATAKANA LETTER SMALL TU

	  return str;
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    Brill's POS Tagger
	    Copyright (C) 2015 Hugo W.L. ter Doest

	    This program is free software: you can redistribute it and/or modify
	    it under the terms of the GNU General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    This program is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU General Public License for more details.

	    You should have received a copy of the GNU General Public License
	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	*/

	var log4js = __webpack_require__(116);
	var logger = log4js.getLogger();

	var fs = __webpack_require__(68);

	var TF_Parser = __webpack_require__(206);

	logger.setLevel('WARN');

	// Tags a sentence, sentence is an array of words
	// Returns an array of tagged words; a tagged words is an array consisting of
	// the word itself followed by its lexical category
	Brill_POS_Tagger.prototype.tag = function(sentence) {
	  var tagged_sentence = new Array(sentence.length);
	  
	  // Initialise result
	  for (var i = 0, size = sentence.length; i < size; i++) {
	    var ss = this.lexicon[sentence[i]];
	    if (!ss) {
	      ss = this.lexicon[sentence[i].toLowerCase()];
	    }
	    tagged_sentence[i] = [];
	    tagged_sentence[i][0] = sentence[i];
	    if (!ss) { // If not found assign default_category
	      tagged_sentence[i][1] = this.default_category;
	    }
	    else {
	      tagged_sentence[i][1] = ss[0];
	    }
	  }
	  // Apply transformation rules
	  for (var i = 0, size = sentence.length; i < size; i++) {
	    this.transformation_rules.forEach(function(rule) {
	      rule.apply(tagged_sentence, i);
	    });
	  }
	  return(tagged_sentence);
	};

	Brill_POS_Tagger.prototype.parse_lexicon = function(data) {
	  var that = this;
	  // Split into an array of non-empty lines
	  var arrayOfLines = data.match(/[^\r\n]+/g);
	  this.lexicon = {};
	  arrayOfLines.forEach(function(line) {
	    // Split line by whitespace
	    var elements = line.trim().split(/\s+/);
	    if (elements.length > 0) {
	      that.lexicon[elements[0]] = elements.slice(1);
	    }
	  });
	};

	Brill_POS_Tagger.prototype.read_lexicon = function(lexicon_file,callback) {
	  var that = this;
	  
	  // Read lexicon
	  fs.readFile(lexicon_file, 'utf8', function (error, data) {
	    if (error) {
	      logger.error(error);
	      callback(error);
	    }
	    else {
	      if (data[0] === "{") {
	        // Lexicon is in JSON format
	        that.lexicon = JSON.parse(data);
	        callback();
	      }
	      else {
	        // Lexicon is plain text
	        that.parse_lexicon(data);
	        callback();
	      }
	      logger.debug('Brill_POS_Tagger.read_lexicon: number of lexicon entries read: ' + Object.keys(that.lexicon).length);
	    }
	  });
	};

	Brill_POS_Tagger.prototype.read_transformation_rules = function(rules_file, callback) {
	  var that = this;

	  // Read transformation rules
	  fs.readFile(rules_file, 'utf8', function (err, data) {
	    if (err) {
	      logger.error(error);
	      callback(err);
	    }
	    else {
	      that.transformation_rules = TF_Parser.parse(data);
	      logger.debug(that.transformation_rules);
	      logger.debug('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + that.transformation_rules.length);
	      callback();
	    }
	  });
	};

	function Brill_POS_Tagger(lexicon_file, rules_file, default_category, callback) {
	  var that = this;
	  
	  this.default_category = default_category;
	  this.read_lexicon(lexicon_file, function(error) {
	    if (error) {
	      callback(error);
	    }
	    else {
	      that.read_transformation_rules(rules_file, function(error) {
	        if (error) {
	          callback(error);
	        }
	        else {
	          callback();
	        }
	      });
	    }
	  });
	}

	module.exports = Brill_POS_Tagger;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	/*
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * @fileoverview log4js is a library to log in JavaScript in similar manner
	 * than in log4j for Java. The API should be nearly the same.
	 *
	 * <h3>Example:</h3>
	 * <pre>
	 *  var logging = require('log4js');
	 *  //add an appender that logs all messages to stdout.
	 *  logging.addAppender(logging.consoleAppender());
	 *  //add an appender that logs "some-category" to a file
	 *  logging.addAppender(logging.fileAppender("file.log"), "some-category");
	 *  //get a logger
	 *  var log = logging.getLogger("some-category");
	 *  log.setLevel(logging.levels.TRACE); //set the Level
	 *
	 *  ...
	 *
	 *  //call the log
	 *  log.trace("trace me" );
	 * </pre>
	 *
	 * NOTE: the authors below are the original browser-based log4js authors
	 * don't try to contact them about bugs in this version :)
	 * @version 1.0
	 * @author Stephan Strittmatter - http://jroller.com/page/stritti
	 * @author Seth Chisamore - http://www.chisamore.com
	 * @since 2005-05-20
	 * @static
	 * Website: http://log4js.berlios.de
	 */
	var events = __webpack_require__(67)
	, fs = __webpack_require__(68)
	, path = __webpack_require__(96)
	, util = __webpack_require__(10)
	, layouts = __webpack_require__(117)
	, levels = __webpack_require__(121)
	, loggerModule = __webpack_require__(122)
	, LoggingEvent = loggerModule.LoggingEvent
	, Logger = loggerModule.Logger
	, ALL_CATEGORIES = '[all]'
	, appenders = {}
	, loggers = {}
	, appenderMakers = {}
	, appenderShutdowns = {}
	, defaultConfig =   {
	  appenders: [
	    { type: "stdout" }
	  ],
	  replaceConsole: false
	};

	function hasLogger(logger) {
	  return loggers.hasOwnProperty(logger);
	}

	levels.forName = function(levelStr, levelVal) {
	  var level;
	  if (typeof levelStr === "string" && typeof levelVal === "number") {
	    var levelUpper = levelStr.toUpperCase();
	    level = new levels.Level(levelVal, levelUpper);
	    loggerModule.addLevelMethods(level);
	  }
	  return level;
	};

	levels.getLevel = function(levelStr) {
	  var level;
	  if (typeof levelStr === "string") {
	    var levelUpper = levelStr.toUpperCase();
	    level = levels.toLevel(levelStr);
	  }
	  return level;
	};

	function getBufferedLogger(categoryName) {
	    var base_logger = getLogger(categoryName);
	    var logger = {};
	    logger.temp = [];
	    logger.target = base_logger;
	    logger.flush = function () {
	        for (var i = 0; i < logger.temp.length; i++) {
	            var log = logger.temp[i];
	            logger.target[log.level](log.message);
	            delete logger.temp[i];
	        }
	    };
	    logger.trace = function (message) { logger.temp.push({level: 'trace', message: message}); };
	    logger.debug = function (message) { logger.temp.push({level: 'debug', message: message}); };
	    logger.info = function (message) { logger.temp.push({level: 'info', message: message}); };
	    logger.warn = function (message) { logger.temp.push({level: 'warn', message: message}); };
	    logger.error = function (message) { logger.temp.push({level: 'error', message: message}); };
	    logger.fatal = function (message) { logger.temp.push({level: 'fatal', message: message}); };

	    return logger;
	}

	function normalizeCategory (category) {
	  return  category + '.';
	}

	function doesLevelEntryContainsLogger (levelCategory, loggerCategory) {
	  var normalizedLevelCategory = normalizeCategory(levelCategory);
	  var normalizedLoggerCategory = normalizeCategory(loggerCategory);
	  return normalizedLoggerCategory.substring(0, normalizedLevelCategory.length) == normalizedLevelCategory; //jshint ignore:line
	}

	function doesAppenderContainsLogger (appenderCategory, loggerCategory) {
	  var normalizedAppenderCategory = normalizeCategory(appenderCategory);
	  var normalizedLoggerCategory = normalizeCategory(loggerCategory);
	  return normalizedLoggerCategory.substring(0, normalizedAppenderCategory.length) == normalizedAppenderCategory; //jshint ignore:line
	}


	/**
	 * Get a logger instance. Instance is cached on categoryName level.
	 * @param  {String} categoryName name of category to log to.
	 * @return {Logger} instance of logger for the category
	 * @static
	 */
	function getLogger (loggerCategoryName) {

	  // Use default logger if categoryName is not specified or invalid
	  if (typeof loggerCategoryName !== "string") {
	    loggerCategoryName = Logger.DEFAULT_CATEGORY;
	  }

	  if (!hasLogger(loggerCategoryName)) {

	    var level;

	    /* jshint -W073 */
	    // If there's a "levels" entry in the configuration
	    if (levels.config) {
	      // Goes through the categories in the levels configuration entry,
	      // starting with the "higher" ones.
	      var keys = Object.keys(levels.config).sort();
	      for (var idx = 0; idx < keys.length; idx++) {
	        var levelCategory = keys[idx];
	        if (doesLevelEntryContainsLogger(levelCategory, loggerCategoryName)) {
	          // level for the logger
	          level = levels.config[levelCategory];
	        }
	      }
	    }
	    /* jshint +W073 */

	    // Create the logger for this name if it doesn't already exist
	    loggers[loggerCategoryName] = new Logger(loggerCategoryName, level);

	    /* jshint -W083 */
	    var appenderList;
	    for(var appenderCategory in appenders) {
	      if (doesAppenderContainsLogger(appenderCategory, loggerCategoryName)) {
	        appenderList = appenders[appenderCategory];
	        appenderList.forEach(function(appender) {
	          loggers[loggerCategoryName].addListener("log", appender);
	        });
	      }
	    }
	    /* jshint +W083 */

	    if (appenders[ALL_CATEGORIES]) {
	      appenderList = appenders[ALL_CATEGORIES];
	      appenderList.forEach(function(appender) {
	        loggers[loggerCategoryName].addListener("log", appender);
	      });
	    }
	  }

	  return loggers[loggerCategoryName];
	}

	/**
	 * args are appender, then zero or more categories
	 */
	function addAppender () {
	  var args = Array.prototype.slice.call(arguments);
	  var appender = args.shift();
	  if (args.length === 0 || args[0] === undefined) {
	    args = [ ALL_CATEGORIES ];
	  }
	  //argument may already be an array
	  if (Array.isArray(args[0])) {
	    args = args[0];
	  }

	  args.forEach(function(appenderCategory) {
	    addAppenderToCategory(appender, appenderCategory);

	    if (appenderCategory === ALL_CATEGORIES) {
	      addAppenderToAllLoggers(appender);
	    } else {

	      for(var loggerCategory in loggers) {
	        if (doesAppenderContainsLogger(appenderCategory,loggerCategory)) {
	          loggers[loggerCategory].addListener("log", appender);
	        }
	      }

	    }
	  });
	}

	function addAppenderToAllLoggers(appender) {
	  for (var logger in loggers) {
	    if (hasLogger(logger)) {
	      loggers[logger].addListener("log", appender);
	    }
	  }
	}

	function addAppenderToCategory(appender, category) {
	  if (!appenders[category]) {
	    appenders[category] = [];
	  }
	  appenders[category].push(appender);
	}

	function clearAppenders () {
	  appenders = {};
	  for (var logger in loggers) {
	    if (hasLogger(logger)) {
	      loggers[logger].removeAllListeners("log");
	    }
	  }
	}

	function configureAppenders(appenderList, options) {
	  clearAppenders();
	  if (appenderList) {
	    appenderList.forEach(function(appenderConfig) {
	      loadAppender(appenderConfig.type);
	      var appender;
	      appenderConfig.makers = appenderMakers;
	      try {
	        appender = appenderMakers[appenderConfig.type](appenderConfig, options);
	        addAppender(appender, appenderConfig.category);
	      } catch(e) {
	        throw new Error("log4js configuration problem for " + util.inspect(appenderConfig), e);
	      }
	    });
	  }
	}

	function configureLevels(_levels) {
	  levels.config = _levels; // Keep it so we can create loggers later using this cfg
	  if (_levels) {
	    var keys = Object.keys(levels.config).sort();
	    for (var idx in keys) {
	      var category = keys[idx];
	      if(category === ALL_CATEGORIES) {
	        setGlobalLogLevel(_levels[category]);
	      }
	      /* jshint -W073 */
	      for(var loggerCategory in loggers) {
	        if (doesLevelEntryContainsLogger(category, loggerCategory)) {
	          loggers[loggerCategory].setLevel(_levels[category]);
	        }
	      }
	      /* jshint +W073 */
	    }
	  }
	}

	function setGlobalLogLevel(level) {
	  Logger.prototype.level = levels.toLevel(level, levels.TRACE);
	}

	/**
	 * Get the default logger instance.
	 * @return {Logger} instance of default logger
	 * @static
	 */
	function getDefaultLogger () {
	  return getLogger(Logger.DEFAULT_CATEGORY);
	}

	var configState = {};

	function loadConfigurationFile(filename) {
	  if (filename) {
	    return JSON.parse(fs.readFileSync(filename, "utf8"));
	  }
	  return undefined;
	}

	function configureOnceOff(config, options) {
	  if (config) {
	    try {
	      configureLevels(config.levels);
	      configureAppenders(config.appenders, options);

	      if (config.replaceConsole) {
	        replaceConsole();
	      } else {
	        restoreConsole();
	      }
	    } catch (e) {
	      throw new Error(
	        "Problem reading log4js config " + util.inspect(config) +
	          ". Error was \"" + e.message + "\" (" + e.stack + ")"
	      );
	    }
	  }
	}

	function reloadConfiguration(options) {
	  var mtime = getMTime(configState.filename);
	  if (!mtime) return;

	  if (configState.lastMTime && (mtime.getTime() > configState.lastMTime.getTime())) {
	    configureOnceOff(loadConfigurationFile(configState.filename), options);
	  }
	  configState.lastMTime = mtime;
	}

	function getMTime(filename) {
	  var mtime;
	  try {
	    mtime = fs.statSync(configState.filename).mtime;
	  } catch (e) {
	    getLogger('log4js').warn('Failed to load configuration file ' + filename);
	  }
	  return mtime;
	}

	function initReloadConfiguration(filename, options) {
	  if (configState.timerId) {
	    clearInterval(configState.timerId);
	    delete configState.timerId;
	  }
	  configState.filename = filename;
	  configState.lastMTime = getMTime(filename);
	  configState.timerId = setInterval(reloadConfiguration, options.reloadSecs*1000, options);
	}

	function configure(configurationFileOrObject, options) {
	  var config = configurationFileOrObject;
	  config = config || process.env.LOG4JS_CONFIG;
	  options = options || {};

	  if (config === undefined || config === null || typeof(config) === 'string') {
	    if (options.reloadSecs) {
	      initReloadConfiguration(config, options);
	    }
	    config = loadConfigurationFile(config) || defaultConfig;
	  } else {
	    if (options.reloadSecs) {
	      getLogger('log4js').warn(
	        'Ignoring configuration reload parameter for "object" configuration.'
	      );
	    }
	  }
	  configureOnceOff(config, options);
	}

	var originalConsoleFunctions = {
	  log: console.log,
	  debug: console.debug,
	  info: console.info,
	  warn: console.warn,
	  error: console.error
	};

	function replaceConsole(logger) {
	  function replaceWith(fn) {
	    return function() {
	      fn.apply(logger, arguments);
	    };
	  }
	  logger = logger || getLogger("console");
	  ['log','debug','info','warn','error'].forEach(function (item) {
	    console[item] = replaceWith(item === 'log' ? logger.info : logger[item]);
	  });
	}

	function restoreConsole() {
	  ['log', 'debug', 'info', 'warn', 'error'].forEach(function (item) {
	    console[item] = originalConsoleFunctions[item];
	  });
	}

	/**
	 * Load an appenderModule based on the provided appender filepath. Will first
	 * check if the appender path is a subpath of the log4js "lib/appenders" directory.
	 * If not, it will attempt to load the the appender as complete path.
	 *
	 * @param {string} appender The filepath for the appender.
	 * @returns {Object|null} The required appender or null if appender could not be loaded.
	 * @private
	 */
	function requireAppender(appender) {
	  var appenderModule;
	  try {
	    appenderModule = __webpack_require__(123)("./" + appender);
	  } catch (e) {
	    appenderModule = __webpack_require__(204)(appender);
	  }
	  return appenderModule;
	}

	/**
	 * Load an appender. Provided the appender path to be loaded. If appenderModule is defined,
	 * it will be used in place of requiring the appender module.
	 *
	 * @param {string} appender The path to the appender module.
	 * @param {Object|void} [appenderModule] The pre-required appender module. When provided,
	 * instead of requiring the appender by its path, this object will be used.
	 * @returns {void}
	 * @private
	 */
	function loadAppender(appender, appenderModule) {
	  appenderModule = appenderModule || requireAppender(appender);

	  if (!appenderModule) {
	    throw new Error("Invalid log4js appender: " + util.inspect(appender));
	  }

	  module.exports.appenders[appender] = appenderModule.appender.bind(appenderModule);
	  if (appenderModule.shutdown) {
	    appenderShutdowns[appender] = appenderModule.shutdown.bind(appenderModule);
	  }
	  appenderMakers[appender] = appenderModule.configure.bind(appenderModule);
	}

	/**
	 * Shutdown all log appenders. This will first disable all writing to appenders
	 * and then call the shutdown function each appender.
	 *
	 * @params {Function} cb - The callback to be invoked once all appenders have
	 *  shutdown. If an error occurs, the callback will be given the error object
	 *  as the first argument.
	 * @returns {void}
	 */
	function shutdown(cb) {
	  // First, disable all writing to appenders. This prevents appenders from
	  // not being able to be drained because of run-away log writes.
	  loggerModule.disableAllLogWrites();

	  //turn off config reloading
	  if (configState.timerId) {
	    clearInterval(configState.timerId);
	  }

	  // Call each of the shutdown functions in parallel
	  var completed = 0;
	  var error;
	  var shutdownFcts = [];
	  var complete = function(err) {
	    error = error || err;
	    completed++;
	    if (completed >= shutdownFcts.length) {
	      cb(error);
	    }
	  };
	  for (var category in appenderShutdowns) {
	    if (appenderShutdowns.hasOwnProperty(category)) {
	      shutdownFcts.push(appenderShutdowns[category]);
	    }
	  }
	  if (!shutdownFcts.length) {
	    return cb();
	  }
	  shutdownFcts.forEach(function(shutdownFct) { shutdownFct(complete); });
	}

	module.exports = {
	  getBufferedLogger: getBufferedLogger,
	  getLogger: getLogger,
	  getDefaultLogger: getDefaultLogger,
	  hasLogger: hasLogger,

	  addAppender: addAppender,
	  loadAppender: loadAppender,
	  clearAppenders: clearAppenders,
	  configure: configure,
	  shutdown: shutdown,

	  replaceConsole: replaceConsole,
	  restoreConsole: restoreConsole,

	  levels: levels,
	  setGlobalLogLevel: setGlobalLogLevel,

	  layouts: layouts,
	  appenders: {},
	  appenderMakers: appenderMakers,
	  connectLogger: __webpack_require__(205).connectLogger
	};

	//set ourselves up
	configure();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	var dateFormat = __webpack_require__(118)
	, os = __webpack_require__(119)
	, eol = os.EOL || '\n'
	, util = __webpack_require__(10)
	, semver = __webpack_require__(120)
	, replacementRegExp = /%[sdj]/g
	, layoutMakers = {
	  "messagePassThrough": function() { return messagePassThroughLayout; },
	  "basic": function() { return basicLayout; },
	  "colored": function() { return colouredLayout; },
	  "coloured": function() { return colouredLayout; },
	  "pattern": function (config) {
	    return patternLayout(config && config.pattern, config && config.tokens);
		},
	  "dummy": function() { return dummyLayout; }
	}
	, colours = {
	  ALL: "grey",
	  TRACE: "blue",
	  DEBUG: "cyan",
	  INFO: "green",
	  WARN: "yellow",
	  ERROR: "red",
	  FATAL: "magenta",
	  OFF: "grey"
	};

	function wrapErrorsWithInspect(items) {
	  return items.map(function(item) {
	    if ((item instanceof Error) && item.stack) {
	      return { inspect: function() {
	        if (semver.satisfies(process.version, '>=6')) {
	          return util.format(item);
	        } else {
	          return util.format(item) + '\n' + item.stack;           
	        }
	      } };
	    } else {
	      return item;
	    }
	  });
	}

	function formatLogData(logData) {
	  var data = Array.isArray(logData) ? logData : Array.prototype.slice.call(arguments);
	  return util.format.apply(util, wrapErrorsWithInspect(data));
	}

	var styles = {
	    //styles
	  'bold'      : [1,  22],
	  'italic'    : [3,  23],
	  'underline' : [4,  24],
	  'inverse'   : [7,  27],
	  //grayscale
	  'white'     : [37, 39],
	  'grey'      : [90, 39],
	  'black'     : [90, 39],
	  //colors
	  'blue'      : [34, 39],
	  'cyan'      : [36, 39],
	  'green'     : [32, 39],
	  'magenta'   : [35, 39],
	  'red'       : [31, 39],
	  'yellow'    : [33, 39]
	};

	function colorizeStart(style) {
	  return style ? '\x1B[' + styles[style][0] + 'm' : '';
	}
	function colorizeEnd(style) {
	  return style ? '\x1B[' + styles[style][1] + 'm' : '';
	}
	/**
	 * Taken from masylum's fork (https://github.com/masylum/log4js-node)
	 */
	function colorize (str, style) {
	  return colorizeStart(style) + str + colorizeEnd(style);
	}

	function timestampLevelAndCategory(loggingEvent, colour, timezoneOffest) {
	  var output = colorize(
	    formatLogData(
	      '[%s] [%s] %s - '
	      , dateFormat.asString(loggingEvent.startTime, timezoneOffest)
	      , loggingEvent.level
	      , loggingEvent.categoryName
	    )
	    , colour
	  );
	  return output;
	}

	/**
	 * BasicLayout is a simple layout for storing the logs. The logs are stored
	 * in following format:
	 * <pre>
	 * [startTime] [logLevel] categoryName - message\n
	 * </pre>
	 *
	 * @author Stephan Strittmatter
	 */
	function basicLayout (loggingEvent, timezoneOffset) {
	  return timestampLevelAndCategory(
	    loggingEvent,
	    undefined,
	    timezoneOffset
	  ) + formatLogData(loggingEvent.data);
	}

	/**
	 * colouredLayout - taken from masylum's fork.
	 * same as basicLayout, but with colours.
	 */
	function colouredLayout (loggingEvent, timezoneOffset) {
	  return timestampLevelAndCategory(
	    loggingEvent,
	    colours[loggingEvent.level.toString()],
	    timezoneOffset
	  ) + formatLogData(loggingEvent.data);
	}

	function messagePassThroughLayout (loggingEvent) {
	  return formatLogData(loggingEvent.data);
	}

	function dummyLayout(loggingEvent) {
	  return loggingEvent.data[0];
	}

	/**
	 * PatternLayout
	 * Format for specifiers is %[padding].[truncation][field]{[format]}
	 * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10
	 * Fields can be any of:
	 *  - %r time in toLocaleTimeString format
	 *  - %p log level
	 *  - %c log category
	 *  - %h hostname
	 *  - %m log data
	 *  - %d date in various formats
	 *  - %% %
	 *  - %n newline
	 *  - %z pid
	 *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter
	 * You can use %[ and %] to define a colored block.
	 *
	 * Tokens are specified as simple key:value objects.
	 * The key represents the token name whereas the value can be a string or function
	 * which is called to extract the value to put in the log message. If token is not
	 * found, it doesn't replace the field.
	 *
	 * A sample token would be: { "pid" : function() { return process.pid; } }
	 *
	 * Takes a pattern string, array of tokens and returns a layout function.
	 * @param {String} Log format pattern String
	 * @param {object} map object of different tokens
	 * @param {number} timezone offset in minutes
	 * @return {Function}
	 * @author Stephan Strittmatter
	 * @author Jan Schmidle
	 */
	function patternLayout (pattern, tokens, timezoneOffset) {
	  // jshint maxstatements:22
	  var TTCC_CONVERSION_PATTERN  = "%r %p %c - %m%n";
	  var regex = /%(-?[0-9]+)?(\.?[0-9]+)?([\[\]cdhmnprzxy%])(\{([^\}]+)\})?|([^%]+)/;

	  pattern = pattern || TTCC_CONVERSION_PATTERN;

	  function categoryName(loggingEvent, specifier) {
	    var loggerName = loggingEvent.categoryName;
	    if (specifier) {
	      var precision = parseInt(specifier, 10);
	      var loggerNameBits = loggerName.split(".");
	      if (precision < loggerNameBits.length) {
	        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(".");
	      }
	    }
	    return loggerName;
	  }

	  function formatAsDate(loggingEvent, specifier) {
	    var format = dateFormat.ISO8601_FORMAT;
	    if (specifier) {
	      format = specifier;
	      // Pick up special cases
	      if (format == "ISO8601") {
	        format = dateFormat.ISO8601_FORMAT;
	      } else if (format == "ISO8601_WITH_TZ_OFFSET") {
	        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;
	      } else if (format == "ABSOLUTE") {
	        format = dateFormat.ABSOLUTETIME_FORMAT;
	      } else if (format == "DATE") {
	        format = dateFormat.DATETIME_FORMAT;
	      }
	    }
	    // Format the date
	    return dateFormat.asString(format, loggingEvent.startTime, timezoneOffset);
	  }

	  function hostname() {
	    return os.hostname().toString();
	  }

	  function formatMessage(loggingEvent) {
	    return formatLogData(loggingEvent.data);
	  }

	  function endOfLine() {
	    return eol;
	  }

	  function logLevel(loggingEvent) {
	    return loggingEvent.level.toString();
	  }

	  function startTime(loggingEvent) {
	    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime, timezoneOffset);
	  }

	  function startColour(loggingEvent) {
	    return colorizeStart(colours[loggingEvent.level.toString()]);
	  }

	  function endColour(loggingEvent) {
	    return colorizeEnd(colours[loggingEvent.level.toString()]);
	  }

	  function percent() {
	    return '%';
	  }

	  function pid(loggingEvent) {
	    if (loggingEvent && loggingEvent.pid) {
	      return loggingEvent.pid;
	    } else {
	      return process.pid;
	    }
	  }

	  function clusterInfo(loggingEvent, specifier) {
	    if (loggingEvent.cluster && specifier) {
	      return specifier
	        .replace('%m', loggingEvent.cluster.master)
	        .replace('%w', loggingEvent.cluster.worker)
	        .replace('%i', loggingEvent.cluster.workerId);
	    } else if (loggingEvent.cluster) {
	      return loggingEvent.cluster.worker+'@'+loggingEvent.cluster.master;
	    } else {
	      return pid();
	    }
	  }

	  function userDefined(loggingEvent, specifier) {
	    if (typeof(tokens[specifier]) !== 'undefined') {
	      if (typeof(tokens[specifier]) === 'function') {
	        return tokens[specifier](loggingEvent);
	      } else {
	        return tokens[specifier];
	      }
	    }
	    return null;
	  }

	  var replacers = {
	    'c': categoryName,
	    'd': formatAsDate,
	    'h': hostname,
	    'm': formatMessage,
	    'n': endOfLine,
	    'p': logLevel,
	    'r': startTime,
	    '[': startColour,
	    ']': endColour,
	    'y': clusterInfo,
	    'z': pid,
	    '%': percent,
	    'x': userDefined
	  };

	  function replaceToken(conversionCharacter, loggingEvent, specifier) {
	    return replacers[conversionCharacter](loggingEvent, specifier);
	  }

	  function truncate(truncation, toTruncate) {
	    var len;
	    if (truncation) {
	      len = parseInt(truncation.substr(1), 10);
	      return toTruncate.substring(0, len);
	    }

	    return toTruncate;
	  }

	  function pad(padding, toPad) {
	    var len;
	    if (padding) {
	      if (padding.charAt(0) == "-") {
	        len = parseInt(padding.substr(1), 10);
	        // Right pad with spaces
	        while (toPad.length < len) {
	          toPad += " ";
	        }
	      } else {
	        len = parseInt(padding, 10);
	        // Left pad with spaces
	        while (toPad.length < len) {
	          toPad = " " + toPad;
	        }
	      }
	    }
	    return toPad;
	  }

	  function truncateAndPad(toTruncAndPad, truncation, padding) {
	    var replacement = toTruncAndPad;
	    replacement = truncate(truncation, replacement);
	    replacement = pad(padding, replacement);
	    return replacement;
	  }

	  return function(loggingEvent) {
	    var formattedString = "";
	    var result;
	    var searchString = pattern;

	    while ((result = regex.exec(searchString))) {
	      var matchedString = result[0];
	      var padding = result[1];
	      var truncation = result[2];
	      var conversionCharacter = result[3];
	      var specifier = result[5];
	      var text = result[6];

	      // Check if the pattern matched was just normal text
	      if (text) {
	        formattedString += "" + text;
	      } else {
	        // Create a raw replacement string based on the conversion
	        // character and specifier
	        var replacement = replaceToken(conversionCharacter, loggingEvent, specifier);
	        formattedString += truncateAndPad(replacement, truncation, padding);
	      }
	      searchString = searchString.substr(result.index + result[0].length);
	    }
	    return formattedString;
	  };

	}

	module.exports = {
	  basicLayout: basicLayout,
	  messagePassThroughLayout: messagePassThroughLayout,
	  patternLayout: patternLayout,
	  colouredLayout: colouredLayout,
	  coloredLayout: colouredLayout,
	  dummyLayout: dummyLayout,
	  addLayout: function(name, serializerGenerator) {
	    layoutMakers[name] = serializerGenerator;
	  },
	  layout: function(name, config) {
	    return layoutMakers[name] && layoutMakers[name](config);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 118 */
/***/ function(module, exports) {

	"use strict";
	exports.ISO8601_FORMAT = "yyyy-MM-dd hh:mm:ss.SSS";
	exports.ISO8601_WITH_TZ_OFFSET_FORMAT = "yyyy-MM-ddThh:mm:ssO";
	exports.DATETIME_FORMAT = "dd MM yyyy hh:mm:ss.SSS";
	exports.ABSOLUTETIME_FORMAT = "hh:mm:ss.SSS";

	function padWithZeros(vNumber, width) {
	  var numAsString = vNumber + "";
	  while (numAsString.length < width) {
	    numAsString = "0" + numAsString;
	  }
	  return numAsString;
	}

	function addZero(vNumber) {
	  return padWithZeros(vNumber, 2);
	}

	/**
	 * Formats the TimeOffest
	 * Thanks to http://www.svendtofte.com/code/date_format/
	 * @private
	 */
	function offset(timezoneOffset) {
	  // Difference to Greenwich time (GMT) in hours
	  var os = Math.abs(timezoneOffset);
	  var h = String(Math.floor(os/60));
	  var m = String(os%60);
	  if (h.length == 1) {
	    h = "0" + h;
	  }
	  if (m.length == 1) {
	    m = "0" + m;
	  }
	  return timezoneOffset < 0 ? "+"+h+m : "-"+h+m;
	}

	exports.asString = function(/*format,*/ date, timezoneOffset) {
	  /*jshint -W071 */
	  var format = exports.ISO8601_FORMAT;
	  if (typeof(date) === "string") {
	    format = arguments[0];
	    date = arguments[1];
	    timezoneOffset = arguments[2];
	  }
	  // make the date independent of the system timezone by working with UTC
	  if (timezoneOffset === undefined) {
	    timezoneOffset = date.getTimezoneOffset();
	  }
	  date.setUTCMinutes(date.getUTCMinutes() - timezoneOffset);
	  var vDay = addZero(date.getUTCDate());
	  var vMonth = addZero(date.getUTCMonth()+1);
	  var vYearLong = addZero(date.getUTCFullYear());
	  var vYearShort = addZero(date.getUTCFullYear().toString().substring(2,4));
	  var vYear = (format.indexOf("yyyy") > -1 ? vYearLong : vYearShort);
	  var vHour  = addZero(date.getUTCHours());
	  var vMinute = addZero(date.getUTCMinutes());
	  var vSecond = addZero(date.getUTCSeconds());
	  var vMillisecond = padWithZeros(date.getUTCMilliseconds(), 3);
	  var vTimeZone = offset(timezoneOffset);
	  date.setUTCMinutes(date.getUTCMinutes() + timezoneOffset);
	  var formatted = format
	    .replace(/dd/g, vDay)
	    .replace(/MM/g, vMonth)
	    .replace(/y{1,4}/g, vYear)
	    .replace(/hh/g, vHour)
	    .replace(/mm/g, vMinute)
	    .replace(/ss/g, vSecond)
	    .replace(/SSS/g, vMillisecond)
	    .replace(/O/g, vTimeZone);
	  return formatted;

	};
	/*jshint +W071 */


/***/ },
/* 119 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;

	// The debug function is excluded entirely from the minified version.
	/* nomin */ var debug;
	/* nomin */ if (typeof process === 'object' &&
	    /* nomin */ process.env &&
	    /* nomin */ process.env.NODE_DEBUG &&
	    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
	  /* nomin */ debug = function() {
	    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
	    /* nomin */ args.unshift('SEMVER');
	    /* nomin */ console.log.apply(console, args);
	    /* nomin */ };
	/* nomin */ else
	  /* nomin */ debug = function() {};

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';


	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i])
	    re[i] = new RegExp(src[i]);
	}

	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer)
	    return version;

	  if (typeof version !== 'string')
	    return null;

	  if (version.length > MAX_LENGTH)
	    return null;

	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version))
	    return null;

	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}

	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}


	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}

	exports.SemVer = SemVer;

	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose)
	      return version;
	    else
	      version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }

	  if (version.length > MAX_LENGTH)
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

	  if (!(this instanceof SemVer))
	    return new SemVer(version, loose);

	  debug('SemVer', version, loose);
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

	  if (!m)
	    throw new TypeError('Invalid Version: ' + version);

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
	    throw new TypeError('Invalid major version')

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
	    throw new TypeError('Invalid minor version')

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
	    throw new TypeError('Invalid patch version')

	  // numberify any prerelease numeric ids
	  if (!m[4])
	    this.prerelease = [];
	  else
	    this.prerelease = m[4].split('.').map(function(id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER)
	          return num;
	      }
	      return id;
	    });

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function() {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length)
	    this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};

	SemVer.prototype.toString = function() {
	  return this.version;
	};

	SemVer.prototype.compare = function(other) {
	  debug('SemVer.compare', this.version, this.loose, other);
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return this.compareMain(other) || this.comparePre(other);
	};

	SemVer.prototype.compareMain = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch);
	};

	SemVer.prototype.comparePre = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length)
	    return -1;
	  else if (!this.prerelease.length && other.prerelease.length)
	    return 1;
	  else if (!this.prerelease.length && !other.prerelease.length)
	    return 0;

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined)
	      return 0;
	    else if (b === undefined)
	      return 1;
	    else if (a === undefined)
	      return -1;
	    else if (a === b)
	      continue;
	    else
	      return compareIdentifiers(a, b);
	  } while (++i);
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function(release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0)
	        this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
	        this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0)
	        this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0)
	        this.patch++;
	      this.prerelease = [];
	      break;
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0)
	        this.prerelease = [0];
	      else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) // didn't increment anything
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1]))
	            this.prerelease = [identifier, 0];
	        } else
	          this.prerelease = [identifier, 0];
	      }
	      break;

	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  this.raw = this.version;
	  return this;
	};

	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof(loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}

	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre'+key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return (anum && !bnum) ? -1 :
	         (bnum && !anum) ? 1 :
	         a < b ? -1 :
	         a > b ? 1 :
	         0;
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}

	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}

	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}

	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}

	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(b);
	}

	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}

	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}

	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.compare(a, b, loose);
	  });
	}

	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}

	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}

	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}

	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}

	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}

	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}

	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}

	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '': case '=': case '==': ret = eq(a, b, loose); break;
	    case '!=': ret = neq(a, b, loose); break;
	    case '>': ret = gt(a, b, loose); break;
	    case '>=': ret = gte(a, b, loose); break;
	    case '<': ret = lt(a, b, loose); break;
	    case '<=': ret = lte(a, b, loose); break;
	    default: throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}

	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose)
	      return comp;
	    else
	      comp = comp.value;
	  }

	  if (!(this instanceof Comparator))
	    return new Comparator(comp, loose);

	  debug('comparator', comp, loose);
	  this.loose = loose;
	  this.parse(comp);

	  if (this.semver === ANY)
	    this.value = '';
	  else
	    this.value = this.operator + this.semver.version;

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function(comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m)
	    throw new TypeError('Invalid comparator: ' + comp);

	  this.operator = m[1];
	  if (this.operator === '=')
	    this.operator = '';

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2])
	    this.semver = ANY;
	  else
	    this.semver = new SemVer(m[2], this.loose);
	};

	Comparator.prototype.toString = function() {
	  return this.value;
	};

	Comparator.prototype.test = function(version) {
	  debug('Comparator.test', version, this.loose);

	  if (this.semver === ANY)
	    return true;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  return cmp(version, this.operator, this.semver, this.loose);
	};


	exports.Range = Range;
	function Range(range, loose) {
	  if ((range instanceof Range) && range.loose === loose)
	    return range;

	  if (!(this instanceof Range))
	    return new Range(range, loose);

	  this.loose = loose;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function(c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length;
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }

	  this.format();
	}

	Range.prototype.format = function() {
	  this.range = this.set.map(function(comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};

	Range.prototype.toString = function() {
	  return this.range;
	};

	Range.prototype.parseRange = function(range) {
	  var loose = this.loose;
	  range = range.trim();
	  debug('range', range, loose);
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function(comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function(comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function(comp) {
	    return new Comparator(comp, loose);
	  });

	  return set;
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function(comp) {
	    return comp.map(function(c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator(comp, loose) {
	  debug('comp', comp);
	  comp = replaceCarets(comp, loose);
	  debug('caret', comp);
	  comp = replaceTildes(comp, loose);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, loose);
	  debug('xrange', comp);
	  comp = replaceStars(comp, loose);
	  debug('stars', comp);
	  return comp;
	}

	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}

	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p))
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    else if (pr) {
	      debug('replaceTilde pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';

	    debug('tilde return', ret);
	    return ret;
	  });
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}

	function replaceCaret(comp, loose) {
	  debug('caret', comp, loose);
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p)) {
	      if (M === '0')
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      else
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p + pr +
	              ' <' + (+M + 1) + '.0.0';
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	    }

	    debug('caret return', ret);
	    return ret;
	  });
	}

	function replaceXRanges(comp, loose) {
	  debug('replaceXRanges', comp, loose);
	  return comp.split(/\s+/).map(function(comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}

	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX)
	      gtlt = '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // replace X with 0
	      if (xm)
	        m = 0;
	      if (xp)
	        p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm)
	          M = +M + 1;
	        else
	          m = +m + 1;
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('xRange return', ret);

	    return ret;
	  });
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars(comp, loose) {
	  debug('replaceStars', comp, loose);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '');
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace($0,
	                       from, fM, fm, fp, fpr, fb,
	                       to, tM, tm, tp, tpr, tb) {

	  if (isX(fM))
	    from = '';
	  else if (isX(fm))
	    from = '>=' + fM + '.0.0';
	  else if (isX(fp))
	    from = '>=' + fM + '.' + fm + '.0';
	  else
	    from = '>=' + from;

	  if (isX(tM))
	    to = '';
	  else if (isX(tm))
	    to = '<' + (+tM + 1) + '.0.0';
	  else if (isX(tp))
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  else if (tpr)
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  else
	    to = '<=' + to;

	  return (from + ' ' + to).trim();
	}


	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function(version) {
	  if (!version)
	    return false;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version))
	      return true;
	  }
	  return false;
	};

	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version))
	      return false;
	  }

	  if (version.prerelease.length) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (var i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY)
	        continue;

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch)
	          return true;
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false;
	  }

	  return true;
	}

	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return rcompare(a, b, loose);
	  })[0] || null;
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return compare(a, b, loose);
	  })[0] || null;
	}

	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}

	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, loose)) {
	    return false;
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function(comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0')
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}

	exports.prerelease = prerelease;
	function prerelease(version, loose) {
	  var parsed = parse(version, loose);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 121 */
/***/ function(module, exports) {

	"use strict";

	function Level(level, levelStr) {
	  this.level = level;
	  this.levelStr = levelStr;
	}

	/**
	 * converts given String to corresponding Level
	 * @param {String} sArg String value of Level OR Log4js.Level
	 * @param {Log4js.Level} defaultLevel default Level, if no String representation
	 * @return Level object
	 * @type Log4js.Level
	 */
	function toLevel(sArg, defaultLevel) {
	  if (!sArg) {
	    return defaultLevel;
	  }
	  if (sArg instanceof Level) {
	    module.exports[sArg.toString()] = sArg;
	    return sArg;
	  }
	  if (typeof sArg === "string") {
	    return module.exports[sArg.toUpperCase()] || defaultLevel;
	  }
	  return toLevel(sArg.toString());
	}

	Level.prototype.toString = function() {
	  return this.levelStr;
	};

	Level.prototype.isLessThanOrEqualTo = function(otherLevel) {
	  if (typeof otherLevel === "string") {
	    otherLevel = toLevel(otherLevel);
	  }
	  return this.level <= otherLevel.level;
	};

	Level.prototype.isGreaterThanOrEqualTo = function(otherLevel) {
	  if (typeof otherLevel === "string") {
	    otherLevel = toLevel(otherLevel);
	  }
	  return this.level >= otherLevel.level;
	};

	Level.prototype.isEqualTo = function(otherLevel) {
	  if (typeof otherLevel === "string") {
	    otherLevel = toLevel(otherLevel);
	  }
	  return this.level === otherLevel.level;
	};

	module.exports = {
	  ALL: new Level(Number.MIN_VALUE, "ALL"),
	  TRACE: new Level(5000, "TRACE"),
	  DEBUG: new Level(10000, "DEBUG"),
	  INFO: new Level(20000, "INFO"),
	  WARN: new Level(30000, "WARN"),
	  ERROR: new Level(40000, "ERROR"),
	  FATAL: new Level(50000, "FATAL"),
	  MARK: new Level(9007199254740992, "MARK"), // 2^53
	  OFF: new Level(Number.MAX_VALUE, "OFF"),
	  toLevel: toLevel,
	  Level: Level
	};


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var levels = __webpack_require__(121)
	, util = __webpack_require__(10)
	, events = __webpack_require__(67)
	, DEFAULT_CATEGORY = '[default]';

	var logWritesEnabled = true;

	/**
	 * Models a logging event.
	 * @constructor
	 * @param {String} categoryName name of category
	 * @param {Log4js.Level} level level of message
	 * @param {Array} data objects to log
	 * @param {Log4js.Logger} logger the associated logger
	 * @author Seth Chisamore
	 */
	function LoggingEvent (categoryName, level, data, logger) {
	  this.startTime = new Date();
	  this.categoryName = categoryName;
	  this.data = data;
	  this.level = level;
	  this.logger = logger;
	}

	/**
	 * Logger to log messages.
	 * use {@see Log4js#getLogger(String)} to get an instance.
	 * @constructor
	 * @param name name of category to log to
	 * @author Stephan Strittmatter
	 */
	function Logger (name, level) {
	  this.category = name || DEFAULT_CATEGORY;

	  if (level) {
	    this.setLevel(level);
	  }
	}
	util.inherits(Logger, events.EventEmitter);
	Logger.DEFAULT_CATEGORY = DEFAULT_CATEGORY;
	Logger.prototype.level = levels.TRACE;

	Logger.prototype.setLevel = function(level) {
	  this.level = levels.toLevel(level, this.level || levels.TRACE);
	};

	Logger.prototype.removeLevel = function() {
	  delete this.level;
	};

	Logger.prototype.log = function() {
	  var logLevel = levels.toLevel(arguments[0], levels.INFO);
	  if (!this.isLevelEnabled(logLevel)) {
	    return;
	  }
	  var numArgs = arguments.length - 1;
	  var args = new Array(numArgs);
	  for (var i = 0; i < numArgs; i++) {
	    args[i] = arguments[i + 1];
	  }
	  this._log(logLevel, args);
	};

	Logger.prototype.isLevelEnabled = function(otherLevel) {
	  return this.level.isLessThanOrEqualTo(otherLevel);
	};

	['Trace','Debug','Info','Warn','Error','Fatal', 'Mark'].forEach(addLevelMethods);

	function addLevelMethods(level) {
	  level = levels.toLevel(level);

	  var levelStrLower = level.toString().toLowerCase();
	  var levelMethod = levelStrLower.replace(/_([a-z])/g, function(g) { return g[1].toUpperCase(); } );
	  var isLevelMethod = levelMethod[0].toUpperCase() + levelMethod.slice(1);

	  Logger.prototype['is'+isLevelMethod+'Enabled'] = function() {
	    return this.isLevelEnabled(level);
	  };

	  Logger.prototype[levelMethod] = function () {
	    if (logWritesEnabled && this.isLevelEnabled(level)) {
	      var numArgs = arguments.length;
	      var args = Array.prototype.slice.call(arguments);
	      this._log(level, args);
	    }
	  };
	}

	Logger.prototype._log = function(level, data) {
	  var loggingEvent = new LoggingEvent(this.category, level, data, this);
	  this.emit('log', loggingEvent);
	};

	/**
	 * Disable all log writes.
	 * @returns {void}
	 */
	function disableAllLogWrites() {
	  logWritesEnabled = false;
	}

	/**
	 * Enable log writes.
	 * @returns {void}
	 */
	function enableAllLogWrites() {
	  logWritesEnabled = true;
	}

	exports.LoggingEvent = LoggingEvent;
	exports.Logger = Logger;
	exports.disableAllLogWrites = disableAllLogWrites;
	exports.enableAllLogWrites = enableAllLogWrites;
	exports.addLevelMethods = addLevelMethods;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./categoryFilter": 124,
		"./categoryFilter.js": 124,
		"./clustered": 125,
		"./clustered.js": 125,
		"./console": 126,
		"./console.js": 126,
		"./dateFile": 127,
		"./dateFile.js": 127,
		"./file": 187,
		"./file.js": 187,
		"./fileSync": 191,
		"./fileSync.js": 191,
		"./gelf": 192,
		"./gelf.js": 192,
		"./hipchat": 193,
		"./hipchat.js": 193,
		"./logFacesAppender": 194,
		"./logFacesAppender.js": 194,
		"./logLevelFilter": 195,
		"./logLevelFilter.js": 195,
		"./loggly": 196,
		"./loggly.js": 196,
		"./logstashUDP": 197,
		"./logstashUDP.js": 197,
		"./mailgun": 198,
		"./mailgun.js": 198,
		"./multiprocess": 199,
		"./multiprocess.js": 199,
		"./slack": 200,
		"./slack.js": 200,
		"./smtp": 201,
		"./smtp.js": 201,
		"./stderr": 202,
		"./stderr.js": 202,
		"./stdout": 203,
		"./stdout.js": 203
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 123;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var log4js = __webpack_require__(116);

	function categoryFilter (excludes, appender) {
	  if (typeof(excludes) === 'string') excludes = [excludes];
	  return function(logEvent) {
	    if (excludes.indexOf(logEvent.categoryName) === -1) {
	      appender(logEvent);
	    }
	  };
	}

	function configure(config, options) {
	  log4js.loadAppender(config.appender.type);
	  var appender = log4js.appenderMakers[config.appender.type](config.appender, options);
	  return categoryFilter(config.exclude, appender);
	}

	exports.appender = categoryFilter;
	exports.configure = configure;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var cluster = __webpack_require__(68);
	var log4js = __webpack_require__(116);

	/**
	 * Takes a loggingEvent object, returns string representation of it.
	 */
	function serializeLoggingEvent(loggingEvent) {
		// JSON.stringify(new Error('test')) returns {}, which is not really useful for us.
		// The following allows us to serialize errors correctly.
		for (var i = 0; i < loggingEvent.data.length; i++) {
			var item = loggingEvent.data[i];
			// Validate that we really are in this case
			if (item && item.stack && JSON.stringify(item) === '{}') {
				loggingEvent.data[i] = {stack : item.stack};
			}
		}
		return JSON.stringify(loggingEvent);
	}

	/**
	 * Takes a string, returns an object with
	 * the correct log properties.
	 *
	 * This method has been "borrowed" from the `multiprocess` appender
	 * by `nomiddlename`
	 * (https://github.com/nomiddlename/log4js-node/blob/master/lib/appenders/multiprocess.js)
	 *
	 * Apparently, node.js serializes everything to strings when using `process.send()`,
	 * so we need smart deserialization that will recreate log date and level for further
	 * processing by log4js internals.
	 */
	function deserializeLoggingEvent(loggingEventString) {

		var loggingEvent;

		try {

			loggingEvent = JSON.parse(loggingEventString);
			loggingEvent.startTime = new Date(loggingEvent.startTime);
			loggingEvent.level = log4js.levels.toLevel(loggingEvent.level.levelStr);
			// Unwrap serialized errors
			for (var i = 0; i < loggingEvent.data.length; i++) {
				var item = loggingEvent.data[i];
				if (item && item.stack) {
					loggingEvent.data[i] = item.stack;
				}
			}

		} catch (e) {

			// JSON.parse failed, just log the contents probably a naughty.
			loggingEvent = {
				startTime: new Date(),
				categoryName: 'log4js',
				level: log4js.levels.ERROR,
				data: [ 'Unable to parse log:', loggingEventString ]
			};
		}
		return loggingEvent;
	}

	/**
	 * Creates an appender.
	 *
	 * If the current process is a master (`cluster.isMaster`), then this will be a "master appender".
	 * Otherwise this will be a worker appender, that just sends loggingEvents to the master process.
	 *
	 * If you are using this method directly, make sure to provide it with `config.actualAppenders`
	 * array of actual appender instances.
	 *
	 * Or better use `configure(config, options)`
	 */
	function createAppender(config) {

		if (cluster.isMaster) {

			var masterAppender = function(loggingEvent) {

				if (config.actualAppenders) {
					var size = config.actualAppenders.length;
					for(var i = 0; i < size; i++) {
	            if (
								!config.appenders[i].category ||
								config.appenders[i].category === loggingEvent.categoryName
							) {
								// Relying on the index is not a good practice but otherwise
								// the change would have been bigger.
								config.actualAppenders[i](loggingEvent);
	      			}
					}
				}
			};

			// Listen on new workers
			cluster.on('fork', function(worker) {

				worker.on('message', function(message) {
					if (message.type && message.type === '::log-message') {
						var loggingEvent = deserializeLoggingEvent(message.event);

						// Adding PID metadata
						loggingEvent.pid = worker.process.pid;
						loggingEvent.cluster = {
							master: process.pid,
							worker: worker.process.pid,
							workerId: worker.id
						};

						masterAppender(loggingEvent);
					}
				});

			});

			return masterAppender;

		} else {

			return function(loggingEvent) {
				// If inside the worker process, then send the logger event to master.
				if (cluster.isWorker) {
					// console.log("worker " + cluster.worker.id + " is sending message");
					process.send({ type: '::log-message', event: serializeLoggingEvent(loggingEvent)});
				}
			};
		}
	}

	function configure(config, options) {

		if (config.appenders && cluster.isMaster) {

			var size = config.appenders.length;
			config.actualAppenders = new Array(size);

			for(var i = 0; i < size; i++) {

				log4js.loadAppender(config.appenders[i].type);
				config.actualAppenders[i] = log4js.appenderMakers[config.appenders[i].type](
					config.appenders[i],
					options
				);

			}
		}

		return createAppender(config);
	}

	exports.appender = createAppender;
	exports.configure = configure;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var layouts = __webpack_require__(117)
	, consoleLog = console.log.bind(console);

	function consoleAppender (layout, timezoneOffset) {
	  layout = layout || layouts.colouredLayout;
	  return function(loggingEvent) {
	    consoleLog(layout(loggingEvent, timezoneOffset));
	  };
	}

	function configure(config) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }
	  return consoleAppender(layout, config.timezoneOffset);
	}

	exports.appender = consoleAppender;
	exports.configure = configure;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	var streams = __webpack_require__(128)
	, layouts = __webpack_require__(117)
	, path = __webpack_require__(96)
	, os = __webpack_require__(186)
	, eol = os.EOL || '\n'
	, openFiles = [];

	//close open files on process exit.
	process.on('exit', function() {
	  openFiles.forEach(function (file) {
	    file.end();
	  });
	});

	/**
	 * File appender that rolls files according to a date pattern.
	 * @filename base filename.
	 * @pattern the format that will be added to the end of filename when rolling,
	 *          also used to check when to roll files - defaults to '.yyyy-MM-dd'
	 * @layout layout function for log messages - defaults to basicLayout
	 * @timezoneOffset optional timezone offset in minutes - defaults to system local
	 */
	function appender(filename, pattern, layout, options, timezoneOffset) {
	  layout = layout || layouts.basicLayout;

	  var logFile = new streams.DateRollingFileStream(
	    filename,
	    pattern,
	    options
	  );
	  openFiles.push(logFile);

	  return function(logEvent) {
	    logFile.write(layout(logEvent, timezoneOffset) + eol, "utf8");
	  };

	}

	function configure(config, options) {
	  var layout;

	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }

	  if (!config.alwaysIncludePattern) {
	    config.alwaysIncludePattern = false;
	  }

	  if (options && options.cwd && !config.absolute) {
	    config.filename = path.join(options.cwd, config.filename);
	  }

	  return appender(
	    config.filename,
	    config.pattern,
	    layout,
	    config,
	    config.timezoneOffset
	  );
	}

	function shutdown(cb) {
	  var completed = 0;
	  var error;
	  var complete = function(err) {
	    error = error || err;
	    completed++;
	    if (completed >= openFiles.length) {
	      cb(error);
	    }
	  };
	  if (!openFiles.length) {
	    return cb();
	  }
	  openFiles.forEach(function(file) {
	    if (!file.write(eol, "utf-8")) {
	      file.once('drain', function() {
	        file.end(complete);
	      });
	    } else {
	      file.end(complete);
	    }
	  });
	}

	exports.appender = appender;
	exports.configure = configure;
	exports.shutdown = shutdown;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	exports.RollingFileStream = __webpack_require__(129);
	exports.DateRollingFileStream = __webpack_require__(184);


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BaseRollingFileStream = __webpack_require__(130)
	, debug = __webpack_require__(175)('streamroller:RollingFileStream')
	, util = __webpack_require__(10)
	, path = __webpack_require__(96)
	, child_process = __webpack_require__(68)
	, fs = __webpack_require__(68);

	module.exports = RollingFileStream;

	function RollingFileStream (filename, size, backups, options) {
	  //if you don't specify a size, this will behave like a normal file stream
	  this.size = size || Number.MAX_SAFE_INTEGER;
	  this.backups = backups || 1;

	  function throwErrorIfArgumentsAreNotValid() {
	    if (!filename || size <= 0) {
	      throw new Error("You must specify a filename and file size");
	    }
	  }

	  throwErrorIfArgumentsAreNotValid();

	  RollingFileStream.super_.call(this, filename, options);
	}
	util.inherits(RollingFileStream, BaseRollingFileStream);

	RollingFileStream.prototype.shouldRoll = function() {
	  debug("should roll with current size " + this.currentSize + " and max size " + this.size);
	  return this.currentSize >= this.size;
	};

	RollingFileStream.prototype.roll = function(filename, callback) {
	  var that = this,
	  nameMatcher = new RegExp('^' + path.basename(filename));

	  function justTheseFiles (item) {
	    return nameMatcher.test(item);
	  }

	  function index(filename_) {
	    debug('Calculating index of '+filename_);
	    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;
	  }

	  function byIndex(a, b) {
	    if (index(a) > index(b)) {
	      return 1;
	    } else if (index(a) < index(b) ) {
	      return -1;
	    } else {
	      return 0;
	    }
	  }

	  function increaseFileIndex (fileToRename, cb) {
	    var idx = index(fileToRename);
	    debug('Index of ' + fileToRename + ' is ' + idx);
	    if (idx < that.backups) {

	      var ext = path.extname(fileToRename);
	      var destination = filename + '.' + (idx+1);
	      if (that.options.compress && /^gz$/.test(ext.substring(1))) {
	        destination+=ext;
	      }
	      //on windows, you can get a EEXIST error if you rename a file to an existing file
	      //so, we'll try to delete the file we're renaming to first
	      fs.unlink(destination, function (err) {
	        //ignore err: if we could not delete, it's most likely that it doesn't exist
	        debug('Renaming ' + fileToRename + ' -> ' + destination);
	        fs.rename(path.join(path.dirname(filename), fileToRename), destination, function(err) {
	          if (err) {
	            cb(err);
	          } else {
	            if (that.options.compress && ext!=".gz") {
	              that.compress(destination, cb);
	            } else {
	              cb();
	            }
	          }
	        });
	      });
	    } else {
	      cb();
	    }
	  }

	  function renameTheFiles(cb) {
	    //roll the backups (rename file.n to file.n+1, where n <= numBackups)
	    debug("Renaming the old files");
	    fs.readdir(path.dirname(filename), function (err, files) {
	      var filesToProcess = files.filter(justTheseFiles).sort(byIndex);
	      (function processOne(err) {
	        var file = filesToProcess.pop();
	        if (!file || err) { return cb(err); }
	        increaseFileIndex(file, processOne);
	      })();
	    });
	  }

	  debug("Rolling, rolling, rolling");
	  this.closeTheStream(
	    renameTheFiles.bind(null,
	      this.openTheStream.bind(this,
	        callback)));

	};


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var fs = __webpack_require__(68)
	, zlib = __webpack_require__(131)
	, debug = __webpack_require__(175)('streamroller:BaseRollingFileStream')
	, util = __webpack_require__(10)
	, stream = __webpack_require__(176);

	module.exports = BaseRollingFileStream;

	function BaseRollingFileStream(filename, options) {
	  debug("In BaseRollingFileStream");
	  this.filename = filename;
	  this.options = options || {};
	  this.options.encoding = this.options.encoding || 'utf8';
	  this.options.mode = this.options.mode || parseInt('0644', 8);
	  this.options.flags = this.options.flags || 'a';

	  this.currentSize = 0;

	  function currentFileSize(file) {
	    var fileSize = 0;
	    try {
	      fileSize = fs.statSync(file).size;
	    } catch (e) {
	      // file does not exist
	    }
	    return fileSize;
	  }

	  function throwErrorIfArgumentsAreNotValid() {
	    if (!filename) {
	      throw new Error("You must specify a filename");
	    }
	  }

	  throwErrorIfArgumentsAreNotValid();
	  debug("Calling BaseRollingFileStream.super");
	  BaseRollingFileStream.super_.call(this);
	  this.openTheStream();
	  this.currentSize = currentFileSize(this.filename);
	}
	util.inherits(BaseRollingFileStream, stream.Writable);

	BaseRollingFileStream.prototype._write = function(chunk, encoding, callback) {
	  var that = this;
	  function writeTheChunk() {
	    debug("writing the chunk to the underlying stream");
	    that.currentSize += chunk.length;
	    try {
	      that.theStream.write(chunk, encoding, callback);
	    }
	    catch (err){
	      debug(err);
	      callback();
	    }
	  }

	  debug("in _write");

	  if (this.shouldRoll()) {
	    this.currentSize = 0;
	    this.roll(this.filename, writeTheChunk);
	  } else {
	    writeTheChunk();
	  }
	};

	BaseRollingFileStream.prototype.openTheStream = function(cb) {
	  debug("opening the underlying stream");
	  var that = this;
	  this.theStream = fs.createWriteStream(this.filename, this.options);
	  this.theStream.on('error', function(err) {
	    that.emit('error', err);
	  });
	  if (cb) {
	    this.theStream.on("open", cb);
	  }
	};

	BaseRollingFileStream.prototype.closeTheStream = function(cb) {
	  debug("closing the underlying stream");
	  this.theStream.end(cb);
	};

	BaseRollingFileStream.prototype.compress = function(filename, cb) {
	    debug('Compressing ', filename, ' -> ', filename, '.gz');
	    var gzip = zlib.createGzip();
	    var inp = fs.createReadStream(filename);
	    var out = fs.createWriteStream(filename+".gz");
	    inp.pipe(gzip).pipe(out);

	    out.on('finish', function(err) {
	      debug('Removing original ', filename);
	      fs.unlink(filename, cb);
	    });
	};

	BaseRollingFileStream.prototype.shouldRoll = function() {
	  return false; // default behaviour is never to roll
	};

	BaseRollingFileStream.prototype.roll = function(filename, callback) {
	  callback(); // default behaviour is not to do anything
	};


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Transform = __webpack_require__(132);

	var binding = __webpack_require__(162);
	var util = __webpack_require__(10);
	var assert = __webpack_require__(174).ok;

	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = (16 * 1024);

	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;

	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

	// expose all the zlib constants
	Object.keys(binding).forEach(function(k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});

	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};

	Object.keys(exports.codes).forEach(function(k) {
	  exports.codes[exports.codes[k]] = k;
	});

	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;

	exports.createDeflate = function(o) {
	  return new Deflate(o);
	};

	exports.createInflate = function(o) {
	  return new Inflate(o);
	};

	exports.createDeflateRaw = function(o) {
	  return new DeflateRaw(o);
	};

	exports.createInflateRaw = function(o) {
	  return new InflateRaw(o);
	};

	exports.createGzip = function(o) {
	  return new Gzip(o);
	};

	exports.createGunzip = function(o) {
	  return new Gunzip(o);
	};

	exports.createUnzip = function(o) {
	  return new Unzip(o);
	};


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};

	exports.deflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};

	exports.gzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};

	exports.gzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};

	exports.deflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};

	exports.deflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};

	exports.unzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};

	exports.unzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};

	exports.inflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};

	exports.inflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};

	exports.gunzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};

	exports.gunzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};

	exports.inflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};

	exports.inflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH &&
	        opts.flush !== binding.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding.Z_SYNC_FLUSH &&
	        opts.flush !== binding.Z_FULL_FLUSH &&
	        opts.flush !== binding.Z_FINISH &&
	        opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
	        opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
	        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL ||
	        opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
	        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED &&
	        opts.strategy != exports.Z_HUFFMAN_ONLY &&
	        opts.strategy != exports.Z_RLE &&
	        opts.strategy != exports.Z_FIXED &&
	        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };

	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	util.inherits(Zlib, Transform);

	Zlib.prototype.params = function(level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL ||
	      level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED &&
	      strategy != exports.Z_HUFFMAN_ONLY &&
	      strategy != exports.Z_RLE &&
	      strategy != exports.Z_FIXED &&
	      strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};

	Zlib.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib.prototype.close = function(callback) {
	  if (callback)
	    process.nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  process.nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !Buffer.isBuffer(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }

	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer, __webpack_require__(11)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(133)


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(134);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	var Readable = __webpack_require__(138);
	var Writable = __webpack_require__(161);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 137 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(139);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(67).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(140);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(67).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(159);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(160);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(134);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(152).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(134);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(152).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 139 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(67).EventEmitter;
	var inherits = __webpack_require__(137);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(141);
	Stream.Writable = __webpack_require__(155);
	Stream.Duplex = __webpack_require__(156);
	Stream.Transform = __webpack_require__(157);
	Stream.PassThrough = __webpack_require__(158);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(140); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(142);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(148);
	exports.Duplex = __webpack_require__(147);
	exports.Transform = __webpack_require__(153);
	exports.PassThrough = __webpack_require__(154);

	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(143);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(67).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(140);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(67).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(145);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(146);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(147);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(152).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(147);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(152).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(91);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 145 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	var Readable = __webpack_require__(142);
	var Writable = __webpack_require__(148);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(151)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(140);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(67).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(147);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(147);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(149).setImmediate))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(150);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(11)))

/***/ },
/* 151 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(91).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(147);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(153);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(148)


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(147)


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(153)


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(154)


/***/ },
/* 159 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(135);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(151)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(140);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(67).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(91).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(144);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(134);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(134);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(149).setImmediate))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(163);
	var zstream = __webpack_require__(164);
	var zlib_deflate = __webpack_require__(165);
	var zlib_inflate = __webpack_require__(170);
	var constants = __webpack_require__(173);

	for (var key in constants) {
	  exports[key] = constants[key];
	}

	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;

	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP)
	    throw new TypeError("Bad argument");
	    
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	  
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
	    this.windowBits += 16;
	    
	  if (this.mode === exports.UNZIP)
	    this.windowBits += 32;
	    
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
	    this.windowBits = -this.windowBits;
	    
	  this.strm = new zstream();
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(
	        this.strm,
	        this.level,
	        exports.Z_DEFLATED,
	        this.windowBits,
	        this.memLevel,
	        this.strategy
	      );
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status  = zlib_inflate.inflateInit2(
	        this.strm,
	        this.windowBits
	      );
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	  
	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error("deflateParams Not supported");
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error("write before init");
	    
	  if (this.mode === exports.NONE)
	    throw new Error("already finalized");
	    
	  if (this.write_in_progress)
	    throw new Error("write already in progress");
	    
	  if (this.pending_close)
	    throw new Error("close is pending");
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
	  this._writeCheck();
	  this.write_in_progress = true;
	  
	  var self = this;
	  process.nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	    
	    if (self.pending_close)
	      self.close();
	  });
	  
	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	  
	  if (flush !== exports.Z_NO_FLUSH &&
	      flush !== exports.Z_PARTIAL_FLUSH &&
	      flush !== exports.Z_SYNC_FLUSH &&
	      flush !== exports.Z_FULL_FLUSH &&
	      flush !== exports.Z_FINISH &&
	      flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	  
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  
	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;
	  
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	  
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  
	  this.pending_close = false;
	  
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  
	  this.mode = exports.NONE;
	};

	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	  
	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	exports.Zlib = Zlib;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(91).Buffer))

/***/ },
/* 163 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 164 */
/***/ function(module, exports) {

	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils   = __webpack_require__(166);
	var trees   = __webpack_require__(167);
	var adler32 = __webpack_require__(168);
	var crc32   = __webpack_require__(169);
	var msg     = __webpack_require__(163);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}


	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ },
/* 166 */
/***/ function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(166);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ },
/* 168 */
/***/ function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ },
/* 169 */
/***/ function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils         = __webpack_require__(166);
	var adler32       = __webpack_require__(168);
	var crc32         = __webpack_require__(169);
	var inflate_fast  = __webpack_require__(171);
	var inflate_table = __webpack_require__(172);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 171 */
/***/ function(module, exports) {

	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(166);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 173 */
/***/ function(module, exports) {

	'use strict';


	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(10);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 175 */
/***/ function(module, exports) {

	
	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  if (!debug.enabled(name)) return function(){};

	  return function(fmt){
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;

	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);

	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}

	/**
	 * The currently active debug mode names.
	 */

	debug.names = [];
	debug.skips = [];

	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */

	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}

	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;

	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	debug.disable = function(){
	  debug.enable('');
	};

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	// persist

	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(177);
	exports.Stream = __webpack_require__(140);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(181);
	exports.Duplex = __webpack_require__(180);
	exports.Transform = __webpack_require__(182);
	exports.PassThrough = __webpack_require__(183);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(140);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(178);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(91).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(67).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(140);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(179);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(180);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(152).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(180);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(152).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 178 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 179 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	var Readable = __webpack_require__(177);
	var Writable = __webpack_require__(181);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(91).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	var Stream = __webpack_require__(140);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(180);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(180);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(180);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(182);

	/*<replacement>*/
	var util = __webpack_require__(136);
	util.inherits = __webpack_require__(137);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BaseRollingFileStream = __webpack_require__(130)
	, debug = __webpack_require__(175)('streamroller:DateRollingFileStream')
	, format = __webpack_require__(185)
	, fs = __webpack_require__(68)
	, util = __webpack_require__(10);

	module.exports = DateRollingFileStream;

	function findTimestampFromFileIfExists(filename, now) {
	  return fs.existsSync(filename) ? fs.statSync(filename).mtime : new Date(now());
	}

	function DateRollingFileStream(filename, pattern, options, now) {
	  debug("Now is ", now);
	  if (pattern && typeof(pattern) === 'object') {
	    now = options;
	    options = pattern;
	    pattern = null;
	  }
	  this.pattern = pattern || '.yyyy-MM-dd';
	  this.now = now || Date.now;
	  this.lastTimeWeWroteSomething = format.asString(
	    this.pattern,
	    findTimestampFromFileIfExists(filename, this.now)
	  );

	  this.baseFilename = filename;
	  this.alwaysIncludePattern = false;

	  if (options) {
	    if (options.alwaysIncludePattern) {
	      this.alwaysIncludePattern = true;
	      filename = this.baseFilename + this.lastTimeWeWroteSomething;
	    }
	    delete options.alwaysIncludePattern;
	    if (Object.keys(options).length === 0) {
	      options = null;
	    }
	  }
	  debug("this.now is ", this.now, ", now is ", now);

	  DateRollingFileStream.super_.call(this, filename, options);
	}
	util.inherits(DateRollingFileStream, BaseRollingFileStream);

	DateRollingFileStream.prototype.shouldRoll = function() {
	  var lastTime = this.lastTimeWeWroteSomething,
	  thisTime = format.asString(this.pattern, new Date(this.now()));

	  debug("DateRollingFileStream.shouldRoll with now = ",
	        this.now(), ", thisTime = ", thisTime, ", lastTime = ", lastTime);

	  this.lastTimeWeWroteSomething = thisTime;
	  this.previousTime = lastTime;

	  return thisTime !== lastTime;
	};

	DateRollingFileStream.prototype.roll = function(filename, callback) {
	  var that = this;

	  debug("Starting roll");

	  if (this.alwaysIncludePattern) {
	    this.filename = this.baseFilename + this.lastTimeWeWroteSomething;
	    this.closeTheStream(this.openTheStream.bind(this, callback));
	  } else {
	    var newFilename = this.baseFilename + this.previousTime;
	    this.closeTheStream(
	      deleteAnyExistingFile.bind(null,
	        renameTheCurrentFile.bind(null,
	          this.compressIfNeeded.bind(this, newFilename,
	            this.openTheStream.bind(this,
	              callback)))));
	  }

	  function deleteAnyExistingFile(cb) {
	    //on windows, you can get a EEXIST error if you rename a file to an existing file
	    //so, we'll try to delete the file we're renaming to first
	    fs.unlink(newFilename, function (err) {
	      //ignore err: if we could not delete, it's most likely that it doesn't exist
	      cb();
	    });
	  }

	  function renameTheCurrentFile(cb) {
	    debug("Renaming the ", filename, " -> ", newFilename);
	    fs.rename(filename, newFilename, cb);
	  }
	};

	DateRollingFileStream.prototype.compressIfNeeded = function(filename, cb) {
	  debug("Checking if we need to compress the old file");
	  if (this.options.compress) {
	    this.compress(filename, cb);
	  } else {
	    cb();
	  }
	};


/***/ },
/* 185 */
/***/ function(module, exports) {

	"use strict";
	exports.ISO8601_FORMAT = "yyyy-MM-dd hh:mm:ss.SSS";
	exports.ISO8601_WITH_TZ_OFFSET_FORMAT = "yyyy-MM-ddThh:mm:ssO";
	exports.DATETIME_FORMAT = "dd MM yyyy hh:mm:ss.SSS";
	exports.ABSOLUTETIME_FORMAT = "hh:mm:ss.SSS";

	function padWithZeros(vNumber, width) {
	  var numAsString = vNumber + "";
	  while (numAsString.length < width) {
	    numAsString = "0" + numAsString;
	  }
	  return numAsString;
	}
	  
	function addZero(vNumber) {
	  return padWithZeros(vNumber, 2);
	}

	/**
	 * Formats the TimeOffest
	 * Thanks to http://www.svendtofte.com/code/date_format/
	 * @private
	 */
	function offset(date) {
	  // Difference to Greenwich time (GMT) in hours
	  var os = Math.abs(date.getTimezoneOffset());
	  var h = String(Math.floor(os/60));
	  var m = String(os%60);
	  if (h.length == 1) {
	    h = "0" + h;
	  }
	  if (m.length == 1) {
	    m = "0" + m;
	  }
	  return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
	}

	exports.asString = function(/*format,*/ date) {
	  var format = exports.ISO8601_FORMAT;
	  if (typeof(date) === "string") {
	    format = arguments[0];
	    date = arguments[1];
	  }

	  var vDay = addZero(date.getDate());
	  var vMonth = addZero(date.getMonth()+1);
	  var vYearLong = addZero(date.getFullYear());
	  var vYearShort = addZero(date.getFullYear().toString().substring(2,4));
	  var vYear = (format.indexOf("yyyy") > -1 ? vYearLong : vYearShort);
	  var vHour  = addZero(date.getHours());
	  var vMinute = addZero(date.getMinutes());
	  var vSecond = addZero(date.getSeconds());
	  var vMillisecond = padWithZeros(date.getMilliseconds(), 3);
	  var vTimeZone = offset(date);
	  var formatted = format
	    .replace(/dd/g, vDay)
	    .replace(/MM/g, vMonth)
	    .replace(/y{1,4}/g, vYear)
	    .replace(/hh/g, vHour)
	    .replace(/mm/g, vMinute)
	    .replace(/ss/g, vSecond)
	    .replace(/SSS/g, vMillisecond)
	    .replace(/O/g, vTimeZone);
	  return formatted;

	};


/***/ },
/* 186 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	var debug = __webpack_require__(188)('log4js:file')
	, layouts = __webpack_require__(117)
	, path = __webpack_require__(96)
	, fs = __webpack_require__(68)
	, streams = __webpack_require__(128)
	, os = __webpack_require__(186)
	, eol = os.EOL || '\n'
	, openFiles = []
	, levels = __webpack_require__(121);

	//close open files on process exit.
	process.on('exit', function() {
	  debug('Exit handler called.');
	  openFiles.forEach(function (file) {
	    file.end();
	  });
	});

	// On SIGHUP, close and reopen all files. This allows this appender to work with
	// logrotate. Note that if you are using logrotate, you should not set
	// `logSize`.
	process.on('SIGHUP', function() {
	  debug('SIGHUP handler called.');
	  openFiles.forEach(function(writer) {
	    writer.closeTheStream(writer.openTheStream.bind(writer));
	  });
	});

	/**
	 * File Appender writing the logs to a text file. Supports rolling of logs by size.
	 *
	 * @param file file log messages will be written to
	 * @param layout a function that takes a logevent and returns a string
	 *   (defaults to basicLayout).
	 * @param logSize - the maximum size (in bytes) for a log file,
	 *   if not provided then logs won't be rotated.
	 * @param numBackups - the number of log files to keep after logSize
	 *   has been reached (default 5)
	 * @param options - options to be passed to the underlying stream
	 * @param timezoneOffset - optional timezone offset in minutes (default system local)
	 */
	function fileAppender (file, layout, logSize, numBackups, options, timezoneOffset) {
	  file = path.normalize(file);
	  layout = layout || layouts.basicLayout;
	  numBackups = numBackups === undefined ? 5 : numBackups;
	  //there has to be at least one backup if logSize has been specified
	  numBackups = numBackups === 0 ? 1 : numBackups;

	  debug("Creating file appender (",
	    file, ", ",
	    logSize, ", ",
	    numBackups, ", ",
	    options, ", ",
	    timezoneOffset, ")"
	  );
	  var writer = openTheStream(file, logSize, numBackups, options);

	  // push file to the stack of open handlers
	  openFiles.push(writer);

	  return function(loggingEvent) {
	    writer.write(layout(loggingEvent, timezoneOffset) + eol, "utf8");
	  };

	}

	function openTheStream(file, fileSize, numFiles, options) {
	  var stream = new streams.RollingFileStream(
	    file,
	    fileSize,
	    numFiles,
	    options
	  );
	  stream.on("error", function (err) {
	    console.error("log4js.fileAppender - Writing to file %s, error happened ", file, err);
	  });
	  return stream;
	}


	function configure(config, options) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }

	  if (options && options.cwd && !config.absolute) {
	    config.filename = path.join(options.cwd, config.filename);
	  }

	  return fileAppender(
	    config.filename,
	    layout,
	    config.maxLogSize,
	    config.backups,
	    config,
	    config.timezoneOffset
	  );
	}

	function shutdown(cb) {
	  var completed = 0;
	  var error;
	  var complete = function(err) {
	    error = error || err;
	    completed++;
	    if (completed >= openFiles.length) {
	      cb(error);
	    }
	  };
	  if (!openFiles.length) {
	    return cb();
	  }
	  openFiles.forEach(function(file) {
	    var stream = file;
	    if (!stream.write(eol, "utf-8")) {
	      stream.once('drain', function() {
	        stream.end(complete);
	      });
	    } else {
	      stream.end(complete);
	    }
	  });
	}

	exports.appender = fileAppender;
	exports.configure = configure;
	exports.shutdown = shutdown;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(189);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && 'process' in window && window.process.type === 'renderer') {
	    return true;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit')

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    return exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (typeof process !== 'undefined' && 'env' in process) {
	    return process.env.DEBUG;
	  }
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug.default = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(190);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  return debug;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 190 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000
	var m = s * 60
	var h = m * 60
	var d = h * 24
	var y = d * 365.25

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function (val, options) {
	  options = options || {}
	  var type = typeof val
	  if (type === 'string' && val.length > 0) {
	    return parse(val)
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ?
				fmtLong(val) :
				fmtShort(val)
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
	}

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str)
	  if (str.length > 10000) {
	    return
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
	  if (!match) {
	    return
	  }
	  var n = parseFloat(match[1])
	  var type = (match[2] || 'ms').toLowerCase()
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n
	    default:
	      return undefined
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd'
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h'
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm'
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's'
	  }
	  return ms + 'ms'
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms'
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's'
	}


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var debug = __webpack_require__(188)('log4js:fileSync')
	, layouts = __webpack_require__(117)
	, path = __webpack_require__(96)
	, fs = __webpack_require__(68)
	, os = __webpack_require__(186)
	, eol = os.EOL || '\n'
	;

	function RollingFileSync (filename, size, backups, options) {
	  debug("In RollingFileStream");

	  function throwErrorIfArgumentsAreNotValid() {
	    if (!filename || !size || size <= 0) {
	      throw new Error("You must specify a filename and file size");
	    }
	  }

	  throwErrorIfArgumentsAreNotValid();

	  this.filename = filename;
	  this.size = size;
	  this.backups = backups || 1;
	  this.options = options || { encoding: 'utf8', mode: parseInt('0644', 8), flags: 'a' };
	  this.currentSize = 0;

	  function currentFileSize(file) {
	    var fileSize = 0;
	    try {
	      fileSize = fs.statSync(file).size;
	    } catch (e) {
	      // file does not exist
	      fs.appendFileSync(filename, '');
	    }
	    return fileSize;
	  }

	  this.currentSize = currentFileSize(this.filename);
	}

	RollingFileSync.prototype.shouldRoll = function() {
	  debug("should roll with current size %d, and max size %d", this.currentSize, this.size);
	  return this.currentSize >= this.size;
	};

	RollingFileSync.prototype.roll = function(filename) {
	  var that = this,
	  nameMatcher = new RegExp('^' + path.basename(filename));

	  function justTheseFiles (item) {
	    return nameMatcher.test(item);
	  }

	  function index(filename_) {
	    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;
	  }

	  function byIndex(a, b) {
	    if (index(a) > index(b)) {
	      return 1;
	    } else if (index(a) < index(b) ) {
	      return -1;
	    } else {
	      return 0;
	    }
	  }

	  function increaseFileIndex (fileToRename) {
	    var idx = index(fileToRename);
	    debug('Index of ' + fileToRename + ' is ' + idx);
	    if (idx < that.backups) {
	      //on windows, you can get a EEXIST error if you rename a file to an existing file
	      //so, we'll try to delete the file we're renaming to first
	      try {
	        fs.unlinkSync(filename + '.' + (idx+1));
	      } catch(e) {
	        //ignore err: if we could not delete, it's most likely that it doesn't exist
	      }

	      debug('Renaming ' + fileToRename + ' -> ' + filename + '.' + (idx+1));
	      fs.renameSync(path.join(path.dirname(filename), fileToRename), filename + '.' + (idx + 1));
	    }
	  }

	  function renameTheFiles() {
	    //roll the backups (rename file.n to file.n+1, where n <= numBackups)
	    debug("Renaming the old files");

	    var files = fs.readdirSync(path.dirname(filename));
	    files.filter(justTheseFiles).sort(byIndex).reverse().forEach(increaseFileIndex);
	  }

	  debug("Rolling, rolling, rolling");
	  renameTheFiles();
	};

	RollingFileSync.prototype.write = function(chunk, encoding) {
	  var that = this;


	  function writeTheChunk() {
	    debug("writing the chunk to the file");
	    that.currentSize += chunk.length;
	    fs.appendFileSync(that.filename, chunk);
	  }

	  debug("in write");


	  if (this.shouldRoll()) {
	    this.currentSize = 0;
	    this.roll(this.filename);
	  }

	  writeTheChunk();
	};


	/**
	 * File Appender writing the logs to a text file. Supports rolling of logs by size.
	 *
	 * @param file file log messages will be written to
	 * @param layout a function that takes a logevent and returns a string
	 *   (defaults to basicLayout).
	 * @param logSize - the maximum size (in bytes) for a log file,
	 *   if not provided then logs won't be rotated.
	 * @param numBackups - the number of log files to keep after logSize
	 *   has been reached (default 5)
	 * @param timezoneOffset - optional timezone offset in minutes
	 *   (default system local)
	 */
	function fileAppender (file, layout, logSize, numBackups, timezoneOffset) {
	  debug("fileSync appender created");
	  var bytesWritten = 0;
	  file = path.normalize(file);
	  layout = layout || layouts.basicLayout;
	  numBackups = numBackups === undefined ? 5 : numBackups;
	  //there has to be at least one backup if logSize has been specified
	  numBackups = numBackups === 0 ? 1 : numBackups;

	  function openTheStream(file, fileSize, numFiles) {
	    var stream;

	    if (fileSize) {
	      stream = new RollingFileSync(
	        file,
	        fileSize,
	        numFiles
	      );
	    } else {
	      stream = (function(f) {
	        // create file if it doesn't exist
	        if (!fs.existsSync(f))
	            fs.appendFileSync(f, '');

	        return {
	            write: function(data) {
	                fs.appendFileSync(f, data);
	            }
	        };
	      })(file);
	    }

	    return stream;
	  }

	  var logFile = openTheStream(file, logSize, numBackups);

	  return function(loggingEvent) {
	    logFile.write(layout(loggingEvent, timezoneOffset) + eol);
	  };
	}

	function configure(config, options) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }

	  if (options && options.cwd && !config.absolute) {
	    config.filename = path.join(options.cwd, config.filename);
	  }

	  return fileAppender(
	    config.filename,
	    layout,
	    config.maxLogSize,
	    config.backups,
	    config.timezoneOffset
	  );
	}

	exports.appender = fileAppender;
	exports.configure = configure;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {"use strict";
	var zlib = __webpack_require__(131);
	var layouts = __webpack_require__(117);
	var levels = __webpack_require__(121);
	var dgram = __webpack_require__(68);
	var util = __webpack_require__(10);
	var debug = __webpack_require__(188)('log4js:gelf');

	var LOG_EMERG=0;    // system is unusable
	var LOG_ALERT=1;    // action must be taken immediately
	var LOG_CRIT=2;     // critical conditions
	var LOG_ERR=3;      // error conditions
	var LOG_ERROR=3;    // because people WILL typo
	var LOG_WARNING=4;  // warning conditions
	var LOG_NOTICE=5;   // normal, but significant, condition
	var LOG_INFO=6;     // informational message
	var LOG_DEBUG=7;    // debug-level message

	var levelMapping = {};
	levelMapping[levels.ALL] = LOG_DEBUG;
	levelMapping[levels.TRACE] = LOG_DEBUG;
	levelMapping[levels.DEBUG] = LOG_DEBUG;
	levelMapping[levels.INFO] = LOG_INFO;
	levelMapping[levels.WARN] = LOG_WARNING;
	levelMapping[levels.ERROR] = LOG_ERR;
	levelMapping[levels.FATAL] = LOG_CRIT;

	var client;

	/**
	 * GELF appender that supports sending UDP packets to a GELF compatible server such as Graylog
	 *
	 * @param layout a function that takes a logevent and returns a string (defaults to none).
	 * @param host - host to which to send logs (default:localhost)
	 * @param port - port at which to send logs to (default:12201)
	 * @param hostname - hostname of the current host (default:os hostname)
	 * @param facility - facility to log to (default:nodejs-server)
	 */
	 /* jshint maxstatements:21 */
	function gelfAppender (layout, host, port, hostname, facility) {
	  var config, customFields;
	  if (typeof(host) === 'object') {
	    config = host;
	    host = config.host;
	    port = config.port;
	    hostname = config.hostname;
	    facility = config.facility;
	    customFields = config.customFields;
	  }

	  host = host || 'localhost';
	  port = port || 12201;
	  hostname = hostname || __webpack_require__(186).hostname();
	  layout = layout || layouts.messagePassThroughLayout;

	  var defaultCustomFields = customFields || {};

	  if(facility) {
	    defaultCustomFields._facility = facility;
	  }

	  client = dgram.createSocket("udp4");

	  process.on('exit', function() {
	    if (client) client.close();
	  });

	  /**
	   * Add custom fields (start with underscore )
	   * - if the first object passed to the logger contains 'GELF' field,
	   *   copy the underscore fields to the message
	   * @param loggingEvent
	   * @param msg
	   */
	  function addCustomFields(loggingEvent, msg){

	    /* append defaultCustomFields firsts */
	    Object.keys(defaultCustomFields).forEach(function(key) {
	      // skip _id field for graylog2, skip keys not starts with UNDERSCORE
	      if (key.match(/^_/) && key !== "_id") {
	        msg[key] = defaultCustomFields[key];
	      }
	    });

	    /* append custom fields per message */
	    var data = loggingEvent.data;
	    if (!Array.isArray(data) || data.length === 0) return;
	    var firstData = data[0];

	    if (!firstData.GELF) return; // identify with GELF field defined
	    // Remove the GELF key, some gelf supported logging systems drop the message with it
	    delete firstData.GELF;
	    Object.keys(firstData).forEach(function(key) {
	      // skip _id field for graylog2, skip keys not starts with UNDERSCORE
	      if (key.match(/^_/) || key !== "_id") {
	        msg[key] = firstData[key];
	      }
	    });

	    /* the custom field object should be removed, so it will not be looged by the later appenders */
	    loggingEvent.data.shift();
	  }

	  function preparePacket(loggingEvent) {
	    var msg = {};
	    addCustomFields(loggingEvent, msg);
	    msg.short_message = layout(loggingEvent);

	    msg.version="1.1";
	    msg.timestamp = msg.timestamp || new Date().getTime() / 1000; // log should use millisecond
	    msg.host = hostname;
	    msg.level = levelMapping[loggingEvent.level || levels.DEBUG];
	    return msg;
	  }

	  function sendPacket(packet) {
	    client.send(packet, 0, packet.length, port, host, function(err) {
	      if (err) { console.error(err); }
	    });
	  }

	  return function(loggingEvent) {
	    var message = preparePacket(loggingEvent);
	    zlib.gzip(new Buffer(JSON.stringify(message)), function(err, packet) {
	      if (err) {
	        console.error(err.stack);
	      } else {
	        if (packet.length > 8192) {
	          debug("Message packet length (" + packet.length + ") is larger than 8k. Not sending");
	        } else {
	          sendPacket(packet);
	        }
	      }
	    });
	  };
	}

	function configure(config) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }
	  return gelfAppender(layout, config);
	}

	function shutdown(cb) {
	  if (client) {
	    client.close(cb);
	    client = null;
	  }
	}

	exports.appender = gelfAppender;
	exports.configure = configure;
	exports.shutdown = shutdown;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(91).Buffer))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var hipchat = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"hipchat-notifier\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var layouts = __webpack_require__(117);

	exports.name = 'hipchat';
	exports.appender  = hipchatAppender;
	exports.configure = hipchatConfigure;

	/**
	  @invoke as

	  log4js.configure({
	    "appenders": [
	      {
	        "type" : "hipchat",
	        "hipchat_token": "< User token with Notification Privileges >",
	        "hipchat_room": "< Room ID or Name >",
	        // optionl
	        "hipchat_from": "[ additional from label ]",
	        "hipchat_notify": "[ notify boolean to bug people ]",
	        "hipchat_host" : "api.hipchat.com"
	      }
	    ]
	  });

	  var logger = log4js.getLogger("hipchat");
	  logger.warn("Test Warn message");

	  @invoke
	 */

	function hipchatNotifierResponseCallback(err, response, body){
	  if(err) {
	    throw err;
	  }
	}

	function hipchatAppender(config) {

		var notifier = hipchat.make(config.hipchat_room, config.hipchat_token);

	  // @lint W074 This function's cyclomatic complexity is too high. (10)
	  return function(loggingEvent){

	    var notifierFn;

	    notifier.setRoom(config.hipchat_room);
	    notifier.setFrom(config.hipchat_from || '');
	    notifier.setNotify(config.hipchat_notify || false);

	    if(config.hipchat_host) {
	      notifier.setHost(config.hipchat_host);
	    }

	    switch (loggingEvent.level.toString()) {
	      case "TRACE":
	      case "DEBUG":
	        notifierFn = "info";
	        break;
	      case "WARN":
	        notifierFn = "warning";
	        break;
	      case "ERROR":
	      case "FATAL":
	        notifierFn = "failure";
	        break;
	      default:
	        notifierFn = "success";
	    }

	    // @TODO, re-work in timezoneOffset ?
	    var layoutMessage = config.layout(loggingEvent);

	    // dispatch hipchat api request, do not return anything
	    //  [overide hipchatNotifierResponseCallback]
	    notifier[notifierFn](layoutMessage, config.hipchat_response_callback ||
	      hipchatNotifierResponseCallback);
	  };
	}

	function hipchatConfigure(config) {
		var layout;

		if (!config.layout) {
			config.layout = layouts.messagePassThroughLayout;
		}

		return hipchatAppender(config, layout);
	}


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	* logFaces appender sends JSON formatted log events to logFaces server UDP receivers.
	* Events contain the following properties:
	*  - application name (taken from configuration)
	*  - host name (taken from underlying os)
	*  - time stamp
	*  - level
	*  - logger name (e.g. category)
	*  - thread name (current process id)
	*  - message text
	*/

	"use strict";
	var dgram = __webpack_require__(68),
	    layouts = __webpack_require__(117),
	    os = __webpack_require__(186),
	    util = __webpack_require__(10);

	try{
	 	var process = __webpack_require__(11);
	}
	catch(error){
	   //this module is optional as it may not be available
	 	//in older versions of node.js, so ignore if it failes to load
	}

	function logFacesAppender (config, layout) {
	  var lfsSock = dgram.createSocket('udp4');
	  var localhost = "";

	  if(os && os.hostname())
	     localhost = os.hostname().toString();

	   var pid = "";
	   if(process && process.pid)
	      pid = process.pid;

	  return function log(loggingEvent) {
	    var lfsEvent = {
	      a: config.application || "",                      // application name
	      h: localhost,                                     // this host name
	      t: loggingEvent.startTime.getTime(),              // time stamp
	      p: loggingEvent.level.levelStr,                   // level (priority)
	      g: loggingEvent.categoryName,                     // logger name
	      r: pid,                                           // thread (process id)
	      m: layout(loggingEvent)                           // message text
	    };

	    var buffer = new Buffer(JSON.stringify(lfsEvent));
	    var lfsHost = config.remoteHost || "127.0.0.1";
	    var lfsPort = config.port || 55201;
	    lfsSock.send(buffer, 0, buffer.length, lfsPort, lfsHost, function(err, bytes) {
	       if(err) {
	         console.error("log4js.logFacesAppender send to %s:%d failed, error: %s",
	                        config.host, config.port, util.inspect(err));
	       }
	    });
	  };
	}

	function configure(config) {
		var layout;
		if (config.layout)
			layout = layouts.layout(config.layout.type, config.layout);
	    else
	       layout = layouts.layout("pattern", {"type": "pattern", "pattern": "%m"});
	   return logFacesAppender(config, layout);
	}

	exports.appender = logFacesAppender;
	exports.configure = configure;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var levels = __webpack_require__(121)
	, log4js = __webpack_require__(116);

	function logLevelFilter (minLevelString, maxLevelString, appender) {
	  var minLevel = levels.toLevel(minLevelString);
	  var maxLevel = levels.toLevel(maxLevelString, levels.FATAL);
	  return function(logEvent) {
	      var eventLevel = logEvent.level;
	      if (eventLevel.isGreaterThanOrEqualTo(minLevel) && eventLevel.isLessThanOrEqualTo(maxLevel)) {
	      appender(logEvent);
	    }
	  };
	}

	function configure(config, options) {
	  log4js.loadAppender(config.appender.type);
	  var appender = log4js.appenderMakers[config.appender.type](config.appender, options);
	  return logLevelFilter(config.level, config.maxLevel, appender);
	}

	exports.appender = logLevelFilter;
	exports.configure = configure;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var layouts = __webpack_require__(117)
	, loggly = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"loggly\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	, os = __webpack_require__(186)
	, passThrough = layouts.messagePassThroughLayout;


	function isAnyObject(value) {
		return value !== null && (typeof value === 'object' || typeof value === 'function');
	}

	function numKeys(o) {
	  var res = 0;
	  for (var k in o) {
	    if (o.hasOwnProperty(k)) res++;
	  }
	  return res;
	}

	/**
	 * @param msg - array of args for logging.
	 * @returns { deTaggedMsg: [], additionalTags: [] }
	 */
	function processTags(msgListArgs) {
	  var msgList = (msgListArgs.length === 1 ? [msgListArgs[0]] : Array.apply(null, msgListArgs));

	  return msgList.reduce(function (accum, element, currentIndex, array) {
	    if (isAnyObject(element) && Array.isArray(element.tags) && numKeys(element) == 1) {
	      accum.additionalTags = accum.additionalTags.concat(element.tags);
	    } else {
	      accum.deTaggedData.push(element);
	    }
	    return accum;
	  }, { deTaggedData: [], additionalTags: [] });
	}

	/**
	 * Loggly Appender. Sends logging events to Loggly using node-loggly, optionally adding tags.
	 *
	 * This appender will scan the msg from the logging event, and pull out any argument of the
	 * shape `{ tags: [] }` so that it's possibleto add tags in a normal logging call.
	 *
	 * For example:
	 *
	 * logger.info({ tags: ['my-tag-1', 'my-tag-2'] }, 'Some message', someObj, ...)
	 *
	 * And then this appender will remove the tags param and append it to the config.tags.
	 *
	 * @param config object with loggly configuration data
	 * {
	 *   token: 'your-really-long-input-token',
	 *   subdomain: 'your-subdomain',
	 *   tags: ['loggly-tag1', 'loggly-tag2', .., 'loggly-tagn']
	 * }
	 * @param layout a function that takes a logevent and returns a string (defaults to objectLayout).
	 */
	function logglyAppender(config, layout) {
		var client = loggly.createClient(config);
	  if(!layout) layout = passThrough;

	  return function(loggingEvent) {
	    var result = processTags(loggingEvent.data);
	    var deTaggedData = result.deTaggedData;
	    var additionalTags = result.additionalTags;

	    // Replace the data property with the deTaggedData
	    loggingEvent.data = deTaggedData;

	    var msg = layout(loggingEvent);

			client.log({
				msg: msg,
				level: loggingEvent.level.levelStr,
				category: loggingEvent.categoryName,
				hostname: os.hostname().toString(),
			}, additionalTags);
	  };
	}

	function configure(config) {
		var layout;
		if (config.layout) {
			layout = layouts.layout(config.layout.type, config.layout);
		}
		return logglyAppender(config, layout);
	}

	exports.name      = 'loggly';
	exports.appender  = logglyAppender;
	exports.configure = configure;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	var layouts = __webpack_require__(117)
	, dgram = __webpack_require__(68)
	, util = __webpack_require__(10);

	function logstashUDP (config, layout) {
	  var udp = dgram.createSocket('udp4');
	  var type = config.logType ? config.logType : config.category;
	  layout = layout || layouts.dummyLayout;
	  if(!config.fields) {
	    config.fields = {};
	  }
	  return function log(loggingEvent) {

	    /*
	      https://gist.github.com/jordansissel/2996677
	      {
	        "message"    => "hello world",
	        "@version"   => "1",
	        "@timestamp" => "2014-04-22T23:03:14.111Z",
	        "type"       => "stdin",
	        "host"       => "hello.local"
	      }
	      @timestamp is the ISO8601 high-precision timestamp for the event.
	      @version is the version number of this json schema
	      Every other field is valid and fine.
	    */

	    if (loggingEvent.data.length > 1) {
	      var secondEvData = loggingEvent.data[1];
	      for (var k in secondEvData) {
	        config.fields[k] = secondEvData[k];
	      }
	    }
	    config.fields.level = loggingEvent.level.levelStr;
	    config.fields.category = loggingEvent.categoryName;

	    var logObject = {
	      "@version" : "1",
	      "@timestamp" : (new Date(loggingEvent.startTime)).toISOString(),
	      "type" : config.logType ? config.logType : config.category,
	      "message" : layout(loggingEvent),
	      "fields" : config.fields
	    };
	    sendLog(udp, config.host, config.port, logObject);
	  };
	}

	function sendLog(udp, host, port, logObject) {
	  var buffer = new Buffer(JSON.stringify(logObject));
	  udp.send(buffer, 0, buffer.length, port, host, function(err, bytes) {
	    if(err) {
	      console.error(
	        "log4js.logstashUDP - %s:%p Error: %s", host, port, util.inspect(err)
	      );
	    }
	  });
	}

	function configure(config) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }
	  return logstashUDP(config, layout);
	}

	exports.appender = logstashUDP;
	exports.configure = configure;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91).Buffer))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var layouts = __webpack_require__(117);
	var layout;
	var config;
	var mailgun;

	function mailgunAppender(_config, _layout) {

	    config = _config;
	    layout = _layout || layouts.basicLayout;

	    return function (loggingEvent) {

	        var data = {
	            from: _config.from,
	            to: _config.to,
	            subject: _config.subject,
	            text: layout(loggingEvent, config.timezoneOffset)
	        };

	        mailgun.messages().send(data, function (error, body) {
	            if (error !== null) console.error("log4js.mailgunAppender - Error happened", error);
	        });
	    };
	}

	function configure(_config) {
	    config = _config;

	    if (_config.layout) {
	        layout = layouts.layout(_config.layout.type, _config.layout);
	    }

	    mailgun = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mailgun-js\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))({
	        apiKey: _config.apikey,
	        domain: _config.domain
	    });

	    return mailgunAppender(_config, layout);
	}

	exports.appender = mailgunAppender;
	exports.configure = configure;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var log4js = __webpack_require__(116)
	, net = __webpack_require__(68)
	, END_MSG = '__LOG4JS__';

	/**
	 * Creates a server, listening on config.loggerPort, config.loggerHost.
	 * Output goes to config.actualAppender (config.appender is used to
	 * set up that appender).
	 */
	function logServer(config) {

	  /**
	   * Takes a utf-8 string, returns an object with
	   * the correct log properties.
	   */
	  function deserializeLoggingEvent(clientSocket, msg) {
	    var loggingEvent;
	    try {
	      loggingEvent = JSON.parse(msg);
	      loggingEvent.startTime = new Date(loggingEvent.startTime);
	      loggingEvent.level = log4js.levels.toLevel(loggingEvent.level.levelStr);
	    } catch (e) {
	      // JSON.parse failed, just log the contents probably a naughty.
	      loggingEvent = {
	        startTime: new Date(),
	        categoryName: 'log4js',
	        level: log4js.levels.ERROR,
	        data: [ 'Unable to parse log:', msg ]
	      };
	    }

	    loggingEvent.remoteAddress = clientSocket.remoteAddress;
	    loggingEvent.remotePort = clientSocket.remotePort;

	    return loggingEvent;
	  }

	  var actualAppender = config.actualAppender,
	  server = net.createServer(function serverCreated(clientSocket) {
	    clientSocket.setEncoding('utf8');
	    var logMessage = '';

	    function logTheMessage(msg) {
	      if (logMessage.length > 0) {
	        actualAppender(deserializeLoggingEvent(clientSocket, msg));
	      }
	    }

	    function chunkReceived(chunk) {
	      var event;
	      logMessage += chunk || '';
	      if (logMessage.indexOf(END_MSG) > -1) {
	        event = logMessage.substring(0, logMessage.indexOf(END_MSG));
	        logTheMessage(event);
	        logMessage = logMessage.substring(event.length + END_MSG.length) || '';
	        //check for more, maybe it was a big chunk
	        chunkReceived();
	      }
	    }

	    clientSocket.on('data', chunkReceived);
	    clientSocket.on('end', chunkReceived);
	  });

	  server.listen(config.loggerPort || 5000, config.loggerHost || 'localhost');

	  return actualAppender;
	}

	function workerAppender(config) {
	  var canWrite = false,
	  buffer = [],
	  socket;

	  createSocket();

	  function createSocket() {
	    socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || 'localhost');
	    socket.on('connect', function() {
	      emptyBuffer();
	      canWrite = true;
	    });
	    socket.on('timeout', socket.end.bind(socket));
	    //don't bother listening for 'error', 'close' gets called after that anyway
	    socket.on('close', createSocket);
	  }

	  function emptyBuffer() {
	    var evt;
	    while ((evt = buffer.shift())) {
	      write(evt);
	    }
	  }

	  function write(loggingEvent) {
		// JSON.stringify(new Error('test')) returns {}, which is not really useful for us.
		// The following allows us to serialize errors correctly.
	  // Validate that we really are in this case
		if (loggingEvent && loggingEvent.stack && JSON.stringify(loggingEvent) === '{}') {
			loggingEvent = {stack : loggingEvent.stack};
		}
	    socket.write(JSON.stringify(loggingEvent), 'utf8');
	    socket.write(END_MSG, 'utf8');
	  }

	  return function log(loggingEvent) {
	    if (canWrite) {
	      write(loggingEvent);
	    } else {
	      buffer.push(loggingEvent);
	    }
	  };
	}

	function createAppender(config) {
	  if (config.mode === 'master') {
	    return logServer(config);
	  } else {
	    return workerAppender(config);
	  }
	}

	function configure(config, options) {
	  var actualAppender;
	  if (config.appender && config.mode === 'master') {
	    log4js.loadAppender(config.appender.type);
	    actualAppender = log4js.appenderMakers[config.appender.type](config.appender, options);
	    config.actualAppender = actualAppender;
	  }
	  return createAppender(config);
	}

	exports.appender = createAppender;
	exports.configure = configure;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Slack = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"slack-node\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var layouts = __webpack_require__(117);
	var layout;

	var slack, config;

	function slackAppender(_config, _layout) {

	    layout = _layout || layouts.basicLayout;

	    return function (loggingEvent) {

	        var data = {
	            channel_id: _config.channel_id,
	            text: layout(loggingEvent, _config.timezoneOffset),
	            icon_url: _config.icon_url,
	            username: _config.username
	        };

	        slack.api('chat.postMessage', {
	            channel: data.channel_id,
	            text: data.text,
	            icon_url: data.icon_url,username: data.username}, function (err, response) {
	            if (err) { throw err; }
	        });

	    };
	}

	function configure(_config) {

	    if (_config.layout) {
	        layout = layouts.layout(_config.layout.type, _config.layout);
	    }

	    slack = new Slack(_config.token);

	    return slackAppender(_config, layout);
	}

	exports.name      = 'slack';
	exports.appender = slackAppender;
	exports.configure = configure;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var layouts = __webpack_require__(117);
	var mailer = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"nodemailer\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var os = __webpack_require__(186);

	var logEventBuffer = [];
	var subjectLayout;
	var layout;

	var unsentCount = 0;
	var shutdownTimeout;

	var sendInterval;
	var sendTimer;

	var config;

	function sendBuffer() {
	    if (logEventBuffer.length > 0) {

	        var transportOpts = getTransportOptions(config);
	        var transport = mailer.createTransport(transportOpts);
	        var firstEvent = logEventBuffer[0];
	        var body = "";
	        var count = logEventBuffer.length;
	        while (logEventBuffer.length > 0) {
	            body += layout(logEventBuffer.shift(), config.timezoneOffset) + "\n";
	        }

	        var msg = {
	            to: config.recipients,
	            subject: config.subject || subjectLayout(firstEvent),
	            headers: {"Hostname": os.hostname()}
	        };

	        if (true === config.attachment.enable) {
	            msg[config.html ? "html" : "text"] = config.attachment.message;
	            msg.attachments = [
	                {
	                    filename: config.attachment.filename,
	                    contentType: 'text/x-log',
	                    content: body
	                }
	            ];
	        } else {
	            msg[config.html ? "html" : "text"] = body;
	        }

	        if (config.sender) {
	            msg.from = config.sender;
	        }
	        transport.sendMail(msg, function (error) {
	            if (error) {
	                console.error("log4js.smtpAppender - Error happened", error);
	            }
	            transport.close();
	            unsentCount -= count;
	        });
	    }
	}

	function getTransportOptions() {
	    var transportOpts = null;
	    if (config.SMTP) {
	        transportOpts = config.SMTP;
	    } else if (config.transport) {
	        var plugin = config.transport.plugin || 'smtp';
	        var transportModule = 'nodemailer-' + plugin + '-transport';
	        var transporter = __webpack_require__(123)(transportModule);
	        transportOpts = transporter(config.transport.options);
	    }

	    return transportOpts;
	}

	function scheduleSend() {
	    if (!sendTimer) {
	        sendTimer = setTimeout(function () {
	            sendTimer = null;
	            sendBuffer();
	        }, sendInterval);
	    }
	}

	/**
	 * SMTP Appender. Sends logging events using SMTP protocol. 
	 * It can either send an email on each event or group several 
	 * logging events gathered during specified interval.
	 *
	 * @param _config appender configuration data
	 *    config.sendInterval time between log emails (in seconds), if 0
	 *    then every event sends an email
	 *    config.shutdownTimeout time to give up remaining emails (in seconds; defaults to 5).
	 * @param _layout a function that takes a logevent and returns a string (defaults to basicLayout).
	 */
	function smtpAppender(_config, _layout) {
	    config = _config;

	    if (!config.attachment) {
	        config.attachment = {};
	    }

	    config.attachment.enable = !!config.attachment.enable;
	    config.attachment.message = config.attachment.message || "See logs as attachment";
	    config.attachment.filename = config.attachment.filename || "default.log";
	    layout = _layout || layouts.basicLayout;
	    subjectLayout = layouts.messagePassThroughLayout;
	    sendInterval = config.sendInterval * 1000 || 0;

	    shutdownTimeout = ('shutdownTimeout' in config ? config.shutdownTimeout : 5) * 1000;

	    return function (loggingEvent) {
	        unsentCount++;
	        logEventBuffer.push(loggingEvent);
	        if (sendInterval > 0) {
	            scheduleSend();
	        } else {
	            sendBuffer();
	        }
	    };
	}

	function configure(_config) {
	    config = _config;
	    if (_config.layout) {
	        layout = layouts.layout(_config.layout.type, _config.layout);
	    }
	    return smtpAppender(_config, layout);
	}

	function shutdown(cb) {
	    if (shutdownTimeout > 0) {
	        setTimeout(function () {
	            if (sendTimer)
	                clearTimeout(sendTimer);
	            sendBuffer();
	        }, shutdownTimeout);
	    }
	    (function checkDone() {
	      if (unsentCount > 0) {
	        setTimeout(checkDone, 100);
	      } else {
	        cb();
	      }
	    })();
	}

	exports.name = "smtp";
	exports.appender = smtpAppender;
	exports.configure = configure;
	exports.shutdown = shutdown;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var layouts = __webpack_require__(117);

	function stderrAppender(layout, timezoneOffset) {
	  layout = layout || layouts.colouredLayout;
	  return function(loggingEvent) {
	    process.stderr.write(layout(loggingEvent, timezoneOffset) + '\n');
	  };
	}

	function configure(config) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }
	  return stderrAppender(layout, config.timezoneOffset);
	}

	exports.appender = stderrAppender;
	exports.configure = configure;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var layouts = __webpack_require__(117);

	function stdoutAppender(layout, timezoneOffset) {
	  layout = layout || layouts.colouredLayout;
	  return function(loggingEvent) {
	    process.stdout.write(layout(loggingEvent, timezoneOffset) + '\n');
	  };
	}

	function configure(config) {
	  var layout;
	  if (config.layout) {
	    layout = layouts.layout(config.layout.type, config.layout);
	  }
	  return stdoutAppender(layout, config.timezoneOffset);
	}

	exports.appender = stdoutAppender;
	exports.configure = configure;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./appenders/categoryFilter": 124,
		"./appenders/categoryFilter.js": 124,
		"./appenders/clustered": 125,
		"./appenders/clustered.js": 125,
		"./appenders/console": 126,
		"./appenders/console.js": 126,
		"./appenders/dateFile": 127,
		"./appenders/dateFile.js": 127,
		"./appenders/file": 187,
		"./appenders/file.js": 187,
		"./appenders/fileSync": 191,
		"./appenders/fileSync.js": 191,
		"./appenders/gelf": 192,
		"./appenders/gelf.js": 192,
		"./appenders/hipchat": 193,
		"./appenders/hipchat.js": 193,
		"./appenders/logFacesAppender": 194,
		"./appenders/logFacesAppender.js": 194,
		"./appenders/logLevelFilter": 195,
		"./appenders/logLevelFilter.js": 195,
		"./appenders/loggly": 196,
		"./appenders/loggly.js": 196,
		"./appenders/logstashUDP": 197,
		"./appenders/logstashUDP.js": 197,
		"./appenders/mailgun": 198,
		"./appenders/mailgun.js": 198,
		"./appenders/multiprocess": 199,
		"./appenders/multiprocess.js": 199,
		"./appenders/slack": 200,
		"./appenders/slack.js": 200,
		"./appenders/smtp": 201,
		"./appenders/smtp.js": 201,
		"./appenders/stderr": 202,
		"./appenders/stderr.js": 202,
		"./appenders/stdout": 203,
		"./appenders/stdout.js": 203,
		"./connect-logger": 205,
		"./connect-logger.js": 205,
		"./date_format": 118,
		"./date_format.js": 118,
		"./layouts": 117,
		"./layouts.js": 117,
		"./levels": 121,
		"./levels.js": 121,
		"./log4js": 116,
		"./log4js.js": 116,
		"./logger": 122,
		"./logger.js": 122
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 204;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var levels = __webpack_require__(121);
	var DEFAULT_FORMAT = ':remote-addr - -' +
	  ' ":method :url HTTP/:http-version"' +
	  ' :status :content-length ":referrer"' +
	  ' ":user-agent"';
	/**
	 * Log requests with the given `options` or a `format` string.
	 *
	 * Options:
	 *
	 *   - `format`        Format string, see below for tokens
	 *   - `level`         A log4js levels instance. Supports also 'auto'
	 *
	 * Tokens:
	 *
	 *   - `:req[header]` ex: `:req[Accept]`
	 *   - `:res[header]` ex: `:res[Content-Length]`
	 *   - `:http-version`
	 *   - `:response-time`
	 *   - `:remote-addr`
	 *   - `:date`
	 *   - `:method`
	 *   - `:url`
	 *   - `:referrer`
	 *   - `:user-agent`
	 *   - `:status`
	 *
	 * @param {String|Function|Object} format or options
	 * @return {Function}
	 * @api public
	 */

	function getLogger(logger4js, options) {
		if ('object' == typeof options) {
			options = options || {};
		} else if (options) {
			options = { format: options };
		} else {
			options = {};
		}

		var thislogger = logger4js
	  , level = levels.toLevel(options.level, levels.INFO)
	  , fmt = options.format || DEFAULT_FORMAT
	  , nolog = options.nolog ? createNoLogCondition(options.nolog) : null;

	  return function (req, res, next) {
	    // mount safety
	    if (req._logging) return next();

			// nologs
			if (nolog && nolog.test(req.originalUrl)) return next();
			if (thislogger.isLevelEnabled(level) || options.level === 'auto') {

				var start = new Date()
				, statusCode
				, writeHead = res.writeHead
				, url = req.originalUrl;

				// flag as logging
				req._logging = true;

				// proxy for statusCode.
				res.writeHead = function(code, headers){
					res.writeHead = writeHead;
					res.writeHead(code, headers);
					res.__statusCode = statusCode = code;
					res.__headers = headers || {};

					//status code response level handling
					if(options.level === 'auto'){
						level = levels.INFO;
						if(code >= 300) level = levels.WARN;
						if(code >= 400) level = levels.ERROR;
					} else {
						level = levels.toLevel(options.level, levels.INFO);
					}
				};

				//hook on end request to emit the log entry of the HTTP request.
				res.on('finish', function() {
					res.responseTime = new Date() - start;
					//status code response level handling
					if(res.statusCode && options.level === 'auto'){
						level = levels.INFO;
						if(res.statusCode >= 300) level = levels.WARN;
						if(res.statusCode >= 400) level = levels.ERROR;
					}
					if (thislogger.isLevelEnabled(level)) {
	          var combined_tokens = assemble_tokens(req, res, options.tokens || []);
						if (typeof fmt === 'function') {
							var line = fmt(req, res, function(str){ return format(str, combined_tokens); });
							if (line) thislogger.log(level, line);
						} else {
							thislogger.log(level, format(fmt, combined_tokens));
						}
					}
				});
			}

	    //ensure next gets always called
	    next();
	  };
	}

	/**
	 * Adds custom {token, replacement} objects to defaults,
	 * overwriting the defaults if any tokens clash
	 *
	 * @param  {IncomingMessage} req
	 * @param  {ServerResponse} res
	 * @param  {Array} custom_tokens
	 *    [{ token: string-or-regexp, replacement: string-or-replace-function }]
	 * @return {Array}
	 */
	function assemble_tokens(req, res, custom_tokens) {
	  var array_unique_tokens = function(array) {
	    var a = array.concat();
	    for(var i=0; i<a.length; ++i) {
	      for(var j=i+1; j<a.length; ++j) {
	        if(a[i].token == a[j].token) { // not === because token can be regexp object
	          a.splice(j--, 1);
	        }
	      }
	    }
	    return a;
	  };

	  var default_tokens = [];
	  default_tokens.push({ token: ':url', replacement: getUrl(req) });
	  default_tokens.push({ token: ':protocol', replacement: req.protocol });
	  default_tokens.push({ token: ':hostname', replacement: req.hostname });
	  default_tokens.push({ token: ':method', replacement: req.method });
	  default_tokens.push({ token: ':status', replacement: res.__statusCode || res.statusCode });
	  default_tokens.push({ token: ':response-time', replacement: res.responseTime });
	  default_tokens.push({ token: ':date', replacement: new Date().toUTCString() });
	  default_tokens.push({
	    token: ':referrer',
	    replacement: req.headers.referer || req.headers.referrer || ''
	  });
	  default_tokens.push({
	    token: ':http-version',
	    replacement: req.httpVersionMajor + '.' + req.httpVersionMinor
	  });
	  default_tokens.push({
	    token: ':remote-addr',
	    replacement:
	      req.headers['x-forwarded-for'] ||
	      req.ip ||
	      req._remoteAddress ||
	      (req.socket &&
	        (req.socket.remoteAddress ||
	          (req.socket.socket && req.socket.socket.remoteAddress)
	        )
	      )
	    }
	  );
	  default_tokens.push({ token: ':user-agent', replacement: req.headers['user-agent'] });
	  default_tokens.push({
	    token: ':content-length',
	    replacement:
	      (res._headers && res._headers['content-length']) ||
	      (res.__headers && res.__headers['Content-Length']) ||
	      '-'
	    }
	  );
	  default_tokens.push({ token: /:req\[([^\]]+)\]/g, replacement: function(_, field) {
	    return req.headers[field.toLowerCase()];
	  } });
	  default_tokens.push({ token: /:res\[([^\]]+)\]/g, replacement: function(_, field) {
	    return res._headers ?
	      (res._headers[field.toLowerCase()] || res.__headers[field])
	      : (res.__headers && res.__headers[field]);
	  } });

	  return array_unique_tokens(custom_tokens.concat(default_tokens));
	}

	/**
	 * Return request url path,
	 * adding this function prevents the Cyclomatic Complexity,
	 * for the assemble_tokens function at low, to pass the tests.
	 *
	 * @param  {IncomingMessage} req
	 * @return {String}
	 * @api private
	 */

	function getUrl(req){
	  return req.originalUrl || req.url;
	}
	/**
	 * Return formatted log line.
	 *
	 * @param  {String} str
	 * @param  {IncomingMessage} req
	 * @param  {ServerResponse} res
	 * @return {String}
	 * @api private
	 */

	function format(str, tokens) {
	  for (var i = 0; i < tokens.length; i++) {
	    str = str.replace(tokens[i].token, tokens[i].replacement);
	  }
	  return str;
	}

	/**
	 * Return RegExp Object about nolog
	 *
	 * @param  {String} nolog
	 * @return {RegExp}
	 * @api private
	 *
	 * syntax
	 *  1. String
	 *   1.1 "\\.gif"
	 *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.gif?fuga
	 *         LOGGING http://example.com/hoge.agif
	 *   1.2 in "\\.gif|\\.jpg$"
	 *         NOT LOGGING http://example.com/hoge.gif and
	 *           http://example.com/hoge.gif?fuga and http://example.com/hoge.jpg?fuga
	 *         LOGGING http://example.com/hoge.agif,
	 *           http://example.com/hoge.ajpg and http://example.com/hoge.jpg?hoge
	 *   1.3 in "\\.(gif|jpe?g|png)$"
	 *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.jpeg
	 *         LOGGING http://example.com/hoge.gif?uid=2 and http://example.com/hoge.jpg?pid=3
	 *  2. RegExp
	 *   2.1 in /\.(gif|jpe?g|png)$/
	 *         SAME AS 1.3
	 *  3. Array
	 *   3.1 ["\\.jpg$", "\\.png", "\\.gif"]
	 *         SAME AS "\\.jpg|\\.png|\\.gif"
	 */
	function createNoLogCondition(nolog) {
	  var regexp = null;

		if (nolog) {
	    if (nolog instanceof RegExp) {
	      regexp = nolog;
	    }

	    if (typeof nolog === 'string') {
	      regexp = new RegExp(nolog);
	    }

	    if (Array.isArray(nolog)) {
	      var regexpsAsStrings = nolog.map(
	        function convertToStrings(o) {
	          return o.source ? o.source : o;
	        }
	      );
	      regexp = new RegExp(regexpsAsStrings.join('|'));
	    }
	  }

	  return regexp;
	}

	exports.connectLogger = getLogger;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (function() {
	  /*
	   * Generated by PEG.js 0.8.0.
	   *
	   * http://pegjs.majda.cz/
	   */

	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }

	  function SyntaxError(message, expected, found, offset, line, column) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.offset   = offset;
	    this.line     = line;
	    this.column   = column;

	    this.name     = "SyntaxError";
	  }

	  peg$subclass(SyntaxError, Error);

	  function parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},

	        peg$FAILED = {},

	        peg$startRuleFunctions = { transformation_rules: peg$parsetransformation_rules },
	        peg$startRuleFunction  = peg$parsetransformation_rules,

	        peg$c0 = [],
	        peg$c1 = peg$FAILED,
	        peg$c2 = function(rules) {
	          var result = [];

	          for (var i = 0; i < rules.length; i++) {
	            result.push(rules[i][1]);
	          }
	          return(result);
	        },
	        peg$c3 = null,
	        peg$c4 = function(c1, c2, pred, par1, par2) {
	          // Construct rule
	          var result = new TransformationRule(c1, c2, pred, par1, par2);
	          return(result);
	        },
	        peg$c5 = /^[a-zA-Z_0-9_\-.,()]/,
	        peg$c6 = { type: "class", value: "[a-zA-Z_0-9_\\-.,()]", description: "[a-zA-Z_0-9_\\-.,()]" },
	        peg$c7 = function(characters) {
	           var s = "";
	           for (var i = 0; i < characters.length; i++) {
	             s += characters[i];
	           }
	           return(s);
	          },
	        peg$c8 = "*",
	        peg$c9 = { type: "literal", value: "*", description: "\"*\"" },
	        peg$c10 = function(wc) {
	           return(wc)
	          },
	        peg$c11 = "\r\n",
	        peg$c12 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
	        peg$c13 = "\n",
	        peg$c14 = { type: "literal", value: "\n", description: "\"\\n\"" },
	        peg$c15 = "\r",
	        peg$c16 = { type: "literal", value: "\r", description: "\"\\r\"" },
	        peg$c17 = "//",
	        peg$c18 = { type: "literal", value: "//", description: "\"//\"" },
	        peg$c19 = void 0,
	        peg$c20 = { type: "any", description: "any character" },
	        peg$c21 = " ",
	        peg$c22 = { type: "literal", value: " ", description: "\" \"" },
	        peg$c23 = "\t",
	        peg$c24 = { type: "literal", value: "\t", description: "\"\\t\"" },

	        peg$currPos          = 0,
	        peg$reportedPos      = 0,
	        peg$cachedPos        = 0,
	        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,

	        peg$result;

	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }

	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }

	    function text() {
	      return input.substring(peg$reportedPos, peg$currPos);
	    }

	    function offset() {
	      return peg$reportedPos;
	    }

	    function line() {
	      return peg$computePosDetails(peg$reportedPos).line;
	    }

	    function column() {
	      return peg$computePosDetails(peg$reportedPos).column;
	    }

	    function expected(description) {
	      throw peg$buildException(
	        null,
	        [{ type: "other", description: description }],
	        peg$reportedPos
	      );
	    }

	    function error(message) {
	      throw peg$buildException(message, null, peg$reportedPos);
	    }

	    function peg$computePosDetails(pos) {
	      function advance(details, startPos, endPos) {
	        var p, ch;

	        for (p = startPos; p < endPos; p++) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) { details.line++; }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }
	        }
	      }

	      if (peg$cachedPos !== pos) {
	        if (peg$cachedPos > pos) {
	          peg$cachedPos = 0;
	          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
	        }
	        advance(peg$cachedPosDetails, peg$cachedPos, pos);
	        peg$cachedPos = pos;
	      }

	      return peg$cachedPosDetails;
	    }

	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }

	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }

	      peg$maxFailExpected.push(expected);
	    }

	    function peg$buildException(message, expected, pos) {
	      function cleanupExpected(expected) {
	        var i = 1;

	        expected.sort(function(a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });

	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }

	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

	          return s
	            .replace(/\\/g,   '\\\\')
	            .replace(/"/g,    '\\"')
	            .replace(/\x08/g, '\\b')
	            .replace(/\t/g,   '\\t')
	            .replace(/\n/g,   '\\n')
	            .replace(/\f/g,   '\\f')
	            .replace(/\r/g,   '\\r')
	            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
	            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
	            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
	            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
	        }

	        var expectedDescs = new Array(expected.length),
	            expectedDesc, foundDesc, i;

	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }

	        expectedDesc = expected.length > 1
	          ? expectedDescs.slice(0, -1).join(", ")
	              + " or "
	              + expectedDescs[expected.length - 1]
	          : expectedDescs[0];

	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }

	      var posDetails = peg$computePosDetails(pos),
	          found      = pos < input.length ? input.charAt(pos) : null;

	      if (expected !== null) {
	        cleanupExpected(expected);
	      }

	      return new SyntaxError(
	        message !== null ? message : buildMessage(expected, found),
	        expected,
	        found,
	        pos,
	        posDetails.line,
	        posDetails.column
	      );
	    }

	    function peg$parsetransformation_rules() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$parseS();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsetransformation_rule();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parseS();
	          if (s5 !== peg$FAILED) {
	            s3 = [s3, s4, s5];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c1;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$c1;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$c1;
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$parseS();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsetransformation_rule();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseS();
	              if (s5 !== peg$FAILED) {
	                s3 = [s3, s4, s5];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$c1;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$c1;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c1;
	          }
	        }
	      } else {
	        s1 = peg$c1;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c2(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsetransformation_rule() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = peg$parsecategory1();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseidentifier();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseidentifier();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseidentifier();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseidentifier();
	              if (s5 === peg$FAILED) {
	                s5 = peg$c3;
	              }
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c4(s1, s2, s3, s4, s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c1;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c1;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c1;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c1;
	      }

	      return s0;
	    }

	    function peg$parsecategory1() {
	      var s0;

	      s0 = peg$parsewild_card();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseidentifier();
	      }

	      return s0;
	    }

	    function peg$parseidentifier() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      if (peg$c5.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c6); }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          if (peg$c5.test(input.charAt(peg$currPos))) {
	            s2 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c6); }
	          }
	        }
	      } else {
	        s1 = peg$c1;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseS_no_eol();
	        if (s2 !== peg$FAILED) {
	          peg$reportedPos = s0;
	          s1 = peg$c7(s1);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c1;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c1;
	      }

	      return s0;
	    }

	    function peg$parsewild_card() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 42) {
	        s1 = peg$c8;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c9); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseS_no_eol();
	        if (s2 !== peg$FAILED) {
	          peg$reportedPos = s0;
	          s1 = peg$c10(s1);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c1;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c1;
	      }

	      return s0;
	    }

	    function peg$parseEOL() {
	      var s0;

	      if (input.substr(peg$currPos, 2) === peg$c11) {
	        s0 = peg$c11;
	        peg$currPos += 2;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c12); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 10) {
	          s0 = peg$c13;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c14); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 13) {
	            s0 = peg$c15;
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c16); }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseComment() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c17) {
	        s1 = peg$c17;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c18); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$currPos;
	        peg$silentFails++;
	        s5 = peg$parseEOL();
	        peg$silentFails--;
	        if (s5 === peg$FAILED) {
	          s4 = peg$c19;
	        } else {
	          peg$currPos = s4;
	          s4 = peg$c1;
	        }
	        if (s4 !== peg$FAILED) {
	          if (input.length > peg$currPos) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c20); }
	          }
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$c1;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$c1;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          s5 = peg$parseEOL();
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = peg$c19;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$c1;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c20); }
	            }
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$c1;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$c1;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseEOL();
	          if (s3 === peg$FAILED) {
	            s3 = peg$parseEOI();
	          }
	          if (s3 !== peg$FAILED) {
	            s1 = [s1, s2, s3];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c1;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c1;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c1;
	      }

	      return s0;
	    }

	    function peg$parseS() {
	      var s0, s1;

	      s0 = [];
	      if (input.charCodeAt(peg$currPos) === 32) {
	        s1 = peg$c21;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c22); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 9) {
	          s1 = peg$c23;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c24); }
	        }
	        if (s1 === peg$FAILED) {
	          s1 = peg$parseEOL();
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseComment();
	          }
	        }
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        if (input.charCodeAt(peg$currPos) === 32) {
	          s1 = peg$c21;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c22); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 9) {
	            s1 = peg$c23;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c24); }
	          }
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseEOL();
	            if (s1 === peg$FAILED) {
	              s1 = peg$parseComment();
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseS_no_eol() {
	      var s0, s1;

	      s0 = [];
	      if (input.charCodeAt(peg$currPos) === 32) {
	        s1 = peg$c21;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c22); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 9) {
	          s1 = peg$c23;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c24); }
	        }
	        if (s1 === peg$FAILED) {
	          s1 = peg$parseComment();
	        }
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        if (input.charCodeAt(peg$currPos) === 32) {
	          s1 = peg$c21;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c22); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 9) {
	            s1 = peg$c23;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c24); }
	          }
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseComment();
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseEOI() {
	      var s0, s1;

	      s0 = peg$currPos;
	      peg$silentFails++;
	      if (input.length > peg$currPos) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c20); }
	      }
	      peg$silentFails--;
	      if (s1 === peg$FAILED) {
	        s0 = peg$c19;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c1;
	      }

	      return s0;
	    }


	      var TransformationRule = __webpack_require__(207);


	    peg$result = peg$startRuleFunction();

	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }

	      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
	    }
	  }

	  return {
	    SyntaxError: SyntaxError,
	    parse:       parse
	  };
	})();


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    Transformation rules for the Brill tagger
	    Copyright (C) 2015 Hugo W.L. ter Doest

	    This program is free software: you can redistribute it and/or modify
	    it under the terms of the GNU General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    This program is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU General Public License for more details.

	    You should have received a copy of the GNU General Public License
	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	*/

	var log4js = __webpack_require__(116);
	var logger = log4js.getLogger();

	var Predicate = __webpack_require__(208);

	logger.setLevel('ERROR');

	var category_wild_card = "*";

	function TransformationRule(c1, c2, predicate, parameter1, parameter2) {
	  this.literal = [c1, c2, predicate, parameter1, parameter2];
	  this.predicate = new Predicate(predicate, parameter1, parameter2);
	  this.old_category = c1;
	  this.new_category = c2;
	  logger.debug('TransformationRule constructor: ' + this.literal);
	}

	TransformationRule.prototype.apply = function(tagged_sentence, position) {
	  if ((tagged_sentence[position][1] === this.old_category) ||
	      (this.old_category === category_wild_card)) {
	    if (this.predicate.evaluate(tagged_sentence, position)) {
	      tagged_sentence[position][1] = this.new_category;
	      logger.debug('TransformationRule.apply: changed category ' + 
	                   this.old_category + ' to ' + this.new_category +
	                   ' at position ' + position);
	    }
	  }
	};

	module.exports = TransformationRule;
	  

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    Predicates for the Brill tagger
	    Copyright (C) 2015 Hugo W.L. ter Doest

	    This program is free software: you can redistribute it and/or modify
	    it under the terms of the GNU General Public License as published by
	    the Free Software Foundation, either version 3 of the License, or
	    (at your option) any later version.

	    This program is distributed in the hope that it will be useful,
	    but WITHOUT ANY WARRANTY; without even the implied warranty of
	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    GNU General Public License for more details.

	    You should have received a copy of the GNU General Public License
	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	*/

	var log4js = __webpack_require__(116);
	var logger = log4js.getLogger();
	logger.setLevel('WARN');

	var predicates = {
	    // Predicates as used in the English rules in data/English/tr_from_posjs.txt
	    "NEXT-TAG": next_tag_is,
	    "NEXT-WORD-IS-CAP": next_word_is_cap,
	    "PREV-1-OR-2-OR-3-TAG": prev_1_or_2_or_3_tag,
	    "PREV-1-OR-2-TAG": prev_1_or_2_tag,
	    "NEXT-WORD-IS-TAG": next_tag_is,
	    "PREV-TAG": prev_tag_is,
	    "CURRENT-WORD-IS-TAG": current_word_is_tag,
	    "PREV-WORD-IS-CAP": prev_word_is_cap,
	    "CURRENT-WORD-IS-CAP": current_word_is_cap,
	    "CURRENT-WORD-IS-NUMBER": current_word_is_number,
	    "CURRENT-WORD-IS-URL": current_word_is_url,
	    "CURRENT-WORD-ENDS-WITH": current_word_ends_with,
	    "PREV-WORD-IS": prev_word_is,
	    // Predicates as used in the Dutch rules in data/Dutch/brill_CONTEXTRULES.jg
	    "PREVTAG": prev_tag_is,
	    "NEXT1OR2TAG": next_1_or_2_tag_is,
	    "NEXTTAG": next_tag_is,
	    "PREV1OR2TAG": prev_1_or_2_tag,
	    "WDAND2TAGAFT": current_word_and_2_tag_after_are,
	    "NEXT1OR2OR3TAG": next_1_or_2_or_3_tag,
	    "CURWD": current_word_is,
	    "SURROUNDTAG": surrounded_by_tags,
	    "PREV1OR2OR3TAG": prev_1_or_2_or_3_tag, 
	    "WDNEXTTAG": current_word_and_next_tag_are,
	    "PREV1OR2WD": prev_1_or_2_word_is,
	    "NEXTWD": next_word_is,
	    "PREVWD": prev_word_is,
	    "NEXT2TAG": next_2_tag_is,
	    "WDAND2TAGBFR": current_word_and_2_tag_before_are,
	    "WDAND2AFT": current_word_and_2_after_are,
	    "WDPREVTAG": current_word_and_prev_tag_are,
	    "RBIGRAM": right_bigram_is,
	    "LBIGRAM": left_bigram_is,
	    "NEXTBIGRAM": next_bigram_is,
	    "PREVBIGRAM": prev_bigram_is,
	    "PREV2TAG": prev_2_tag_is,
	    "NEXT1OR2WD": next_1_or_2_word_is
	 };

	// ==================================
	// Predicates that start with words
	// ==================================
	function next_word_is_cap(tagged_sentence, i, parameter) {
	  if (i < tagged_sentence.length - 1) {
	    var next_word = tagged_sentence[i+1][0];
	    return(next_word[0] === next_word[0].toUpperCase());
	  }
	  else {
	    return(false);
	  }
	}

	function next_word_is(tagged_sentence, i, parameter) {
	  if (i < tagged_sentence.length - 1) {
	    return(tagged_sentence[i+1][0] === parameter);
	  }
	}

	function prev_word_is_cap(tagged_sentence, i, parameter) {
	  var prev_word = null;
	  if (i > 0) {
	    prev_word = tagged_sentence[i-1][0];
	    return(prev_word[0] === prev_word[0].toUpperCase());
	  }
	  return(false);
	}

	function current_word_is_cap(tagged_sentence, i, parameter) {
	  var current_word = tagged_sentence[i][0];
	  return(current_word[0] === current_word[0].toUpperCase());
	}

	function current_word_is(tagged_sentence, i, parameter) {
	  return(tagged_sentence[i][0] === parameter);
	}

	function isNumeric(num) {
	  return (!isNaN(num));
	}

	function current_word_is_number(tagged_sentence, i, parameter) {
	  var is_number = isNumeric(tagged_sentence[i][0]);
	  // Attempt to parse it as a float
	  if (!is_number) {
	    is_number = parseFloat(tagged_sentence[i][0]);
	  }
	  return((parameter === "YES") ? is_number : !is_number);
	}

	// Checks if the current word is a url
	// Adapted from the original Javascript Brill tagger
	function current_word_is_url(tagged_sentence, i, parameter) {
	  var is_url = false;
	  if (tagged_sentence[i][0].indexOf(".") > -1) {
	    // url if there are two contiguous alpha characters
	    if (/[a-zA-Z]{2}/.test(tagged_sentence[i][0])) {
	      is_url = true;
	    }
	  }
	  return((parameter === "YES") ? is_url : !is_url);
	};

	function current_word_and_2_tag_after_are(tagged_sentence, i, parameter1, parameter2) {
	  if (i < tagged_sentence.length - 2) {
	    if (tagged_sentence[i+2][1] === parameter2) {
	      return(tagged_sentence[i][0] === parameter1);
	    }
	    else {
	      return(false);
	    }
	  }
	  else {
	    return(false);
	  }
	}

	function current_word_and_next_tag_are(tagged_sentence, i, parameter1, parameter2) {
	  var next_tag = false;
	  // check current word
	  var current_word = (tagged_sentence[i][0] === parameter1);
	  // check next tag
	  if (i < tagged_sentence.length - 1) {
	    next_tag = (tagged_sentence[i+1][1] === parameter2);
	  }
	  return(current_word && next_tag);
	}

	function current_word_and_prev_tag_are(tagged_sentence, i, parameter1, parameter2) {
	  var prev_tag = false;
	  // check current word
	  var current_word = (tagged_sentence[i][0] === parameter2);
	  // check prev tag
	  if (i > 0) {
	    prev_tag = (tagged_sentence[i-1][1] === parameter1);
	  }
	  return(current_word && prev_tag);
	}

	function current_word_and_2_tag_before_are(tagged_sentence, i, parameter1, parameter2) {
	  var two_tags_before = false;
	  // check current word
	  var current_word = (tagged_sentence[i][0] === parameter2);
	  if (i > 1) {
	    // check two tags before
	    two_tags_before = (tagged_sentence[i-2][1] === parameter1);
	  }
	  return(current_word && two_tags_before);
	}

	function current_word_and_2_after_are(tagged_sentence, i, parameter1, parameter2) {
	   var two_words_after = false;
	  // check current word
	  var current_word = (tagged_sentence[i][0] === parameter1);
	  if (i < tagged_sentence - 2) {
	    two_words_after = (tagged_sentence[i+2][0] === parameter2);
	  }
	  return(current_word && two_words_after);
	}

	function prev_word_is(tagged_sentence, i, parameter) {
	  if (i > 0) {
	    return(tagged_sentence[i-1][0].toLowerCase() === parameter.toLowerCase());
	  }
	  else {
	    return(false);
	  }
	};

	function prev_1_or_2_word_is(tagged_sentence, i, parameter) {
	  var prev_1 = false;
	  var prev_2 = false;
	  if (i > 0) {
	    prev_1 = (tagged_sentence[i-1][0].toLowerCase() === parameter.toLowerCase());
	  }
	  if (i > 1) {
	    prev_2 = (tagged_sentence[i-2][0].toLowerCase() === parameter.toLowerCase());
	  }
	  return(prev_1 || prev_2);
	};

	// Indicates whether or not this string ends with the specified string.
	// Adapted from the original Javascript Brill tagger
	function current_word_ends_with(tagged_sentence, i, parameter) {
	  var word = tagged_sentence[i][0];
	  if (!parameter || (parameter.length > word.length)) {
	    return false;
	  }
	  return(word.indexOf(parameter) === (word.length - parameter.length));
	}

	function right_bigram_is(tagged_sentence, i, parameter1, parameter2) {
	  var word_1 = (tagged_sentence[i][0] === parameter1);
	  var word_2 = false;
	  if (i < tagged_sentence.length - 1) {
	    word_2 = (tagged_sentence[i+1][0] === parameter2);
	  }
	  return(word_1 && word_2);
	}

	function left_bigram_is(tagged_sentence, i, parameter1, parameter2) {
	  var word_1 = false;
	  var word_2 = (tagged_sentence[i][0] === parameter2);
	  if (i > 0) {
	    word_1 = (tagged_sentence[i-1][0] === parameter1);
	  }
	  return(word_1 && word_2);
	}

	function next_bigram_is(tagged_sentence, i, parameter1, parameter2) {
	  var word_1 = false;
	  var word_2 = false;
	  if (i < tagged_sentence.length - 1) {
	    word_1 = (tagged_sentence[i+1][0] === parameter1);
	  }
	  if (i < tagged_sentence.length - 2) {
	    word_2 = (tagged_sentence[i+2][0] === parameter2);
	  }
	  return(word_1 && word_2);
	}

	function prev_bigram_is(tagged_sentence, i, parameter1, parameter2) {
	  var word_1 = false;
	  var word_2 = false;
	  if (i >  1) {
	    word_1 = (tagged_sentence[i-2][0] === parameter1);
	  }
	  if (i > 0) {
	    word_2 = (tagged_sentence[i-1][0] === parameter2);
	  }
	  return(word_1 && word_2);
	}

	function next_1_or_2_word_is(tagged_sentence, i, parameter1, parameter2) {
	  next_1 = false;
	  next_2 = false;
	  if (i < tagged_sentence.length - 1) {
	    next_1 = (tagged_sentence[i+1][0] === parameter1);
	  }
	  if (i < tagged_sentence.length - 2) {
	    next_2 = (tagged_sentence[i+2][0] === parameter2);
	  }
	  return(next_1 || next_2);
	}

	// ==================================
	// Predicates about tags
	// ==================================
	function next_tag_is(tagged_sentence, i, parameter) {
	  if (i < tagged_sentence.length - 1) {
	    return(tagged_sentence[i+1][1] === parameter);
	  }
	  else {
	    return(false);
	  }
	}

	function next_2_tag_is(tagged_sentence, i, parameter) {
	  if (i < tagged_sentence.length - 2) {
	    return(tagged_sentence[i+2][1] === parameter);
	  }
	  else {
	    return(false);
	  }
	}

	function next_1_or_2_tag_is(tagged_sentence, i, parameter) {
	  var next_1 = false;
	  var next_2 = false;
	  if (i < tagged_sentence.length - 1) {
	    next_1 = (tagged_sentence[i+1][1] === parameter);
	  }
	  if (i < tagged_sentence.length - 2) {
	    next_2 = (tagged_sentence[i+2][1] === parameter);
	  }
	  return(next_1 || next_2);
	}

	function next_1_or_2_or_3_tag(tagged_sentence, i, parameter) {
	  var next_1 = false;
	  var next_2 = false;
	  var next_3 = false;
	  if (i < tagged_sentence.length - 1) {
	    next_1 = (tagged_sentence[i+1][1] === parameter);
	  }
	  if (i < tagged_sentence.length - 2) {
	    next_2 = (tagged_sentence[i+2][1] === parameter);
	  }
	  if (i < tagged_sentence.length - 3) {
	    next_3 = (tagged_sentence[i+3][1] === parameter);
	  }
	  return(next_1 || next_2 || next_3);
	}

	function surrounded_by_tags(tagged_sentence, i, parameter1, parameter2) {
	  if (i < tagged_sentence.length - 1) {
	    // check next tag
	    if (tagged_sentence[i+1][1] === parameter2) {
	      // check previous tag
	      if (i > 0) {
	        return(tagged_sentence[i-1][1] === parameter1)
	      }
	      else {
	        return(false);
	      }
	    }
	    else {
	      return(false);
	    }
	  }
	  else {
	    return(false);
	  }
	}

	function prev_1_or_2_or_3_tag(tagged_sentence, i, parameter) {
	  var prev_1 = null;
	  if (i > 0) {
	    prev_1 = tagged_sentence[i-1][1];
	  }
	  var prev_2 = null;
	  if (i > 1) {
	    prev_2 = tagged_sentence[i-2][1];
	  }
	  var prev_3 = null;
	  if (i > 2) {
	    prev_3 = tagged_sentence[i-2][1];
	  }
	  return((prev_1 === parameter) || (prev_2 === parameter) || (prev_3 === parameter));
	}

	function prev_1_or_2_tag(tagged_sentence, i, parameter) {
	  var prev_1 = null;
	  if (i > 0) {
	    prev_1 = tagged_sentence[i-1][1];
	  }
	  var prev_2 = null;
	  if (i > 1) {
	    prev_2 = tagged_sentence[i-2][1];
	  }
	  return((prev_1 === parameter) || (prev_2 === parameter));
	}

	function prev_tag_is(tagged_sentence, i, parameter) {
	  var prev = false;
	  if (i > 0) {
	    prev = (tagged_sentence[i-1][1] === parameter);
	  }
	  return(prev);
	}

	function current_word_is_tag(tagged_sentence, i, parameter) {
	  return(tagged_sentence[i][0] === parameter);
	}

	function prev_2_tag_is(tagged_sentence, i, parameter) {
	  var prev_2 = false;
	  if (i > 1) {
	    prev_2 = (tagged_sentence[i-2][1] === parameter);
	  }
	  return(prev_2);
	}

	function default_transformation_rule (tagged_sentence, i, parameter) {
	  return(false);
	}

	function Predicate(name, parameter1, parameter2) {
	  this.name = name;
	  this.parameter1 = parameter1;
	  if (parameter2) {
	    this.parameter2 = parameter2;
	  }
	  this.function = predicates[name];
	  if (!this.function) {
	    this.predicate = default_transformation_rule;
	    logger.warn('Predicate constructor: predicate not found: ' + name + '; using default');
	  }
	  logger.debug(this.name);
	  logger.debug(this.function);
	}

	Predicate.prototype.evaluate = function(tagged_sentence, position) {
	  return(this.function(tagged_sentence, position, this.parameter1, this.parameter2));
	};

	module.exports = Predicate;

/***/ }
/******/ ]);